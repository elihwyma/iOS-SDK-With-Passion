#!/usr/bin/env python3

import sys, os, subprocess, pathlib, itertools

if len(sys.argv) <= 1 or bool(list(set(sys.argv) & set(['-h', '--help', 'help']))):
    print('Usage:')
    print('    createsdk [-d] target_path')
    print()
    print('Positional args:')
    print('    target_path     Path to the target dyld_shared_cache')
    print()
    print('Flag args:')
    print('    -d              Delete extracted binaries after processing')
    exit()
    
targetPath = next(x for x in sys.argv[1:] if not x.startswith('-'))
dscPath = os.path.join(os.getcwd(), targetPath)
if not os.path.exists(dscPath):
    print('Error: specified target_path does not exist')
    exit()
deleteExtractedBinaries = '-d' in sys.argv

sdkPath = pathlib.Path(*pathlib.Path.cwd().parts, 'iPhoneOS.sdk')
if sdkPath.exists():
    print('Error: output path already exists')
    exit()
    
print('Processing...')

dscImages = []
process = subprocess.run(['dyldextractor', '-l', dscPath], capture_output=True)
stdoutLines = process.stdout.decode().split('\n')
for line in stdoutLines:
    comps = [x.strip() for x in line.split('|')]
    if len(comps) == 3:
        image = (comps[1], comps[2])
        dscImages.append(image)
        
imagesToProcess = []
for image in dscImages:
    imagePath = pathlib.Path(image[1])
    if imagePath.is_relative_to('/System/Library/Frameworks') or imagePath.is_relative_to('/System/Library/PrivateFrameworks'):
        imagesToProcess.append(image)
        
imagesToProcess.sort(key=lambda x: x[1].lower())

for index, image in enumerate(imagesToProcess):
    imageName = image[0]
    imagePath = pathlib.Path(image[1])
    binaryPath = sdkPath / imagePath.relative_to(imagePath.anchor)
    outputFolder = binaryPath.parent
    tbdPath = pathlib.Path(*outputFolder.parts, binaryPath.stem).with_suffix('.tbd')
    headersFolder = pathlib.Path(*outputFolder.parts, 'Headers')
    
    pathlib.Path(outputFolder).mkdir(parents=True, exist_ok=True)
    
    strs = [
        'Generating binary',
        'Generating tbd',
        'Generating headers',
    ]
    strsMaxLen = len(max(strs, key=len))
    
    print()
    print('Processing image', index + 1, 'of', len(imagesToProcess))
    
    print('{: <{}} - {}'.format(strs[0], strsMaxLen, imageName))
    subprocess.run(['dyldextractor', '-f', imageName, '-o', binaryPath, dscPath], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    print('{: <{}} - {}'.format(strs[1], strsMaxLen, imageName))
    subprocess.run(['tbd', '-p', binaryPath, '-o', tbdPath], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    print('{: <{}} - {}'.format(strs[2], strsMaxLen, imageName))
    subprocess.run(['classdump', '-h', '-o', headersFolder, binaryPath], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    if deleteExtractedBinaries:
        binaryPath.unlink(missing_ok=True)
        
print('')
print('Done!')
