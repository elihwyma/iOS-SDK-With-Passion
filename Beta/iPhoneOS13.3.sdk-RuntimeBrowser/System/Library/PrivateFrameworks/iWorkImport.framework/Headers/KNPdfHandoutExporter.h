/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface KNPdfHandoutExporter : KNPdfExporter {
    bool  _isDrawingNote;
    unsigned long long  _pageIndex;
    bool  _printingDivider;
    bool  _printingNotes;
    bool  _printingRuledLines;
    NSArray * _segments;
    NSArray * _segmentsForCurrentPage;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unscaledClipRectForPageCount;
    double  _viewScaleForPageCount;
}

@property (getter=isPrintingDivider, nonatomic) bool printingDivider;
@property (getter=isPrintingNotes, nonatomic) bool printingNotes;
@property (getter=isPrintingRuledLines, nonatomic) bool printingRuledLines;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unscaledClipRectForPageCount;
@property (nonatomic) double viewScaleForPageCount;

- (void).cxx_destruct;
- (id)currentInfos;
- (bool)drawCurrentPageInContext:(struct CGContext { }*)arg1 viewScale:(double)arg2 unscaledClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 createPage:(bool)arg4;
- (bool)incrementPage;
- (id)initWithDocumentRoot:(id)arg1;
- (bool)isPrintingDivider;
- (bool)isPrintingNotes;
- (bool)isPrintingRuledLines;
- (void)p_drawDividerLineForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 pageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(struct CGContext { }*)arg3;
- (void)p_drawNotesForNode:(id)arg1 index:(unsigned long long)arg2 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 notesIndex:(unsigned long long)arg4 scaledClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 context:(struct CGContext { }*)arg6;
- (void)p_drawRuledLinesForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 pageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 numberOfLines:(unsigned long long)arg3 context:(struct CGContext { }*)arg4;
- (id)p_noteSegmentsForSlideNode:(id)arg1 withScaledClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 firstSegmentIndex:(unsigned long long)arg3;
- (void)p_segmentSlideNodesWithUnscaledClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 viewScale:(double)arg2;
- (void)p_segmentSlidesIfNecessary;
- (id)p_segmentsForPage:(unsigned long long)arg1;
- (id)p_segmentsForSlideNode:(id)arg1 withScaledClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 firstSegmentIndex:(unsigned long long)arg3;
- (unsigned long long)pageCount;
- (void)setPrintingDivider:(bool)arg1;
- (void)setPrintingNotes:(bool)arg1;
- (void)setPrintingRuledLines:(bool)arg1;
- (void)setUnscaledClipRectForPageCount:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setViewScaleForPageCount:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unscaledClipRectForPageCount;
- (double)viewScaleForPageCount;

@end
