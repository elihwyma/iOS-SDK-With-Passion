/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSUIndexSetObj : NSObject <NSCopying> {
    struct TSUIndexSet { 
        unsigned int _isEmpty : 1; 
        unsigned int _hasSingleRange : 1; 
        struct TSUIndexRange { 
            long long _begin; 
            long long _end; 
        } _singleRange; 
        struct { /* ? */ } *_multipleRanges; 
    }  _indexSet;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addIndex:(long long)arg1;
- (void)addIndexes:(id)arg1;
- (void)addIndexesInRange:(struct TSUIndexRangeStruct { long long x1; long long x2; })arg1;
- (bool)containsIndex:(long long)arg1;
- (bool)containsIndexes:(id)arg1;
- (bool)containsIndexesInRange:(struct TSUIndexRangeStruct { long long x1; long long x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)count;
- (unsigned long long)countOfIndexesInRange:(struct TSUIndexRangeStruct { long long x1; long long x2; })arg1;
- (void)enumerateIndexesInRange:(struct TSUIndexRangeStruct { long long x1; long long x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateIndexesUsingBlock:(id /* block */)arg1;
- (void)enumerateRangesUsingBlock:(id /* block */)arg1;
- (long long)firstIndex;
- (unsigned long long)hash;
- (long long)indexGreaterThanIndex:(long long)arg1;
- (long long)indexGreaterThanOrEqualToIndex:(long long)arg1;
- (long long)indexLessThanIndex:(long long)arg1;
- (long long)indexLessThanOrEqualToIndex:(long long)arg1;
- (struct TSUIndexSet { unsigned int x1 : 1; unsigned int x2 : 1; struct TSUIndexRange { long long x_3_1_1; long long x_3_1_2; } x3; struct { /* ? */ } *x4; }*)indexSet;
- (id)init;
- (id)initWithIndexSet:(id)arg1;
- (id)initWithIndexSetCpp:(const struct TSUIndexSet { unsigned int x1 : 1; unsigned int x2 : 1; struct TSUIndexRange { long long x_3_1_1; long long x_3_1_2; } x3; struct { /* ? */ } *x4; }*)arg1;
- (id)initWithNSIndexSet:(id)arg1;
- (bool)intersectsIndexesInRange:(struct TSUIndexRangeStruct { long long x1; long long x2; })arg1;
- (bool)isEqual:(id)arg1;
- (long long)lastIndex;
- (long long)nthIndex:(unsigned long long)arg1;
- (void)removeAllIndexes;
- (void)removeIndex:(long long)arg1;
- (void)removeIndexes:(id)arg1;
- (void)removeIndexesInRange:(struct TSUIndexRangeStruct { long long x1; long long x2; })arg1;

@end
