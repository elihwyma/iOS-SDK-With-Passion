/*
 Image: /System/Library/PrivateFrameworks/DuetActivityScheduler.framework/DuetActivityScheduler
 */

#import <Foundation/NSObject.h>

@class NSArray, NSDate, NSDictionary, NSMutableDictionary, NSString, NSUUID, _DASAssertion, _DASFileProtection;

@protocol OS_dispatch_queue;

@interface _DASActivity : NSObject

{
    _Bool _cancelAfterDeadline;
    _Bool _requiresNetwork;
    _Bool _isUpload;
    _Bool _requiresInexpensiveNetworking;
    _Bool _requiresUnconstrainedNetworking;
    _Bool _cpuIntensive;
    _Bool _memoryIntensive;
    _Bool _diskIntensive;
    _Bool _requiresDeviceInactivity;
    _Bool _requiresPlugin;
    _Bool _afterUserIsInactive;
    _Bool _beforeUserIsActive;
    _Bool _triggersRestart;
    _Bool _supportsAnyApplication;
    _Bool _requestsApplicationLaunch;
    _Bool _requestsExtensionLaunch;
    _Bool _delayedStart;
    _Bool _darkWakeEligible;
    _Bool _beforeDaysFirstActivity;
    _Bool _shouldBePersisted;
    _Bool _isMLBackgroundActivity;
    _Bool _deferred;
    _Bool _suspendable;
    _Bool _suspendRequested;
    _Bool _bypassesPredictions;
    _Bool _wasForceRun;
    _Bool _budgeted;
    _Bool _requiresBuddyComplete;
    int _pid;
    unsigned int _userIdentifier;
    NSString *_name;
    NSObject<OS_dispatch_queue> *_handlerQueue;
    CDUnknownBlockType _startHandler;
    CDUnknownBlockType _suspendHandler;
    _DASFileProtection *_fileProtection;
    unsigned long long _schedulingPriority;
    NSDate *_startAfter;
    NSDate *_startBefore;
    unsigned long long _duration;
    unsigned long long _uploadSize;
    unsigned long long _downloadSize;
    long long _targetDevice;
    NSArray *_relatedApplications;
    long long _relevancy;
    NSArray *_schedulerRecommendedApplications;
    long long _motionState;
    NSDictionary *_userInfo;
    NSString *_bundleId;
    double _interval;
    NSString *_groupName;
    NSString *_launchReason;
    NSString *_extensionIdentifier;
    double _predictedOptimalScore;
    NSDate *_predictedOptimalStartDate;
    double _lastComputedScore;
    NSDate *_lastScored;
    NSDate *_submitDate;
    NSDate *_startDate;
    double _percentCompleted;
    NSMutableDictionary *_policyScores;
    NSMutableDictionary *_policyReasons;
    unsigned long long _lastDenialValue;
    NSString *_clientName;
    long long _completionStatus;
    CDUnknownBlockType _completionHandler;
    NSString *_clientDataBudgetName;
    unsigned long long _budgetingToken;
    _DASAssertion *_assertion;
    long long _preClearedMode;
    NSUUID *_uuid;
}

@property (nonatomic) _Bool darkWakeEligible;
@property (nonatomic) _Bool beforeDaysFirstActivity;
@property (nonatomic) _Bool beforeApplicationLaunch;
@property (nonatomic) double interval;
@property (copy, nonatomic) NSString *groupName;
@property (retain, nonatomic) NSArray *schedulerRecommendedApplications;
@property (copy, nonatomic) NSString *launchReason;
@property (copy, nonatomic) NSString *extensionIdentifier;
@property (nonatomic) _Bool supportsAnyApplication;
@property (nonatomic) _Bool requestsApplicationLaunch;
@property (nonatomic) _Bool requestsExtensionLaunch;
@property (nonatomic) _Bool shouldBePersisted;
@property (nonatomic) _Bool requestsNewsstandLaunch;
@property (nonatomic) _Bool requiresSignificantUserInactivity;
@property (nonatomic) _Bool hasMagneticSensitivity;
@property (nonatomic) _Bool allowsCompanionExpensiveNetworking;
@property (nonatomic) _Bool isMLBackgroundActivity;
@property (nonatomic) _Bool deferred;
@property (nonatomic) _Bool userRequestedBackupTask;
@property (nonatomic) double predictedOptimalScore;
@property (retain) NSDate *predictedOptimalStartDate;
@property (nonatomic) double lastComputedScore;
@property (retain) NSDate *lastScored;
@property (retain, nonatomic) NSDate *submitDate;
@property (retain) NSDate *startDate;
@property (nonatomic) _Bool suspendable;
@property (nonatomic) _Bool suspendRequested;
@property (nonatomic) _Bool bypassesPredictions;
@property (nonatomic) double percentCompleted;
@property (retain) NSMutableDictionary *policyScores;
@property (retain) NSMutableDictionary *policyReasons;
@property unsigned long long lastDenialValue;
@property (nonatomic) _Bool wasForceRun;
@property (nonatomic) int pid;
@property (retain, nonatomic) NSString *clientName;
@property (nonatomic) long long completionStatus;
@property (retain, nonatomic) NSString *clientProvidedIdentifier;
@property (retain, nonatomic) NSDate *clientProvidedStartDate;
@property (copy, nonatomic) CDUnknownBlockType completionHandler;
@property (nonatomic) _Bool budgeted;
@property (retain, nonatomic) NSString *clientDataBudgetName;
@property (nonatomic) unsigned long long budgetingToken;
@property (retain, nonatomic) _DASAssertion *assertion;
@property (nonatomic) long long preClearedMode;
@property (nonatomic) _Bool requiresBuddyComplete;
@property (nonatomic) unsigned int userIdentifier;
@property (retain, nonatomic) NSUUID *uuid;
@property (copy, nonatomic) NSString *name;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *handlerQueue;
@property (copy, nonatomic) CDUnknownBlockType startHandler;
@property (copy, nonatomic) CDUnknownBlockType suspendHandler;
@property (copy, nonatomic) _DASFileProtection *fileProtection;
@property (nonatomic) unsigned long long schedulingPriority;
@property (retain) NSDate *startAfter;
@property (retain) NSDate *startBefore;
@property (nonatomic) _Bool cancelAfterDeadline;
@property (nonatomic) unsigned long long duration;
@property (nonatomic) _Bool requiresNetwork;
@property (nonatomic) unsigned long long transferSize;
@property (nonatomic) unsigned long long uploadSize;
@property (nonatomic) unsigned long long downloadSize;
@property (nonatomic) _Bool isUpload;
@property (nonatomic) _Bool requiresInexpensiveNetworking;
@property (nonatomic) _Bool requiresUnconstrainedNetworking;
@property (nonatomic) _Bool cpuIntensive;
@property (nonatomic) _Bool memoryIntensive;
@property (nonatomic) _Bool diskIntensive;
@property (nonatomic) _Bool requiresDeviceInactivity;
@property (nonatomic) _Bool requiresPlugin;
@property (nonatomic) _Bool afterUserIsInactive;
@property (nonatomic) _Bool beforeUserIsActive;
@property (nonatomic) _Bool triggersRestart;
@property (nonatomic) long long targetDevice;
@property (retain, nonatomic) NSArray *relatedApplications;
@property (nonatomic) long long relevancy;
@property (nonatomic) long long motionState;
@property (retain, nonatomic) NSDictionary *userInfo;
@property (retain, nonatomic) NSString *bundleId;
@property (nonatomic) _Bool delayedStart;

+ (_Bool)supportsSecureCoding;
+ (id)extensionLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forApplication:(id)arg3 withReason:(id)arg4 duration:(unsigned long long)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)activityWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5;
+ (id)sharedDateFormatter;
+ (unsigned long long)cleanSchedulingPriority:(unsigned long long)arg1;
+ (unsigned long long)cleanDuration:(unsigned long long)arg1;
+ (id)extensionLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forApplication:(id)arg3 forExtensionIdentifier:(id)arg4 withReason:(id)arg5 duration:(unsigned long long)arg6 startingAfter:(id)arg7 startingBefore:(id)arg8;
+ (id)applicationLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forApplication:(id)arg3 withReason:(id)arg4 duration:(unsigned long long)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)launchWithTopic:(id)arg1 forReason:(id)arg2 withPayload:(id)arg3 highPriority:(_Bool)arg4;
+ (unsigned long long)cleanTransferSize:(unsigned long long)arg1;
+ (id)validClassesForUserInfoSerialization;
+ (id)prettySchedulingPriorityDescription:(unsigned long long)arg1;
+ (id)networkingActivityWithName:(id)arg1 priority:(unsigned long long)arg2 transferSize:(unsigned long long)arg3 isUpload:(_Bool)arg4 expensiveNetworkingAllowed:(_Bool)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)networkingActivityWithName:(id)arg1 priority:(unsigned long long)arg2 downloadSize:(unsigned long long)arg3 uploadSize:(unsigned long long)arg4 expensiveNetworkingAllowed:(_Bool)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)anyApplicationActivityWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5 limitedToApplications:(id)arg6;
+ (id)extensionLaunchActivityWithName:(id)arg1 priority:(unsigned long long)arg2 forExtensionIdentifier:(id)arg3 withReason:(id)arg4 duration:(unsigned long long)arg5 startingAfter:(id)arg6 startingBefore:(id)arg7;
+ (id)launchForRemoteNotificationWithTopic:(id)arg1 withPayload:(id)arg2 highPriority:(_Bool)arg3;
+ (id)validateBGTaskRequestWithActivity:(id)arg1;

- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)shortDescription;
- (void)updateGroupIfNecessary;
- (id)initWithName:(id)arg1 priority:(unsigned long long)arg2 duration:(unsigned long long)arg3 startingAfter:(id)arg4 startingBefore:(id)arg5;
- (void)setObject:(id)arg1 forUserInfoKey:(id)arg2;
- (_Bool)isIntensive;
- (id)nameString;
- (_Bool)isSilentPush;
- (void)setConstraintsWithXPCDictionary:(id)arg1;
- (double)compatibilityWith:(id)arg1;
- (_Bool)hasManyConstraints;
- (_Bool)timewiseEligibleAtDate:(id)arg1;
- (_Bool)overdueAtDate:(id)arg1;
- (_Bool)significantlyOverdueAtDate:(id)arg1;
- (_Bool)isIdenticalLaunchTo:(id)arg1;
- (_Bool)keepsPrevious;
- (_Bool)overwritesPrevious;
- (_Bool)isBackgroundTaskActivity;
- (_Bool)shouldReplaceActivity:(id)arg1 andKeepsSubmitted:(_Bool *)arg2;
- (void)reconcileWithActivity:(id)arg1;

@end
