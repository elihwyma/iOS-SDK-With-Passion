/*
 Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading
 */

#import <Foundation/NSObject.h>

#import <TSReading/Swift-Protocol.h>

@interface TSDBezierPath : NSObject <Swift>

{
    long long sfr_elementCount;
    long long sfr_elementMax;
    struct PATHSEGMENT *sfr_head;
    double *sfr_elementLength;
    double sfr_totalLength;
    long long sfr_lastSubpathIndex;
    void *sfr_extraSegments;
    double sfr_lineWidth;
    struct CGRect sfr_controlPointBounds;
    double sfr_miterLimit;
    double sfr_flatness;
    double *sfr_dashedLinePattern;
    unsigned long long sfr_dashedLineCount;
    double sfr_dashedLinePhase;
    void *sfr_path;
    long long sfr_extraSegmentCount;
    long long sfr_extraSegmentMax;
    struct {
        unsigned int sfr_flags:8;
        unsigned int sfr_pathState:2;
        unsigned int sfr_calculatedLengths:1;
        unsigned int sfr_unused:21;
    } sfr_bpFlags;
}

@property (nonatomic, readonly) _Bool isCompound;
@property (nonatomic, readonly) _Bool isSelfIntersecting;
@property (nonatomic, readonly) _Bool isOpen;
@property (nonatomic, readonly) _Bool isLineSegment;
@property (nonatomic, readonly) _Bool isEffectivelyClosed;
@property (nonatomic, readonly) _Bool containsClosePathElement;

+ (void)initialize;
+ (_Bool)supportsSecureCoding;
+ (void)setLineWidth:(double)arg1;
+ (double)lineWidth;
+ (id)bezierPathWithRoundedRect:(struct CGRect)arg1 cornerRadius:(double)arg2;
+ (id)bezierPathWithRect:(struct CGRect)arg1;
+ (id)bezierPathWithOvalInRect:(struct CGRect)arg1;
+ (id)bezierPathWithCGPath:(struct CGPath *)arg1;
+ (id)bezierPath;
+ (void)fillRect:(struct CGRect)arg1;
+ (void)strokeRect:(struct CGRect)arg1;
+ (unsigned long long)lineCapStyle;
+ (void)setLineCapStyle:(unsigned long long)arg1;
+ (unsigned long long)lineJoinStyle;
+ (void)setLineJoinStyle:(unsigned long long)arg1;
+ (double)miterLimit;
+ (void)setMiterLimit:(double)arg1;
+ (double)flatness;
+ (void)setFlatness:(double)arg1;
+ (unsigned long long)windingRule;
+ (void)setWindingRule:(unsigned long long)arg1;
+ (id)bezierPathWithStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2;
+ (void)clipRect:(struct CGRect)arg1;
+ (void)strokeLineFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
+ (void)setDefaultMiterLimit:(double)arg1;
+ (double)defaultMiterLimit;
+ (void)setDefaultFlatness:(double)arg1;
+ (double)defaultFlatness;
+ (void)setDefaultWindingRule:(unsigned long long)arg1;
+ (unsigned long long)defaultWindingRule;
+ (void)setDefaultLineCapStyle:(unsigned long long)arg1;
+ (unsigned long long)defaultLineCapStyle;
+ (void)setDefaultLineJoinStyle:(unsigned long long)arg1;
+ (unsigned long long)defaultLineJoinStyle;
+ (void)setDefaultLineWidth:(double)arg1;
+ (double)defaultLineWidth;
+ (id)outlineBezierPath:(id)arg1 withThreshold:(double)arg2;
+ (id)uniteBezierPaths:(id)arg1;
+ (id)exteriorOfBezierPath:(id)arg1;
+ (id)outsideEdgeOfBezierPath:(id)arg1;
+ (id)tracedPathForImage:(struct CGImage *)arg1 alphaThreshold:(double)arg2 pointSpacing:(double)arg3;
+ (id)outlineBezierPath:(id)arg1;
+ (id)subtractBezierPaths:(id)arg1;
+ (id)intersectBezierPaths:(id)arg1;
+ (id)bezierPathWithConvexHullOfPoints:(struct CGPoint *)arg1 count:(unsigned long long)arg2;
+ (id)p_booleanWithBezierPaths:(id)arg1 operation:(int)arg2;
+ (struct Path *)p_bezierToPath:(id)arg1;
+ (id)p_pathToBezier:(struct Path *)arg1;
+ (id)excludeBezierPaths:(id)arg1;
+ (id)appendBezierPaths:(id)arg1;
+ (id)smoothBezierPath:(id)arg1 withThreshold:(double)arg2;
+ (struct CGRect)p_pathToBounds:(struct Path *)arg1;
+ (id)tracedPathForInstantAlphaBinaryBitmap:(id)arg1 pointSpacing:(double)arg2;

- (id)init;
- (void)dealloc;
- (double)length;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEmpty;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (const char *)cString;
- (id)initWithCString:(const char *)arg1;
- (struct CGRect)bounds;
- (unsigned long long)elementAtIndex:(long long)arg1;
- (void)setLineWidth:(double)arg1;
- (double)lineWidth;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (struct CGPath *)CGPath;
- (void)stroke;
- (void)fill;
- (void)moveToPoint:(struct CGPoint)arg1;
- (void)closePath;
- (void)setLineDash:(const double *)arg1 count:(long long)arg2 phase:(double)arg3;
- (void)appendBezierPathWithRect:(struct CGRect)arg1;
- (void)appendBezierPath:(id)arg1;
- (void)lineToPoint:(struct CGPoint)arg1;
- (void)addClip;
- (void)removeAllPoints;
- (id)bezierPathByReversingPath;
- (struct CGPoint)currentPoint;
- (void)getLineDash:(double *)arg1 count:(long long *)arg2 phase:(double *)arg3;
- (void)appendBezierPathWithOvalInRect:(struct CGRect)arg1;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;
- (unsigned long long)lineCapStyle;
- (void)setLineCapStyle:(unsigned long long)arg1;
- (unsigned long long)lineJoinStyle;
- (void)setLineJoinStyle:(unsigned long long)arg1;
- (double)miterLimit;
- (void)setMiterLimit:(double)arg1;
- (double)flatness;
- (void)setFlatness:(double)arg1;
- (long long)elementCount;
- (id)pressure;
- (_Bool)isCircular;
- (unsigned long long)windingRule;
- (void)setWindingRule:(unsigned long long)arg1;
- (_Bool)isRectangular;
- (void)_deviceMoveToPoint:(struct CGPoint)arg1;
- (void)_deviceLineToPoint:(struct CGPoint)arg1;
- (void)_deviceCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;
- (void)_deviceClosePath;
- (void)subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint)arg2 controlPoint1:(struct CGPoint)arg3 controlPoint2:(struct CGPoint)arg4 endPoint:(struct CGPoint)arg5;
- (void)flattenIntoPath:(id)arg1;
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;
- (void)_doPath;
- (struct CGRect)controlPointBounds;
- (unsigned long long)elementAtIndex:(long long)arg1 associatedPoints:(struct CGPoint *)arg2;
- (unsigned long long)elementAtIndex:(long long)arg1 allPoints:(struct CGPoint *)arg2;
- (double)calculateLengthOfElement:(long long)arg1;
- (void)calculateLengths;
- (void)_appendToPath:(id)arg1;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4;
- (void)transformUsingAffineTransform:(struct CGAffineTransform)arg1;
- (void)_appendArcSegmentWithCenter:(struct CGPoint)arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;
- (void)relativeMoveToPoint:(struct CGPoint)arg1;
- (void)relativeLineToPoint:(struct CGPoint)arg1;
- (void)relativeCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;
- (id)bezierPathByFlatteningPath;
- (id)_copyFlattenedPath;
- (_Bool)isFlat;
- (_Bool)isClockwise;
- (double)lengthOfElement:(long long)arg1;
- (double)lengthToElement:(long long)arg1;
- (void)setAssociatedPoints:(struct CGPoint *)arg1 atIndex:(long long)arg2;
- (void)appendBezierPathWithPoints:(struct CGPoint *)arg1 count:(long long)arg2;
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 radius:(double)arg3;
- (void)_addPathSegment:(long long)arg1 point:(struct CGPoint)arg2;
- (void)getStartPoint:(struct CGPoint *)arg1 andEndPoint:(struct CGPoint *)arg2;
- (void)addIntersectionsWithPath:(id)arg1 to:(id)arg2 allIntersections:(_Bool)arg3 reversed:(_Bool)arg4;
- (void)appendBezierPath:(id)arg1 fromSegment:(long long)arg2 t:(double)arg3 toSegment:(long long)arg4 t:(double)arg5 withoutMove:(_Bool)arg6;
- (void)recursiveSubdivideOntoPath:(id)arg1 withScaling:(CDStruct_c3b9c2ee)arg2 inElementRange:(struct _NSRange)arg3 into:(id)arg4;
- (struct CGPoint)rawGradientAt:(float)arg1 fromElement:(long long)arg2;
- (long long)elementPercentage:(float *)arg1 forOverallPercentage:(float)arg2;
- (struct CGPoint)gradientAt:(double)arg1 fromElement:(long long)arg2;
- (struct CGPoint)pointAt:(double)arg1 fromElement:(long long)arg2;
- (float)elementPercentageFromElement:(int)arg1 forOverallPercentage:(float)arg2;
- (double)curvatureAt:(double)arg1 fromElement:(int)arg2;
- (struct CGPoint)transformedTotalCoordinate:(struct CGPoint)arg1 betweenElement:(long long)arg2 andElement:(long long)arg3 withPressure:(id)arg4 getElement:(long long *)arg5 getPercentage:(float *)arg6;
- (struct CGPoint)myGradientAt:(float)arg1 fromElement:(long long)arg2;
- (void)addIntersectionsWithPath:(id)arg1 to:(id)arg2;
- (void)addIntersectionsWithLine:(struct CGPoint [2])arg1 to:(id)arg2;
- (void)appendBezierPath:(id)arg1 fromSegment:(long long)arg2 toSegment:(long long)arg3;
- (id)copyFromSegment:(int)arg1 t:(float)arg2 toSegment:(int)arg3 t:(float)arg4;
- (struct CGPoint)nearestPointOnPathToLine:(struct CGPoint [2])arg1;
- (struct CGPoint)nearestAngleOnPathToLine:(struct CGPoint [2])arg1;
- (struct CGPoint)gradientAt:(float)arg1;
- (struct CGPoint)transformedCoordinate:(struct CGPoint)arg1 withPressure:(id)arg2;
- (struct CGPoint)transformedTotalCoordinate:(struct CGPoint)arg1 inElement:(long long)arg2 withPressure:(id)arg3;
- (struct CGPoint)myGradientAt:(float)arg1;
- (float)curvatureAt:(float)arg1;
- (void)recursiveSubdivideOntoPath:(id)arg1 into:(id)arg2;
- (void)recursiveSubdivideOntoPath:(id)arg1 withScaling:(CDStruct_c3b9c2ee)arg2 into:(id)arg3;
- (id)chisel;
- (id)uniteWithBezierPath:(id)arg1;
- (id)bezierPathByOffsettingPath:(double)arg1 joinStyle:(unsigned long long)arg2 withThreshold:(double)arg3;
- (_Bool)intersectsRect:(struct CGRect)arg1 hasFill:(_Bool)arg2;
- (struct CGRect)boundsIncludingTSDStroke:(id)arg1;
- (struct CGRect)boundsIncludingStroke;
- (id)outlineStroke;
- (id)aliasedPathWithViewScale:(float)arg1 effectiveStrokeWidth:(float)arg2;
- (double)distanceToPoint:(struct CGPoint)arg1 elementIndex:(unsigned long long *)arg2 tValue:(double *)arg3 threshold:(double)arg4;
- (void)takeAttributesFromStroke:(id)arg1;
- (id)aliasedPathInContext:(struct CGContext *)arg1 effectiveStrokeWidth:(float)arg2;
- (id)intersectBezierPath:(id)arg1;
- (id)bezierPathByRemovingRedundantElements;
- (_Bool)isTriangular;
- (_Bool)isDiamond;
- (double)yValueFromXValue:(double)arg1 elementIndex:(long long *)arg2 parametricValue:(double *)arg3;
- (struct CGRect)boundsIncludingStrokeWidth:(double)arg1 joinStyle:(unsigned long long)arg2 capStyle:(unsigned long long)arg3 miterLimit:(double)arg4 needsToExtendJoins:(_Bool)arg5;
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect)arg1 startAngle:(double)arg2 swingAngle:(double)arg3 angleType:(int)arg4 startNewPath:(_Bool)arg5;
- (id)subtractBezierPath:(id)arg1;
- (void)addPathToContext:(struct CGContext *)arg1;
- (id)p_aliasedPathInContext:(struct CGContext *)arg1 viewScale:(float)arg2 effectiveStrokeWidth:(float)arg3;
- (id)pathBySplittingAtPointOnPath:(struct CGPoint)arg1;
- (double)yValueFromXValue:(double)arg1;
- (void)alignBoundsToOrigin;
- (struct CGRect)_addMitersFromSegments:(id)arg1 toRect:(struct CGRect)arg2;
- (_Bool)pointOnPath:(struct CGPoint)arg1 tolerance:(double)arg2;
- (struct CGPoint)pointAlongPathAtPercentage:(double)arg1;
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect)arg1 startRadialVector:(struct CGPoint)arg2 endRadialVector:(struct CGPoint)arg3 angleSign:(int)arg4 startNewPath:(_Bool)arg5;
- (id)p_pathAsSegments;
- (id)p_beziersFromSegmentIntersections:(id)arg1;
- (void)clearStroke:(struct CGContext *)arg1;
- (id)pathByWobblingByUpTo:(double)arg1 subdivisions:(unsigned long long)arg2;
- (struct CGPoint)roundPoint:(struct CGPoint)arg1 inContext:(struct CGContext *)arg2 strokeWidth:(int)arg3;
- (id)bezierPathByFittingCurve:(id)arg1;
- (id)bezierPathByFittingCurve;

@end
