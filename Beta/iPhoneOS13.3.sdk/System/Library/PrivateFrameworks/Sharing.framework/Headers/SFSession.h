/*
 Image: /System/Library/PrivateFrameworks/Sharing.framework/Sharing
 */

#import <Foundation/NSObject.h>

@class CUAppleIDClient, CUMessageSession, CUMessageSessionServer, NSDictionary, NSMutableData, NSMutableDictionary, NSString, NSUUID, NSXPCConnection, NSXPCListenerEndpoint, SDStatusMonitor, SFAppleIDContactInfo, SFDevice, SFTRSession, TRSession;

@protocol OS_dispatch_queue, OS_dispatch_source, OS_os_transaction;

@interface SFSession : NSObject

{
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    struct CryptoAEADPrivate *_encryptionReadAEAD;
    unsigned char _encryptionReadNonce[12];
    struct CryptoAEADPrivate *_encryptionWriteAEAD;
    unsigned char _encryptionWriteNonce[12];
    NSString *_fixedPIN;
    NSMutableData *_fragmentData;
    unsigned short _fragmentLastIndex;
    unsigned long long _heartbeatLastTicks;
    NSObject<OS_dispatch_source> *_heartbeatTimer;
    NSUUID *_peer;
    NSString *_peerAppleID;
    struct NSMutableDictionary *_requestHandlers;
    struct NSMutableDictionary *_requestMap;
    unsigned char _serviceType;
    unsigned int _sessionFlags;
    unsigned int _sessionID;
    unsigned int _sharingSourceVersion;
    NSObject<OS_os_transaction> *_transaction;
    struct LogCategory *_ucatCore;
    struct LogCategory *_ucatCrypto;
    _Bool _activateCalled;
    _Bool _activateInProgress;
    _Bool _activateCompleted;
    CDUnknownBlockType _activateCompletion;
    SFAppleIDContactInfo *_appleIDContactInfo;
    _Bool _appleIDContactCompleted;
    _Bool _invalidateCalled;
    _Bool _invalidateDone;
    unsigned int _heartbeatID;
    _Bool _heartbeatV2;
    _Bool _heartbeatWaiting;
    CUMessageSessionServer *_messageSessionServer;
    CUMessageSession *_messageSessionTemplate;
    CDUnknownBlockType _pairSetupCompletion;
    _Bool _pairSetupEnded;
    unsigned int _pairSetupFlags;
    struct PairingSessionPrivate *_pairSetupSession;
    unsigned int _pairSetupXID;
    CDUnknownBlockType _pairVerifyCompletion;
    _Bool _pairVerifyEnded;
    unsigned int _pairVerifyFlags;
    struct PairingSessionPrivate *_pairVerifySession;
    struct NSMutableDictionary *_requestQueue;
    _Bool _timeoutFired;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    NSXPCConnection *_xpcCnx;
    SFTRSession *_sfTRSession;
    TRSession *_trSession;
    _Bool _touchRemoteEnabled;
    long long _bluetoothState;
    CDUnknownBlockType _errorHandler;
    NSUUID *_identifier;
    NSString *_label;
    SFDevice *_peerDevice;
    NSString *_serviceIdentifier;
    double _timeout;
    NSString *_myAppleID;
    CUAppleIDClient *_myAppleIDInfoClient;
    NSString *_peerContactIdentifier;
    SDStatusMonitor *_statusMonitor;
    CDUnknownBlockType _bluetoothStateChangedHandler;
    CDUnknownBlockType _interruptionHandler;
    CDUnknownBlockType _invalidationHandler;
    NSDictionary *_pairSetupACL;
    NSDictionary *_pairVerifyACL;
    CDUnknownBlockType _promptForPINHandler;
    CDUnknownBlockType _receivedObjectHandler;
    CDUnknownBlockType _receivedRequestHandler;
    CDUnknownBlockType _sessionStartedHandler;
    CDUnknownBlockType _timeoutHandler;
    CDUnknownBlockType _eventMessageHandler;
    CDUnknownBlockType _requestMessageHandler;
    CDUnknownBlockType _receivedFrameHandler;
    CDUnknownBlockType _responseMessageInternalHandler;
    CDUnknownBlockType _sendFrameHandler;
    NSUUID *_serviceUUID;
    NSXPCListenerEndpoint *_testListenerEndpoint;
}

@property (copy, nonatomic) NSUUID *identifier;
@property (nonatomic) unsigned long long heartbeatLastTicks;
@property (copy, nonatomic) NSUUID *peer;
@property (copy, nonatomic) CDUnknownBlockType receivedFrameHandler;
@property (copy, nonatomic, readonly) NSMutableDictionary *requestHandlers;
@property (copy, nonatomic) CDUnknownBlockType responseMessageInternalHandler;
@property (copy, nonatomic) CDUnknownBlockType sendFrameHandler;
@property (nonatomic) unsigned char serviceType;
@property (copy, nonatomic) NSUUID *serviceUUID;
@property (nonatomic) unsigned int sessionID;
@property (nonatomic) unsigned int sharingSourceVersion;
@property (retain, nonatomic) NSXPCListenerEndpoint *testListenerEndpoint;
@property (nonatomic) _Bool touchRemoteEnabled;
@property (retain, nonatomic) TRSession *trSession;
@property (nonatomic) long long bluetoothState;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) CDUnknownBlockType errorHandler;
@property (copy, nonatomic) NSString *fixedPIN;
@property (retain, nonatomic) NSString *label;
@property (nonatomic, readonly) CUMessageSession *messageSessionTemplate;
@property (retain, nonatomic) SFDevice *peerDevice;
@property (copy, nonatomic) NSString *serviceIdentifier;
@property (nonatomic) unsigned int sessionFlags;
@property (nonatomic) double timeout;
@property (copy, nonatomic) NSString *myAppleID;
@property (retain, nonatomic) CUAppleIDClient *myAppleIDInfoClient;
@property (copy, nonatomic) NSString *peerAppleID;
@property (copy, nonatomic) NSString *peerContactIdentifier;
@property (retain, nonatomic) SDStatusMonitor *statusMonitor;
@property (copy, nonatomic) CDUnknownBlockType bluetoothStateChangedHandler;
@property (copy, nonatomic) CDUnknownBlockType interruptionHandler;
@property (copy, nonatomic) CDUnknownBlockType invalidationHandler;
@property (copy, nonatomic) NSDictionary *pairSetupACL;
@property (copy, nonatomic) NSDictionary *pairVerifyACL;
@property (copy, nonatomic) CDUnknownBlockType promptForPINHandler;
@property (copy, nonatomic) CDUnknownBlockType receivedObjectHandler;
@property (copy, nonatomic) CDUnknownBlockType receivedRequestHandler;
@property (copy, nonatomic) CDUnknownBlockType sessionStartedHandler;
@property (copy, nonatomic) CDUnknownBlockType timeoutHandler;
@property (copy, nonatomic) CDUnknownBlockType eventMessageHandler;
@property (copy, nonatomic) CDUnknownBlockType requestMessageHandler;

+ (_Bool)supportsSecureCoding;

- (id)init;
- (void)dealloc;
- (id)description;
- (void)invalidate;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)activateWithCompletion:(CDUnknownBlockType)arg1;
- (void)registerRequestID:(id)arg1 options:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)_cleanup;
- (void)_invalidated;
- (void)_interrupted;
- (void)_activated;
- (void)sendResponse:(id)arg1;
- (void)sendEvent:(id)arg1;
- (void)_activateWithCompletion:(CDUnknownBlockType)arg1;
- (void)_ensureXPCStarted;
- (void)_registerRequestID:(id)arg1 options:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)sendRequestID:(id)arg1 options:(id)arg2 request:(id)arg3 responseHandler:(CDUnknownBlockType)arg4;
- (void)_sendRequestID:(id)arg1 options:(id)arg2 request:(id)arg3 responseHandler:(CDUnknownBlockType)arg4;
- (void)pairSetupWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_pairSetupWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)pairSetupTryPIN:(id)arg1;
- (void)_pairSetupTryPIN:(id)arg1;
- (void)pairVerifyWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_pairVerifyWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)sendRequestWithFlags:(unsigned int)arg1 object:(id)arg2 responseHandler:(CDUnknownBlockType)arg3;
- (void)sendWithFlags:(unsigned int)arg1 object:(id)arg2;
- (void)sessionBluetoothStateChanged:(long long)arg1;
- (void)sessionError:(id)arg1;
- (void)sessionReceivedEvent:(id)arg1;
- (void)sessionReceivedFrameType:(unsigned char)arg1 data:(id)arg2;
- (void)sessionReceivedRequest:(id)arg1;
- (void)sessionReceivedResponse:(id)arg1;
- (void)_startTimeoutIfNeeded;
- (void)_timeoutTimerFired;
- (void)deregisterRequestID:(id)arg1;
- (id)pairingDeriveKeyForIdentifier:(id)arg1 keyLength:(unsigned long long)arg2;
- (void)_hearbeatTimer;
- (void)sendRequest:(id)arg1;
- (int)setEncryptionReadKey:(const char *)arg1 readKeyLen:(unsigned long long)arg2 writeKey:(const char *)arg3 writeKeyLen:(unsigned long long)arg4;
- (void)_setupMessageSession;
- (void)_setupTouchRemote;
- (void)_tearDownMessageSession;
- (void)_tearDownTouchRemote;
- (_Bool)_sessionReceivedRegisteredRequestID:(id)arg1 flags:(unsigned int)arg2 xidKey:(id)arg3 xidValue:(id)arg4;
- (_Bool)_sessionReceivedEvent:(id)arg1 flags:(unsigned int)arg2;
- (_Bool)_sessionReceivedRequest:(id)arg1 flags:(unsigned int)arg2 responseHandler:(CDUnknownBlockType)arg3;
- (void)_sendRequestWithFlags:(unsigned int)arg1 object:(id)arg2 responseHandler:(CDUnknownBlockType)arg3;
- (void)sessionReceivedFragmentData:(id)arg1 last:(_Bool)arg2;
- (void)_pairSetupCompleted:(int)arg1;
- (void)_pairVerifyCompleted:(int)arg1;
- (void)sendFrameType:(unsigned char)arg1 data:(id)arg2;
- (_Bool)pairingContainsACL:(id)arg1;
- (void)_fetchInfo;
- (void)_activatedIfReady:(id)arg1;
- (void)_deregisterRequestID:(id)arg1;
- (void)_pairSetup:(id)arg1 start:(_Bool)arg2;
- (void)sendFrameType:(unsigned char)arg1 object:(id)arg2;
- (void)_pairVerify:(id)arg1 start:(_Bool)arg2;
- (_Bool)_appleIDAddProof:(id)arg1 error:(id *)arg2;
- (id)_appleIDVerifyProof:(id)arg1 error:(id *)arg2;
- (void)_sendFrameType:(unsigned char)arg1 object:(id)arg2;
- (void)_sendEncryptedObject:(id)arg1;
- (void)_sessionReceivedEncryptedData:(id)arg1 type:(unsigned char)arg2;
- (void)_sessionReceivedUnencryptedData:(id)arg1 type:(unsigned char)arg2;
- (void)_sessionReceivedStartAck:(id)arg1;
- (void)_sessionReceivedObject:(id)arg1 flags:(unsigned int)arg2;
- (void)_sessionReceivedResponseID:(id)arg1 object:(id)arg2 flags:(unsigned int)arg3;
- (void)_sessionReceivedRequestID:(id)arg1 object:(id)arg2 flags:(unsigned int)arg3;
- (void)appleIDAddProof:(id)arg1 dispatchQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)appleIDVerifyProof:(id)arg1 dispatchQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;

@end
