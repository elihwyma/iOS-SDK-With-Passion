/*
 Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

#import <Foundation/NSObject.h>

@class HDAssertionManager, HDContentProtectionManager, HDDatabaseJournal, HDProfile, HKObserverSet, NSConditionLock, NSDate, NSDictionary, NSHashTable, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSOperationQueue, NSString;

@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface HDDatabase : NSObject

{
    _Atomic _Bool _invalidated;
    NSObject<OS_dispatch_queue> *_serialAsynchronousQueue;
    NSObject<OS_dispatch_queue> *_hfdQueue;
    shared_ptr_88ae0538 _highFrequencyDataStore;
    NSLock *_writeLock;
    NSObject<OS_dispatch_queue> *_protectedDataQueue;
    HKObserverSet *_protectedDataObservers;
    long long _protectedDataState;
    long long _observedContentProtectionState;
    _Bool _isObservingContentProtection;
    NSMutableArray *_firstUnlockBlocks;
    _Bool _shouldNotifyFirstUnlockObservers;
    NSDate *_protectedDataFlushDeadlineDate;
    NSObject<OS_dispatch_source> *_protectedDataFlushDeadlineTimer;
    _Bool _hasFlushedProtectedData;
    NSMutableDictionary *_databaseJournalMergeObserverSetByType;
    _Bool _didRunPostMigrationUpdates;
    HDDatabaseJournal *_journal;
    HDDatabaseJournal *_cloudSyncJournal;
    HDProfile *_profile;
    NSString *_profileDirectoryPath;
    NSString *_threadLocalTransactionKey;
    NSString *_threadLocalTransactionContextKey;
    NSString *_threadLocalIgnoreTransactionContextKey;
    HDAssertionManager *_assertionManager;
    NSLock *_schemaMigrationLock;
    NSConditionLock *_activeDatabasesLock;
    NSMutableSet *_activeDatabases;
    NSHashTable *_migratedDatabases;
    NSOperationQueue *_asynchronousOperationQueue;
    NSObject<OS_dispatch_queue> *_journalQueue;
    NSObject<OS_dispatch_group> *_journalGroup;
    unsigned long long _pendingJournalMerges;
    NSObject<OS_dispatch_queue> *_secondaryJournalMergeQueue;
    NSMutableDictionary *_extendedTransactions;
    NSDictionary *_databasePoolForType;
    HDContentProtectionManager *_contentProtectionManager;
    double _offsetTimeInterval;
    double _protectedDataFlushInterval;
    CDUnknownBlockType _unitTest_didWaitForJournalMergeHandler;
}

@property (copy, nonatomic, readonly) NSString *profileDirectoryPath;
@property (copy, nonatomic, readonly) NSString *threadLocalTransactionKey;
@property (copy, nonatomic, readonly) NSString *threadLocalTransactionContextKey;
@property (copy, nonatomic, readonly) NSString *threadLocalIgnoreTransactionContextKey;
@property (readonly) _Bool invalidated;
@property (retain, nonatomic) HDAssertionManager *assertionManager;
@property (retain, nonatomic) NSLock *schemaMigrationLock;
@property (retain, nonatomic) NSConditionLock *activeDatabasesLock;
@property (retain, nonatomic) NSMutableSet *activeDatabases;
@property (retain, nonatomic) NSHashTable *migratedDatabases;
@property (retain, nonatomic) NSOperationQueue *asynchronousOperationQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *journalQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_group> *journalGroup;
@property (nonatomic) unsigned long long pendingJournalMerges;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *secondaryJournalMergeQueue;
@property (retain, nonatomic) NSMutableDictionary *extendedTransactions;
@property (retain, nonatomic) NSDictionary *databasePoolForType;
@property (nonatomic, readonly) HDContentProtectionManager *contentProtectionManager;
@property (nonatomic) double offsetTimeInterval;
@property (nonatomic) double protectedDataFlushInterval;
@property (nonatomic) _Bool didRunPostMigrationUpdates;
@property (copy, nonatomic) CDUnknownBlockType unitTest_didWaitForJournalMergeHandler;
@property (nonatomic, readonly) HDDatabaseJournal *journal;
@property (nonatomic, readonly) HDDatabaseJournal *cloudSyncJournal;
@property (weak, nonatomic) HDProfile *profile;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;
@property (nonatomic, readonly, getter=isDataProtectedByFirstUnlockAvailable) _Bool dataProtectedByFirstUnlockAvailable;
@property (nonatomic, readonly, getter=isProtectedDataAvailable) _Bool protectedDataAvailable;

+ (void)loadEntityClasses;
+ (id)allCurrentAndFutureEntityClasses;
+ (id)_databaseCorruptionDefaultKeyForDatabaseWithName:(id)arg1;
+ (void)reportDatabaseCorruptionForDatabaseWithName:(id)arg1;
+ (void)didEncounterUncorruptedDatabaseWithName:(id)arg1;
+ (void)reportIntegrityCheckFailure;
+ (void)didPassIntegrityCheck;

- (void)dealloc;
- (id).cxx_construct;
- (id)initWithProfile:(id)arg1;
- (void)contentProtectionStateChanged:(long long)arg1 previousState:(long long)arg2;
- (void)invalidateAndWait;
- (id)diagnosticDescription;
- (id)_journalDirectoryPath;
- (_Bool)performTransactionWithContext:(id)arg1 error:(id *)arg2 block:(CDUnknownBlockType)arg3 inaccessibilityHandler:(CDUnknownBlockType)arg4;
- (_Bool)addJournalEntries:(id)arg1 error:(id *)arg2;
- (void)addProtectedDataObserver:(id)arg1;
- (void)performWhenDataProtectedByFirstUnlockIsAvailable:(CDUnknownBlockType)arg1;
- (void)removeProtectedDataObserver:(id)arg1;
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)arg1 timeout:(double)arg2 error:(id *)arg3;
- (void)addProtectedDataObserver:(id)arg1 queue:(id)arg2;
- (_Bool)performWithTransactionContext:(id)arg1 error:(id *)arg2 block:(CDUnknownBlockType)arg3;
- (void)assertionManager:(id)arg1 assertionInvalidated:(id)arg2;
- (id)virtualFilesystemModuleForDatabase:(id)arg1;
- (id)databaseSizeInBytesExcludingHFD;
- (id)HFDSizeInBytes;
- (id)highFrequencyDataStoreURL;
- (_Bool)accessHighFrequencyDataStoreWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;
- (void)performAsynchronously:(CDUnknownBlockType)arg1;
- (void)obliterateWithReason:(id)arg1 preserveCopy:(_Bool)arg2;
- (void)performWhenDataProtectedByFirstUnlockIsAvailableOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)addDatabaseJournalMergeObserver:(id)arg1 journalType:(long long)arg2 queue:(id)arg3;
- (void)removeDatabaseJournalMergeObserver:(id)arg1 journalType:(long long)arg2;
- (unsigned long long)journalFileCountForType:(long long)arg1;
- (_Bool)addJournalEntry:(id)arg1 error:(id *)arg2;
- (id)progressForJournalMergeWithType:(long long)arg1;
- (_Bool)performWithJournalType:(long long)arg1 error:(id *)arg2 block:(CDUnknownBlockType)arg3;
- (long long)_migrateOrCreateSchemaWithMigrationTransaction:(id)arg1 error:(id *)arg2;
- (_Bool)_runPostMigrationUpdatesWithDatabase:(id)arg1 error:(id *)arg2;
- (long long)_createEntitiesWithMigrationTransaction:(id)arg1 error:(id *)arg2;
- (long long)_migrateWithMigrationTransaction:(id)arg1 fromUserVersion:(long long)arg2 error:(id *)arg3;
- (long long)_verifyDatabaseIdentifiersAreValidWithMigrationTransaction:(id)arg1 error:(id *)arg2;
- (void)_enableIncrementalAutovacuumIfNeededForTransaction:(id)arg1;
- (id)allEntityClassesWithProtectionClass:(long long)arg1;
- (_Bool)_createDataTablesInDatabase:(id)arg1 entityClasses:(id)arg2 requiredPrefix:(id)arg3 error:(id *)arg4;
- (long long)currentSchemaVersionForProtectionClass:(long long)arg1;
- (_Bool)_createEntitiesForSchemaProvider:(id)arg1 protectionClass:(long long)arg2 migrator:(id)arg3 error:(id *)arg4;
- (void)_presentRollbackAlertForSchema:(id)arg1 protectionClass:(long long)arg2 foundVersion:(long long)arg3 currentVersion:(long long)arg4;
- (_Bool)_migrationRequiredForProtectionClass:(long long)arg1 migrator:(id)arg2 schemaProviders:(id)arg3 error:(id *)arg4;
- (_Bool)_createEntitiesOrAddMigrationStepsForProtectionClass:(long long)arg1 schemaProviders:(id)arg2 migrator:(id)arg3 error:(id *)arg4;
- (_Bool)_applyOffsetTimeInterval:(double)arg1 database:(id)arg2 error:(id *)arg3;
- (id)allEntityClasses;
- (long long)migrateOrCreateSchemaWithMigrationTransaction:(id)arg1 error:(id *)arg2;
- (id)_cloudSyncJournalDirectoryPath;
- (void)_reportDatabaseSizes;
- (id)mainDatabaseURL;
- (long long)_fileSizeForURL:(id)arg1 error:(id *)arg2;
- (id)_URLForWALForDatabaseAtURL:(id)arg1;
- (id)protectedDatabaseURL;
- (long long)_protectedDataState;
- (void)_protectedDataQueue_mergeJournalAsynchronously;
- (_Bool)_allowProtectedDataAccessWhileLockedWithTransaction:(id)arg1;
- (_Bool)_migrateOrCreateProtectedSchemaInDatabase:(id)arg1 transaction:(id)arg2 error:(id *)arg3;
- (_Bool)_isDatabaseValidWithError:(id *)arg1;
- (id)_threadLocalTransaction;
- (id)_threadLocalTransactionContext;
- (id)_journalForType:(long long)arg1;
- (_Bool)_waitForMergesWithCurrentJournal:(id)arg1 error:(id *)arg2;
- (void)_performWhenDataProtectedByFirstUnlockIsAvailableOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (id)_createDatabaseConnectionWithURL:(id)arg1;
- (id)_createDatabaseConnection;
- (long long)_performMigrationWithUnprotectedDatabase:(id)arg1 protectedDatabase:(id)arg2 error:(id *)arg3 block:(CDUnknownBlockType)arg4;
- (void)_reportMigrationResultIfNecessaryForStatus:(long long)arg1 database:(id)arg2 protectedDatabase:(_Bool)arg3 error:(id)arg4;
- (long long)_migrateOrCreateProtectedSchemaInDatabaseIfWritable:(id)arg1 error:(id *)arg2;
- (void)_protectedDataQueue_flushProtectedDataIfNecessary;
- (id)_checkOutDatabaseForTransaction:(id)arg1 databaseType:(long long)arg2 error:(id *)arg3;
- (_Bool)_canAttachProtectedDatabaseForTransaction:(id)arg1 error:(id *)arg2;
- (id)databasePoolForDatabaseType:(long long)arg1;
- (_Bool)_attachProtectedDatabaseIfNeededToDatabase:(id)arg1 transaction:(id)arg2 error:(id *)arg3;
- (void)_checkInDatabase:(id)arg1 type:(long long)arg2 flushImmediately:(_Bool)arg3;
- (id)_newDatabaseConnectionWithError:(id *)arg1;
- (void)_protectedDataQueue_beginObservingContentProtection;
- (_Bool)_journalQueue_performJournalMergeAndCleanup;
- (void)_protectedDataQueue_cancelProtectedDataFlushTimer;
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)arg1 shouldPerformTransaction:(_Bool)arg2 timeout:(double)arg3 error:(id *)arg4;
- (shared_ptr_88ae0538)_highFrequencyDataStoreWithError:(id *)arg1;
- (_Bool)_protectedDataQueue_isProtectedDataFlushDeadlinePassed;
- (id)_currentDatabaseJournal;
- (void)_mergeSecondaryJournals;
- (id)newDatabaseForDatabasePool:(id)arg1 error:(id *)arg2;
- (void)databasePool:(id)arg1 didFlushDatabases:(id)arg2;
- (id)databaseTransaction:(id)arg1 checkOutDatabaseWithType:(long long)arg2 error:(id *)arg3;
- (void)checkInDatabase:(id)arg1 type:(long long)arg2;
- (void)databaseJournalMergeDidComplete:(id)arg1;
- (id)cloneAccessibilityAssertion:(id)arg1 ownerIdentifier:(id)arg2 error:(id *)arg3;
- (void)performAsynchronouslySerial:(CDUnknownBlockType)arg1;
- (id)beginExtendedTransactionWithContext:(id)arg1 transactionTimeout:(double)arg2 continuationTimeout:(double)arg3 error:(id *)arg4;
- (id)extendedDatabaseTransactionForIdentifier:(id)arg1;
- (void)finalizeExtendedTransactionForIdentifier:(id)arg1;
- (id)dumpSchemaAndReturnError:(id *)arg1;
- (void)beginObservingContentProtection;
- (_Bool)discardHighFrequencyDataStoreWithError:(id *)arg1;
- (void)unitTest_setContentProtectionStateAndWait:(long long)arg1;
- (id)unitTest_currentTransaction;

@end
