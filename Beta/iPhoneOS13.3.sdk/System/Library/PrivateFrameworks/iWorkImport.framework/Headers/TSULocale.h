/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSULocale : NSObject {
    NSString * _activeCurrencyCode;
    NSString * _activeNoMinusSignCurrencyCode;
    NSString * _amString;
    NSCache * _cachedLocalizedStrings;
    NSString * _currencyCode;
    NSMutableDictionary * _currencyCodeToHalfWidthSymbolMap;
    NSMutableDictionary * _currencyCodeToSymbolMap;
    NSString * _currencyDecimalSeparator;
    struct __CFNumberFormatter { } * _currencyFormatter;
    NSString * _currencyGroupingSeparator;
    NSMutableDictionary * _currencySymbolToCodeCache;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _currencySymbolToCodeLock;
    long long  _dateComponentOrdering;
    TSUDateParserLibrary * _dateParserLibrary;
    NSString * _decimalSeparator;
    NSString * _documentLanguageIdentifier;
    NSString * _falseString;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _formattersMutex;
    NSLocale * _gregorianCalendarLocale;
    NSString * _groupingSeparator;
    unsigned long long  _groupingSize;
    TSULocaleStructuredDictionary * _harmonizedNumberFormatterSymbols;
    bool  _isAutoUpdating;
    NSString * _languageCode;
    NSString * _listSeparator;
    NSLocale * _locale;
    NSString * _localeIdentifier;
    NSMutableDictionary * _localeSpecificStorage;
    NSLock * _localeSpecificStorageLock;
    NSString * _minusSign;
    NSArray * _monthSymbols;
    struct __CFNumberFormatter { } * _noMinusSignCurrencyFormatter;
    struct __CFNumberFormatter { } * _noMinusSignPlainFormatter;
    NSLock * _numberFormatterStringFromDoubleWithFormatLock;
    NSMutableArray * _numberFormatters;
    struct TSUNumberOrDateLexer { 
        NSString *_decimalSeparator; 
        NSString *_currencyDecimalSeparator; 
        NSString *_groupingSeparator; 
        NSString *_currencyGroupingSeparator; 
        NSString *_percentSymbol; 
        unsigned short _decSep; 
        unsigned short _currDecSep; 
        unsigned short _groupSep; 
        unsigned short _currGroupSep; 
        unsigned short _percentSym; 
        unsigned short _alternateDecSep; 
        unsigned short _alternateGroupSep; 
        unsigned short _alternatePercentSym; 
        bool _checkedForAlternateSeparators; 
        struct unordered_set<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { 
            struct __hash_table<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { 
                struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { 
                    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { 
                        struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} **__value_; 
                        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { 
                            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned short, void *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> { 
                        struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::hash<unsigned short> > { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::equal_to<unsigned short> > { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } _dateSeps; 
        unsigned short _timeSep; 
        struct unordered_set<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { 
            struct __hash_table<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { 
                struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { 
                    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { 
                        struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} **__value_; 
                        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { 
                            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned short, void *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> { 
                        struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::hash<unsigned short> > { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::equal_to<unsigned short> > { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } _additionalIdentChars; 
        struct unordered_set<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { 
            struct __hash_table<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { 
                struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { 
                    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { 
                        struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} **__value_; 
                        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { 
                            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned short, void *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> { 
                        struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::hash<unsigned short> > { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::equal_to<unsigned short> > { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } _identStartChars; 
        struct unordered_map<NSString *, unsigned long long, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned long long> > > { 
            struct __hash_table<std::__1::__hash_value_type<NSString *, unsigned long long>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long long>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long long>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned long long> > > { 
                struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> *> > > { 
                    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> *> > > { 
                        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> {} **__value_; 
                        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> *> > { 
                            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> *> > { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> { 
                        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned long long>, void *> *> {} *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned long long>, std::__1::hash<NSString *>, true> > { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned long long>, std::__1::equal_to<NSString *>, true> > { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } _identifierToClassificationMap; 
        struct unordered_map<unsigned short, TSUNumerAndDenom, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUNumerAndDenom> > > { 
            struct __hash_table<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom> > > { 
                struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> *> > > { 
                    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> *> > > { 
                        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> {} **__value_; 
                        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> *> > { 
                            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> *> > { 
                                unsigned long long __value_; 
                            } __data_; 
                        } __value_; 
                    } __ptr_; 
                } __bucket_list_; 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> { 
                        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, void *> *> {} *__next_; 
                    } __value_; 
                } __p1_; 
                struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, std::__1::hash<unsigned short>, true> > { 
                    unsigned long long __value_; 
                } __p2_; 
                struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSUNumerAndDenom>, std::__1::equal_to<unsigned short>, true> > { 
                    float __value_; 
                } __p3_; 
            } __table_; 
        } _vulgarFractionMap; 
        bool _loadInDateTimeSymbols; 
        NSString *_localeIdentifier; 
    }  _numberOrDateLexer;
    NSString * _percentSymbol;
    struct __CFNumberFormatter { } * _plainFormatter;
    NSString * _plusSign;
    NSString * _pmString;
    NSMutableArray * _scientificNumberFormatters;
    unsigned long long  _secondaryGroupingSize;
    NSArray * _shortMonthSymbols;
    NSArray * _shortStandaloneMonthSymbols;
    NSArray * _shortStandaloneWeekdaySymbols;
    NSArray * _shortWeekdaySymbols;
    NSArray * _standaloneMonthSymbols;
    NSArray * _standaloneWeekdaySymbols;
    NSString * _trueString;
    NSArray * _weekdaySymbols;
}

@property (readonly) NSString *amString;
@property (readonly) NSString *arrayRowSeparator;
@property (readonly) struct __CFLocale { }*cfGregorianCalendarLocale;
@property (readonly) struct __CFLocale { }*cfLocale;
@property (readonly) NSString *currencyCode;
@property (readonly) NSString *currencyDecimalSeparator;
@property (readonly) NSString *currencyGroupingSeparator;
@property (readonly) long long dateComponentOrdering;
@property (readonly) TSUDateParserLibrary *dateParserLibrary;
@property (readonly) NSString *decimalSeparator;
@property (readonly) NSString *documentLanguageIdentifier;
@property (readonly) NSString *falseString;
@property (readonly) NSLocale *gregorianCalendarLocale;
@property (readonly) NSString *groupingSeparator;
@property (readonly) unsigned long long groupingSize;
@property (readonly) bool isAutoUpdating;
@property (readonly) NSString *languageCode;
@property (readonly) NSString *listSeparator;
@property (readonly) NSLocale *locale;
@property (readonly) NSString *localeIdentifier;
@property (readonly) NSString *minusSign;
@property (readonly) NSArray *monthSymbols;
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{TSUNumberOrDateLexer=@@@@@SSSSSSSSB{unordered_set<unsigned short' */ struct *numberOrDateLexer; /* unknown property attribute:  true> >=f}}}B@} */
@property (readonly) NSString *percentSymbol;
@property (readonly) NSString *plusSign;
@property (readonly) NSString *pmString;
@property (readonly) unsigned long long secondaryGroupingSize;
@property (readonly) NSArray *shortMonthSymbols;
@property (readonly) NSArray *shortStandaloneMonthSymbols;
@property (readonly) NSArray *shortStandaloneWeekdaySymbols;
@property (readonly) NSArray *shortWeekdaySymbols;
@property (readonly) NSArray *standaloneMonthSymbols;
@property (readonly) NSArray *standaloneWeekdaySymbols;
@property (readonly) NSTimeZone *timeZone;
@property (readonly) NSString *trueString;
@property (readonly) NSArray *weekdaySymbols;

+ (id)allSupportedTemplatePickerLanguages;
+ (id)allSupportedTier1Languages;
+ (id)allSupportedTier3Languages;
+ (id)applicationLocale;
+ (unsigned long long)autoupdatingCurrentLocaleChangeCount;
+ (id)availableCurrencyCodes;
+ (id)cacheKeyForLocale:(id)arg1;
+ (id)canonicalizeLocaleIdentifier:(id)arg1;
+ (id)canonicalizeLocaleIdentifierWithLanguageAndRegionOnly:(id)arg1;
+ (id)canonicalizeLocaleIdentifierWithLanguageAndScriptOnly:(id)arg1;
+ (id)canonicalizeLocaleIdentifierWithLanguageOnly:(id)arg1;
+ (id)canonicalizeLocaleIdentifierWithLanguageScriptAndRegionOnly:(id)arg1;
+ (id)currencySymbolForCurrencyCode:(id)arg1;
+ (id)currentLocale;
+ (id)currentLocaleCurrencyCode;
+ (id)deducedScriptForLocale:(id)arg1;
+ (unsigned short)defaultDecimalPlacesForCurrencyCode:(id)arg1;
+ (id)displayNameForCode:(id)arg1 ofType:(id)arg2 displayStandalone:(bool)arg3;
+ (id)displayNameForCurrencyCode:(id)arg1;
+ (void)initialize;
+ (id)localeForLocaleIdentifier:(id)arg1 documentLanguageIdentifier:(id)arg2;
+ (id)localeIDWithDefaultRegionCode:(id)arg1;
+ (id)localeIDWithoutDefaultRegionCode:(id)arg1 avoidAmbiguousCases:(bool)arg2;
+ (bool)localeIsAutoUpdating:(id)arg1;
+ (id)preferredLanguages;
+ (id)preferredLocale;
+ (void)saveLocaleForReuse:(id)arg1;
+ (void)setLocalizedStringBundle:(struct __CFBundle { }*)arg1;
+ (id)simplifiedDisplayNameForLocaleID:(id)arg1 displayStandalone:(bool)arg2;
+ (id)userVisibleCurrencyCodes;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)URLForResource:(id)arg1 withExtension:(id)arg2 subdirectory:(id)arg3;
- (id)URLForResource:(id)arg1 withExtension:(id)arg2 subdirectory:(id)arg3 inBundle:(struct __CFBundle { }*)arg4;
- (id)URLForResource:(id)arg1 withExtension:(id)arg2 subdirectory:(id)arg3 inBundleWithURL:(id)arg4;
- (void)_initializeNumberFormatterStringFromDoubleCache;
- (id)_localizedStringFromArgumentsTable:(id)arg1;
- (id)allLocalizedFunctions;
- (id)amString;
- (id)arrayRowSeparator;
- (struct __CFLocale { }*)cfGregorianCalendarLocale;
- (struct __CFLocale { }*)cfLocale;
- (struct __CFNumberFormatter { }*)checkoutNumberFormatter;
- (struct __CFNumberFormatter { }*)checkoutScientificNumberFormatter;
- (id)copyWithDocumentLanguageIdentifier:(id)arg1;
- (struct __CFNumberFormatter { }*)createHarmonizedCFNumberFormatterOfStyle:(long long)arg1;
- (id)currencyCode;
- (id)currencyCodeForCurrencySymbol:(id)arg1;
- (id)currencyDecimalSeparator;
- (id)currencyGroupingSeparator;
- (id)currencySymbolForCurrencyCode:(id)arg1;
- (long long)dateComponentOrdering;
- (id)dateParserLibrary;
- (void)dealloc;
- (id)decimalSeparator;
- (id)description;
- (id)displayLanguageNameWithStandalone:(bool)arg1;
- (id)displayNameForCurrencyCode:(id)arg1;
- (id)documentLanguageIdentifier;
- (id)falseString;
- (id)functionLocalizationDictionary;
- (id)functionNameForLocalizedString:(id)arg1;
- (id)gregorianCalendarLocale;
- (id)groupingSeparator;
- (unsigned long long)groupingSize;
- (id)halfWidthCurrencySymbolForCurrencyCode:(id)arg1;
- (unsigned long long)hash;
- (id)initWithLocale:(id)arg1 documentLanguageIdentifier:(id)arg2;
- (id)initWithLocale:(id)arg1 documentLanguageIdentifier:(id)arg2 useAutoupdating:(bool)arg3;
- (bool)isAutoUpdating;
- (bool)isEqual:(id)arg1;
- (id)languageCode;
- (id)languageIdentifierWithLanguageAndRegionOnly;
- (id)listSeparator;
- (void)loadLocalizedStrings;
- (id)locale;
- (id)localeIdentifier;
- (id)localeIdentifierWithLanguageAndRegionOnly;
- (id)localeIdentifierWithLanguageScriptAndRegionOnly;
- (id)localeSpecificStorageForKey:(id)arg1;
- (long long)localizedCaseInsensitiveCompare:(id)arg1 toString:(id)arg2;
- (bool)localizedCaseInsensitiveIsEqual:(id)arg1 toString:(id)arg2;
- (id)localizedCategoryArray;
- (id)localizedCategoryForFunction:(id)arg1;
- (long long)localizedCompare:(id)arg1 toString:(id)arg2;
- (id)localizedFalseString;
- (id)localizedFalseStrings;
- (id)localizedFunctionCategoryDictionary;
- (id)localizedFunctionNameForMenuTag:(int)arg1;
- (id)localizedLabelForAggType:(unsigned char)arg1;
- (id)localizedModeNameForArgument:(short)arg1 modeIndex:(short)arg2 ofFunction:(id)arg3;
- (id)localizedModeToolTipForArgument:(short)arg1 modeIndex:(short)arg2 ofFunction:(id)arg3;
- (id)localizedNameForArgument:(short)arg1 ofFunction:(id)arg2;
- (id)localizedNameForFunction:(id)arg1;
- (id)localizedNamesForFunctions:(id)arg1;
- (id)localizedStringForKey:(id)arg1 value:(id)arg2 table:(id)arg3;
- (bool)localizedStringIsFalse:(id)arg1;
- (bool)localizedStringIsTrue:(id)arg1;
- (id)localizedStringWithFormat:(id)arg1;
- (id)localizedToolTipForArgument:(short)arg1 ofFunction:(id)arg2;
- (id)localizedToolTipForFunction:(id)arg1;
- (id)localizedTrueString;
- (id)localizedTrueStrings;
- (id)localizedTypeStringForArgumentType:(int)arg1;
- (id)minusSign;
- (id)monthSymbols;
- (id)numberFormatterStringFromDouble:(double)arg1 withFormat:(id)arg2 useDecimalPlaces:(bool)arg3 minDecimalPlaces:(unsigned short)arg4 decimalPlaces:(unsigned short)arg5 showThousandsSeparator:(bool)arg6 currencyCode:(id)arg7 suppressMinusSign:(bool)arg8;
- (const struct TSUNumberOrDateLexer { id x1; id x2; id x3; id x4; id x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; unsigned short x10; unsigned short x11; unsigned short x12; unsigned short x13; bool x14; struct unordered_set<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { struct __hash_table<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned short, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> { struct __hash_node_base<std::__1::__hash_node<unsigned short, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_15_1_1; } x15; }*)numberOrDateLexer;
- (id)percentSymbol;
- (id)plusSign;
- (id)pmString;
- (void)resetFromCFNumberFormatter;
- (void)returnNumberFormatter:(struct __CFNumberFormatter { }*)arg1;
- (void)returnScientificNumberFormatter:(struct __CFNumberFormatter { }*)arg1;
- (unsigned long long)secondaryGroupingSize;
- (void)setLocaleSpecificStorage:(id)arg1 forKey:(id)arg2;
- (id)shortMonthSymbols;
- (id)shortStandaloneMonthSymbols;
- (id)shortStandaloneWeekdaySymbols;
- (id)shortWeekdaySymbols;
- (id)simplifiedDisplayNameWithStandalone:(bool)arg1;
- (id)standaloneMonthSymbols;
- (id)standaloneWeekdaySymbols;
- (id)supportedFunctions;
- (id)timeZone;
- (id)trueString;
- (id)weekdaySymbols;

@end
