/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTConcurrentCellList : TSPObject <NSCopying> {
    struct vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> > { 
        struct TSUModelColumnIndex {} *__begin_; 
        struct TSUModelColumnIndex {} *__end_; 
        struct __compressed_pair<TSUModelColumnIndex *, std::__1::allocator<TSUModelColumnIndex> > { 
            struct TSUModelColumnIndex {} *__value_; 
        } __end_cap_; 
    }  _baseColumns;
    struct vector<TSUModelRowIndex, std::__1::allocator<TSUModelRowIndex> > { 
        struct TSUModelRowIndex {} *__begin_; 
        struct TSUModelRowIndex {} *__end_; 
        struct __compressed_pair<TSUModelRowIndex *, std::__1::allocator<TSUModelRowIndex> > { 
            struct TSUModelRowIndex {} *__value_; 
        } __end_cap_; 
    }  _baseRows;
    struct vector<long, std::__1::allocator<long> > { 
        long long *__begin_; 
        long long *__end_; 
        struct __compressed_pair<long *, std::__1::allocator<long> > { 
            long long *__value_; 
        } __end_cap_; 
    }  _cellCountDiffsPerColumn;
    struct vector<long, std::__1::allocator<long> > { 
        long long *__begin_; 
        long long *__end_; 
        struct __compressed_pair<long *, std::__1::allocator<long> > { 
            long long *__value_; 
        } __end_cap_; 
    }  _cellCountDiffsPerRow;
    struct UUIDRect<TSP::UUIDRect> { 
        struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { 
            struct UUIDData<TSP::UUIDData> {} *__begin_; 
            struct UUIDData<TSP::UUIDData> {} *__end_; 
            struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { 
                struct UUIDData<TSP::UUIDData> {} *__value_; 
            } __end_cap_; 
        } _colIdList; 
        struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { 
            struct UUIDData<TSP::UUIDData> {} *__begin_; 
            struct UUIDData<TSP::UUIDData> {} *__end_; 
            struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { 
                struct UUIDData<TSP::UUIDData> {} *__value_; 
            } __end_cap_; 
        } _rowIdList; 
    }  _cellUIDRange;
    /* Warning: unhandled struct encoding: '{vector<TSTCell *, std::__1::allocator<TSTCell *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >="__value_"^@}}' */ struct vector<TSTCell *, std::__1::allocator<TSTCell *> > { 
        __end_ **__begin_; 
    }  _cells;
    bool  _containsCellBorderChanges;
    NSMutableDictionary * _formatsAdded;
    NSMutableDictionary * _formatsRemoved;
    NSArray * _interestingCells;
    /* Warning: unhandled struct encoding: '{vector<TSTCell *, std::__1::allocator<TSTCell *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >="__value_"^@}}' */ struct vector<TSTCell *, std::__1::allocator<TSTCell *> > { 
        __end_ **__begin_; 
    }  _oldCells;
    struct vector<TSTNineKeyStructPreBNC, std::__1::allocator<TSTNineKeyStructPreBNC> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<TSTNineKeyStructPreBNC *, std::__1::allocator<TSTNineKeyStructPreBNC> > { 
            struct { /* ? */ } *__value_; 
        } __end_cap_; 
    }  _preBNCKeysList;
    NSMutableArray * _rowInfosPerRow;
    NSMutableArray * _tilesPerRow;
    bool  _uidBased;
    struct TSUViewCellRect { 
        struct TSUCellRect { 
            struct TSUCellCoord { 
                unsigned int row; 
                unsigned short column; 
                bool _preserveRow; 
                bool _preserveColumn; 
            } origin; 
            struct { 
                unsigned int numberOfColumns; 
                unsigned int numberOfRows; 
            } size; 
        } _rect; 
    }  _viewCellRect;
    struct vector<TSUViewColumnIndex, std::__1::allocator<TSUViewColumnIndex> > { 
        struct TSUViewColumnIndex {} *__begin_; 
        struct TSUViewColumnIndex {} *__end_; 
        struct __compressed_pair<TSUViewColumnIndex *, std::__1::allocator<TSUViewColumnIndex> > { 
            struct TSUViewColumnIndex {} *__value_; 
        } __end_cap_; 
    }  _viewColumns;
    struct vector<TSUViewRowIndex, std::__1::allocator<TSUViewRowIndex> > { 
        struct TSUViewRowIndex {} *__begin_; 
        struct TSUViewRowIndex {} *__end_; 
        struct __compressed_pair<TSUViewRowIndex *, std::__1::allocator<TSUViewRowIndex> > { 
            struct TSUViewRowIndex {} *__value_; 
        } __end_cap_; 
    }  _viewRows;
}

@property (nonatomic, readonly) unsigned long long cellCount;
@property (nonatomic) /* Warning: unhandled struct encoding: '{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>' */ struct  cellUIDRange; /* unknown property attribute:  std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}} */
@property (nonatomic, readonly) bool containsCellBorderChanges;
@property (nonatomic, retain) NSMutableDictionary *formatsAdded;
@property (nonatomic, retain) NSMutableDictionary *formatsRemoved;
@property (nonatomic, readonly) bool hasCells;
@property (nonatomic, retain) NSArray *interestingCells;
@property (nonatomic, retain) NSMutableArray *rowInfosPerRow;
@property (nonatomic, retain) NSMutableArray *tilesPerRow;
@property (getter=isUIDBased, nonatomic, readonly) bool uidBased;
@property (nonatomic) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; } viewCellRect;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addCell:(id)arg1 atViewCellCoord:(struct TSUViewCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (unsigned long long)cellCount;
- (struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; })cellUIDRange;
- (bool)containsCellBorderChanges;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)formatsAdded;
- (id)formatsRemoved;
- (bool)hasCells;
- (id)initWithContext:(id)arg1 cellUIDRange:(struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; })arg2;
- (id)initWithContext:(id)arg1 viewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg2;
- (id)initWithContext:(id)arg1 viewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg2 cellUIDRange:(struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; })arg3;
- (id)interestingCells;
- (bool)isUIDBased;
- (void)loadFromUnarchiver:(id)arg1;
- (void)p_accumulateCurrentCellsConcurrentlyUsingBlock:(id /* block */)arg1;
- (id)p_baseColumnIndexes;
- (id)p_baseRowIndexes;
- (void)p_clearDataListIDs;
- (void)p_convertToInverseCellMap;
- (void)p_convertToUuidBasedCellListUsingTableInfo:(id)arg1 pruneCategorizedCells:(bool)arg2;
- (void)p_enumerateCellsAddedAndRemovedForFormatsUsingBlock:(id /* block */)arg1;
- (void)p_enumerateCellsAddedAndRemovedOfType:(long long)arg1 usingBlock:(id /* block */)arg2;
- (void)p_enumerateColumnCellCountDiffUsingBlock:(id /* block */)arg1;
- (void)p_enumerateCustomFormatsBeingAddedUsingReplacementBlock:(id /* block */)arg1;
- (void)p_enumerateNewAndOldCellsSeriallyUsingBlock:(id /* block */)arg1;
- (void)p_enumerateNewAndOldCellsSeriallyUsingPreBNCBlock:(id /* block */)arg1;
- (void)p_enumerateRowCellCountDiffUsingBlock:(id /* block */)arg1;
- (void)p_enumerateRowsOfCellsConcurrentlyUsingBlock:(id /* block */)arg1;
- (void)p_gatherRowState:(id /* block */)arg1;
- (void)p_invokeBlock:(id /* block */)arg1;
- (void)p_pruneCellsAtColumn:(unsigned long long)arg1 rowsSize:(unsigned long long)arg2 columnsSize:(unsigned long long)arg3;
- (void)p_pruneCellsAtRow:(unsigned long long)arg1 rowsSize:(unsigned long long)arg2 columnsSize:(unsigned long long)arg3;
- (void)p_pruneToBaseWithTableInfo:(id)arg1;
- (void)p_setObjectLocale:(id)arg1;
- (void)p_setupInterestingCells:(struct vector<TSTCell *, std::__1::allocator<TSTCell *> > { id *x1; id *x2; struct __compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> > { id *x_3_1_1; } x3; }*)arg1 forAdding:(bool)arg2;
- (id)rowInfosPerRow;
- (void)saveToArchiver:(id)arg1;
- (void)setCellUIDRange:(struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; })arg1;
- (void)setFormatsAdded:(id)arg1;
- (void)setFormatsRemoved:(id)arg1;
- (void)setInterestingCells:(id)arg1;
- (void)setRowInfosPerRow:(id)arg1;
- (void)setTilesPerRow:(id)arg1;
- (void)setViewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)tilesPerRow;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })viewCellRect;

@end
