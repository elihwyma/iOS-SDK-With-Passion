/*
 Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech
 */

#import <Foundation/NSObject.h>

@class CSAudioConverter, CSAudioPowerMeter, CSAudioRecordContext, CSAudioSampleRateConverter, CSAudioStream, CSAudioZeroCounter, CSContinuousVoiceTrigger, CSEndpointerProxy, CSLanguageDetector, CSPlainAudioFileWriter, CSSelectiveChannelAudioFileWriter, CSSmartSiriVolumeController, CSSpIdImplicitTraining, CSSpeakerIdRecognizerFactory, CSSpeechEndHostTimeEstimator, CSUserVoiceProfileStore, CSXPCClient, NSDictionary, NSString, NSUUID;

@protocol CSAudioAlertProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioSessionProviding, CSAudioStreamProviding, CSBargeInModeProviding, CSEndpointAnalyzer, CSLanguageDetectorDelegate, CSSpIdSpeakerRecognizer, CSSpeakerIdentificationDelegate, CSSpeechControllerDelegate, OS_dispatch_group, OS_dispatch_queue;

@interface CSSpeechController : NSObject

{
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_contextResetQueue;
    CSAudioConverter *_opusAudioConverter;
    CSAudioConverter *_narrowBandOpusConverter;
    CSAudioConverter *_audioConverter;
    CSAudioSampleRateConverter *_downsampler;
    NSDictionary *_requestedRecordSettings;
    NSDictionary *_lastVoiceTriggerInfo;
    NSDictionary *_lastRTSTriggerInfo;
    CSAudioZeroCounter *_continuousZeroCounter;
    NSObject<OS_dispatch_queue> *_audibleFeedbackQueue;
    NSObject<OS_dispatch_group> *_twoShotAudibleFeedbackDecisionGroup;
    _Bool _isOpus;
    _Bool _isActivated;
    _Bool _isNarrowBand;
    _Bool _twoShotNotificationEnabled;
    _Bool _isMediaPlaying;
    _Bool _isAlarmPlaying;
    _Bool _isTimerPlaying;
    _Bool _isSoundPlaying;
    _Bool _isRemoteVADAvailableStream;
    _Bool _myriadPreventingTwoShotFeedback;
    _Bool _needsPostGain;
    _Bool _shouldUseLanguageDetectorForCurrentRequest;
    _Bool _didDeliverLastBuffer;
    float _cachedAvgPower;
    float _cachedPeakPower;
    id <CSSpeechControllerDelegate> _delegate;
    id <CSSpeakerIdentificationDelegate> _speakerIdDelegate;
    id <CSLanguageDetectorDelegate> _languageDetectorDelegate;
    CSEndpointerProxy *_endpointerProxy;
    CSAudioRecordContext *_audioRecordContext;
    CSAudioStream *_audioStream;
    id <CSAudioStreamProviding> _streamProvider;
    id <CSAudioSessionProviding> _sessionProvider;
    id <CSAudioAlertProviding> _alertProvider;
    id <CSAudioMeterProviding> _audioMeterProvider;
    id <CSAudioMetricProviding> _audioMetricProvider;
    id <CSBargeInModeProviding> _bargeInModeProvider;
    CSPlainAudioFileWriter *_audioFileWriter;
    CSSelectiveChannelAudioFileWriter *_serverLoggingWriter;
    CSSmartSiriVolumeController *_volumeController;
    CSSpeakerIdRecognizerFactory *_spIdFactory;
    id <CSSpIdSpeakerRecognizer> _spIdRecognizer;
    CSSpIdImplicitTraining *_voiceTriggerImplicitTraining;
    NSDictionary *_spIdUserScores;
    CSUserVoiceProfileStore *_voiceProfileStore;
    unsigned long long _activeChannel;
    CSSpeechEndHostTimeEstimator *_speechEndHostTimeEstimator;
    CSContinuousVoiceTrigger *_continuousVoiceTrigger;
    CSLanguageDetector *_languageDetector;
    NSUUID *_pendingAudioSessionActivationToken;
    CDUnknownBlockType _pendingAudioSessionActivationCompletion;
    double _audioSessionActivationDelay;
    CSXPCClient *_xpcClient;
    CSXPCClient *_bargeInModeXPCClient;
    CSAudioPowerMeter *_powerMeter;
}

@property (retain, nonatomic) CSEndpointerProxy *endpointerProxy;
@property (retain, nonatomic) CSAudioRecordContext *audioRecordContext;
@property (retain, nonatomic) CSAudioStream *audioStream;
@property (retain, nonatomic) id <CSAudioStreamProviding> streamProvider;
@property (retain, nonatomic) id <CSAudioSessionProviding> sessionProvider;
@property (retain, nonatomic) id <CSAudioAlertProviding> alertProvider;
@property (retain, nonatomic) id <CSAudioMeterProviding> audioMeterProvider;
@property (retain, nonatomic) id <CSAudioMetricProviding> audioMetricProvider;
@property (retain, nonatomic) id <CSBargeInModeProviding> bargeInModeProvider;
@property (nonatomic) _Bool isOpus;
@property (nonatomic) _Bool isActivated;
@property (nonatomic) _Bool isNarrowBand;
@property (retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter;
@property (retain, nonatomic) CSSelectiveChannelAudioFileWriter *serverLoggingWriter;
@property (retain, nonatomic) CSSmartSiriVolumeController *volumeController;
@property (retain, nonatomic) CSSpeakerIdRecognizerFactory *spIdFactory;
@property (retain, nonatomic) id <CSSpIdSpeakerRecognizer> spIdRecognizer;
@property (retain, nonatomic) CSSpIdImplicitTraining *voiceTriggerImplicitTraining;
@property (retain, nonatomic) NSDictionary *spIdUserScores;
@property (retain, nonatomic) CSUserVoiceProfileStore *voiceProfileStore;
@property (nonatomic) unsigned long long activeChannel;
@property (nonatomic) _Bool twoShotNotificationEnabled;
@property (nonatomic) _Bool isMediaPlaying;
@property (nonatomic) _Bool isAlarmPlaying;
@property (nonatomic) _Bool isTimerPlaying;
@property (nonatomic) _Bool isSoundPlaying;
@property (nonatomic) _Bool isRemoteVADAvailableStream;
@property (nonatomic) _Bool myriadPreventingTwoShotFeedback;
@property (nonatomic) _Bool needsPostGain;
@property (retain, nonatomic) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator;
@property (retain, nonatomic) CSContinuousVoiceTrigger *continuousVoiceTrigger;
@property (retain, nonatomic) CSLanguageDetector *languageDetector;
@property (nonatomic) _Bool shouldUseLanguageDetectorForCurrentRequest;
@property (retain, nonatomic) NSUUID *pendingAudioSessionActivationToken;
@property (copy, nonatomic) CDUnknownBlockType pendingAudioSessionActivationCompletion;
@property (nonatomic) double audioSessionActivationDelay;
@property (retain, nonatomic) CSXPCClient *xpcClient;
@property (retain, nonatomic) CSXPCClient *bargeInModeXPCClient;
@property (nonatomic) float cachedAvgPower;
@property (nonatomic) float cachedPeakPower;
@property (retain, nonatomic) CSAudioPowerMeter *powerMeter;
@property (nonatomic) _Bool didDeliverLastBuffer;
@property (weak, nonatomic) id <CSSpeechControllerDelegate> delegate;
@property (weak, nonatomic) id <CSSpeakerIdentificationDelegate> speakerIdDelegate;
@property (weak, nonatomic) id <CSLanguageDetectorDelegate> languageDetectorDelegate;
@property (nonatomic) _Bool duckOthersOption;
@property (nonatomic, readonly) id <CSEndpointAnalyzer> endpointAnalyzer;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;

+ (id)sharedController;
+ (_Bool)isSmartSiriVolumeAvailable;

- (id)init;
- (void)reset;
- (id)metrics;
- (void)preheat;
- (_Bool)isRecording;
- (void)stopRecording;
- (id)recordRoute;
- (void)prewarmAudioSession;
- (void)releaseAudioSession;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;
- (_Bool)prepareRecordWithSettings:(id)arg1 error:(id *)arg2;
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (_Bool)playAlertSoundForType:(long long)arg1;
- (void)resetEndpointer;
- (_Bool)playRecordStartingAlertAndResetEndpointer;
- (_Bool)startRecording:(id *)arg1;
- (_Bool)startRecordingWithSettings:(id)arg1 error:(id *)arg2;
- (id)recordSettings;
- (double)getRecordBufferDuration;
- (_Bool)setRecordBufferDuration:(double)arg1;
- (void)setMeteringEnabled:(_Bool)arg1;
- (void)updateMeters;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (unsigned long long)alertStartTime;
- (id)playbackRoute;
- (id)voiceTriggerInfo;
- (void)setSynchronousCallbackEnabled:(_Bool)arg1;
- (double)lastEndOfVoiceActivityTime;
- (void)voiceTriggerAssetHandler:(id)arg1 didChangeCachedAsset:(id)arg2;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)arg2;
- (void)CSXPCClient:(id)arg1 didDisconnect:(_Bool)arg2;
- (void)CSMediaPlayingMonitor:(id)arg1 didReceiveMediaPlayingChanged:(long long)arg2;
- (void)CSTimerMonitor:(id)arg1 didReceiveTimerChanged:(long long)arg2;
- (void)CSAlarmMonitor:(id)arg1 didReceiveAlarmChanged:(long long)arg2;
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectly:(long long)arg2;
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 didHardwareConfigurationChange:(long long)arg2;
- (void)voiceTriggerDidDetectKeyword:(id)arg1 deviceId:(id)arg2;
- (void)keywordDetectorDidDetectKeyword;
- (_Bool)isRTSTriggered;
- (_Bool)isHearstVoiceTriggered;
- (void)continuousVoiceTrigger:(id)arg1 detectedSilenceAfterVoiceTriggerAt:(double)arg2;
- (void)continuousVoiceTrigger:(id)arg1 detectedVoiceTriggerResult:(id)arg2;
- (void)stopEndpointer;
- (void)processServerEndpointFeatures:(id)arg1;
- (void)updateEndpointerThreshold:(float)arg1;
- (void)updateEndpointerDelayedTrigger:(_Bool)arg1;
- (void)shouldAcceptEagerResultForDuration:(double)arg1 resultsCompletionHandler:(CDUnknownBlockType)arg2;
- (id)endpointerModelVersion;
- (_Bool)isBuiltInVoiceTriggered;
- (_Bool)isJarvisVoiceTriggered;
- (void)speakerRecognizer:(id)arg1 hasSpeakerIdInfo:(id)arg2;
- (void)speakerRecognizerFinishedProcessing:(id)arg1 withFinalSpeakerIdInfo:(id)arg2;
- (void)startController;
- (long long)_currentAudioRecorderSampleRate;
- (void)_initializeMediaPlayingState;
- (void)_initializeAlarmState;
- (void)_initializeTimerState;
- (void)_setSoundPlayingState;
- (id)_contextToString:(id)arg1;
- (_Bool)_shouldResetContextAtPrepare;
- (_Bool)_fetchAudioProviderWithContext:(id)arg1;
- (_Bool)_shouldFetchVoiceTriggerInfo;
- (_Bool)_shouldFetchRaiseToSpeakInfo;
- (_Bool)_fetchLastTriggerInfo;
- (_Bool)_activateAudioSessionWithDelay:(double)arg1 error:(id *)arg2;
- (_Bool)_activateAudioSession:(id *)arg1 forRetry:(_Bool)arg2;
- (void)_setupDownsamplerIfNeeded;
- (_Bool)_setupAudioConverter:(_Bool)arg1 isNarrowBand:(_Bool)arg2;
- (void)_createAudioPowerMeterIfNeeded;
- (_Bool)_isDelayedDuckingSupportedContext;
- (void)_scheduleActivateAudioSessionWithDelay:(double)arg1 forReason:(id)arg2 validator:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_cancelPendingAudioSessionActivateForReason:(id)arg1;
- (void)_createBargeInModeProviderFromXPCIfNeeded;
- (void)_enableBargeInMode:(_Bool)arg1;
- (void)_teardownAudioProviderIfNeeded;
- (void)_tearDownBargeInModeProviderIfNeeded;
- (id)_fetchFallbackAudioSessionReleaseProviding;
- (_Bool)_shouldSetStartSampleCount;
- (_Bool)_shouldSetStartSampleCountForRTS;
- (void)_setupSpeakerId;
- (void)_startPhaticDecision;
- (_Bool)_shouldUseLanguageDetector:(id)arg1;
- (void)_createLanguageDetectorIfNeeded;
- (id)_languageDetectorOptionFromSettings:(id)arg1;
- (_Bool)_canPlayPhaticDuringMediaPlayback;
- (_Bool)_shouldSchedulePhaticAtStartRecording;
- (float)_scheduledPhaticDelay;
- (unsigned long long)_phaticPlaybackReason;
- (void)_didStopForReason:(long long)arg1;
- (id)recordDeviceInfo;
- (void)_deviceAudioLoggingWithFileWriter:(id)arg1;
- (void)_performPendingAudioSessionActivateForReason:(id)arg1;
- (_Bool)_createAudioProviderFromXPCWithContext:(id)arg1;
- (id)_getSpeechIdentifier;
- (_Bool)isSmartSiriVolumeAvailable;
- (void)audioConverterDidConvertPackets:(id)arg1 packets:(id)arg2 durationInSec:(float)arg3 timestamp:(unsigned long long)arg4;
- (void)smartSiriVolumeControllerDetectedSystemVolumeChange:(id)arg1 withVolume:(float)arg2 forReason:(unsigned long long)arg3;
- (void)audioSessionProviderBeginInterruption:(id)arg1;
- (void)audioSessionProviderBeginInterruption:(id)arg1 withContext:(id)arg2;
- (void)audioSessionProviderEndInterruption:(id)arg1;
- (void)audioSessionProvider:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;
- (void)audioSessionProvider:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;
- (void)audioSessionProvider:(id)arg1 providerInvalidated:(_Bool)arg2;
- (void)audioSessionProvider:(id)arg1 didChangeContext:(_Bool)arg2;
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;
- (_Bool)initializeRecordSessionWithContext:(id)arg1;
- (void)resetAudioSession;
- (struct AudioStreamBasicDescription)getLPCMAudioStreamBasicDescription;
- (void)stopRecordingWithOptions:(id)arg1;
- (float)peakPowerForOutputReference;
- (float)averagePowerForOutputReference;
- (unsigned long long)outputReferenceChannel;
- (void)setEndpointAnalyzerDelegate:(id)arg1;
- (float)getSmartSiriVolume;
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)arg1;
- (void)cancelCurrentLanguageDetectorRequest;
- (void)setLanguageDetectorInteractionID:(id)arg1;
- (void)beginWaitingForMyriad;
- (void)endWaitingForMyriadWithDecision:(unsigned long long)arg1;

@end
