/*
 Image: /System/Library/PrivateFrameworks/PowerlogHelperdOperators.framework/PowerlogHelperdOperators
 */

#import <PowerlogCore/PLAgent.h>

@class NSDate, NSDictionary, NSMutableArray, NSNumber, NSString, PLCFNotificationOperatorComposition, PLEntry, PLEntryNotificationOperatorComposition, PLIOKitOperatorComposition, PLMonotonicTimer, PLSemaphore, PLTimer, PLXPCListenerOperatorComposition, PLXPCResponderOperatorComposition, PowerUISmartChargeClient;

@interface PLBatteryAgent : PLAgent

{
    _Bool _isPingPongCharging;
    _Bool _isFirstTimeCheckingPingPong;
    _Bool _lifetimeDataLogged;
    _Bool _allowGasGaugeRead;
    _Bool _inPenaltyBox;
    _Bool _rejudgeBattery;
    _Bool _csmOverrideValue;
    int _presentMaxRa;
    int _lifetimeMaxRa;
    int _previousCurrentAccumulator;
    int _previousCurrentAccumulatorCount;
    int _gasGaugeConsecutiveEmptyEntriesCount;
    int _priIOAccessoryPowerMode;
    int _prevConnectedState;
    int _prevChargingState;
    int _presentChemicalWeightedRa;
    int _presentWeightedRa;
    int _presentBatteryHealthMetric;
    int _presentPeakPerformanceCapacity;
    int _lastUILevel;
    PLIOKitOperatorComposition *_iokitPowerSource;
    PLIOKitOperatorComposition *_iokitPPM;
    PLEntryNotificationOperatorComposition *_batteryLevelChanged;
    NSNumber *_deviceIsPluggedIn;
    double _batteryLevelPercent;
    double _rawBatteryVoltageVolt;
    NSDictionary *_lastITMiscStatus;
    NSDate *_previousCurrentAccumulatorDate;
    PLTimer *_EABatteryTimer;
    PLMonotonicTimer *_significantBatteryChangeTimer;
    NSString *_entryKeyEABattery;
    NSString *_entryKeyEAPencilStats;
    double _EAEnergyDrained;
    NSNumber *_lastkIOPSAppleBatteryCaseCumulativeCurrentKey;
    PLTimer *_periodicAggdTimer;
    PLTimer *_xFlagsRetryTimer;
    PLEntry *_lastBatteryConfigEntry;
    NSNumber *_lastDOD0;
    PLXPCResponderOperatorComposition *_batteryInfoResponder;
    PLXPCResponderOperatorComposition *_batteryTemperatureResponder;
    PLXPCResponderOperatorComposition *_batteryDischargeCurrentResponder;
    PLIOKitOperatorComposition *_chargerIOService;
    PLEntry *_lastChargerEntry;
    PLEntryNotificationOperatorComposition *_canSleepEntryNotifications;
    PLSemaphore *_canSleepSemaphore;
    PLEntryNotificationOperatorComposition *_wakeEntryNotifications;
    PLTimer *_gasGaugeTimer;
    NSDate *_lastGasGaugeLogTime;
    PLIOKitOperatorComposition *_ioAccessoryManager;
    PLXPCResponderOperatorComposition *_batteryShutdownDataResponder;
    PLXPCResponderOperatorComposition *_batteryUPOStepperResponder;
    PLXPCResponderOperatorComposition *_batteryConfigResponder;
    PLXPCListenerOperatorComposition *_UPOStepperListener;
    PLXPCListenerOperatorComposition *_smartChargingListener;
    PowerUISmartChargeClient *_smartChargingClient;
    NSMutableArray *_trackedAccessories;
    NSDate *_lastTimeChargingInfoUpdated;
    PLEntry *_entryChargingOld;
    NSDate *_lastTimePenaltyBoxIntervalUpdated;
    NSDate *_lastTimeInPenaltyBox;
    NSNumber *_prevGGResetCount;
    NSNumber *_mitigatedUPOCount;
    struct ggcontext *_gasGagueConnection;
    long long _ppmEventLoggingCount;
    PLTimer *_ppmEventThresholdTimer;
    PLCFNotificationOperatorComposition *_cpmsDebugNotification;
    long long _csmTotalCount;
    long long _csmFailureCount;
    NSDate *_csmLastFlushMonotonicDate;
    double _csmFlushInterval;
    PLCFNotificationOperatorComposition *_csmFlushNotification;
    PLCFNotificationOperatorComposition *_csmOverrideNotification;
}

@property (readonly) PLIOKitOperatorComposition *iokitPowerSource;
@property (readonly) PLIOKitOperatorComposition *iokitPPM;
@property (retain) PLEntryNotificationOperatorComposition *batteryLevelChanged;
@property (retain) NSNumber *deviceIsPluggedIn;
@property double batteryLevelPercent;
@property double rawBatteryVoltageVolt;
@property int presentMaxRa;
@property int lifetimeMaxRa;
@property (retain) NSDictionary *lastITMiscStatus;
@property int previousCurrentAccumulator;
@property int previousCurrentAccumulatorCount;
@property (retain) NSDate *previousCurrentAccumulatorDate;
@property (retain) PLTimer *EABatteryTimer;
@property (retain) PLMonotonicTimer *significantBatteryChangeTimer;
@property (readonly) NSString *entryKeyEABattery;
@property (readonly) NSString *entryKeyEAPencilStats;
@property double EAEnergyDrained;
@property (retain) NSNumber *lastkIOPSAppleBatteryCaseCumulativeCurrentKey;
@property _Bool isPingPongCharging;
@property _Bool isFirstTimeCheckingPingPong;
@property _Bool lifetimeDataLogged;
@property (retain) PLTimer *periodicAggdTimer;
@property (retain) PLTimer *xFlagsRetryTimer;
@property (retain) PLEntry *lastBatteryConfigEntry;
@property (retain) NSNumber *lastDOD0;
@property (retain) PLXPCResponderOperatorComposition *batteryInfoResponder;
@property (retain) PLXPCResponderOperatorComposition *batteryTemperatureResponder;
@property (retain) PLXPCResponderOperatorComposition *batteryDischargeCurrentResponder;
@property (retain) PLIOKitOperatorComposition *chargerIOService;
@property (retain) PLEntry *lastChargerEntry;
@property (readonly) PLEntryNotificationOperatorComposition *canSleepEntryNotifications;
@property (retain) PLSemaphore *canSleepSemaphore;
@property (readonly) PLEntryNotificationOperatorComposition *wakeEntryNotifications;
@property (retain) PLTimer *gasGaugeTimer;
@property (retain) NSDate *lastGasGaugeLogTime;
@property int gasGaugeConsecutiveEmptyEntriesCount;
@property _Bool allowGasGaugeRead;
@property (readonly) PLIOKitOperatorComposition *ioAccessoryManager;
@property (retain) PLXPCResponderOperatorComposition *batteryShutdownDataResponder;
@property (retain) PLXPCResponderOperatorComposition *batteryUPOStepperResponder;
@property (retain) PLXPCResponderOperatorComposition *batteryConfigResponder;
@property (retain) PLXPCListenerOperatorComposition *UPOStepperListener;
@property (retain) PLXPCListenerOperatorComposition *smartChargingListener;
@property (retain) PowerUISmartChargeClient *smartChargingClient;
@property (retain) NSMutableArray *trackedAccessories;
@property int priIOAccessoryPowerMode;
@property (retain) NSDate *lastTimeChargingInfoUpdated;
@property int prevConnectedState;
@property int prevChargingState;
@property (retain) PLEntry *entryChargingOld;
@property (retain) NSDate *lastTimePenaltyBoxIntervalUpdated;
@property (retain) NSDate *lastTimeInPenaltyBox;
@property _Bool inPenaltyBox;
@property (retain) NSNumber *prevGGResetCount;
@property int presentChemicalWeightedRa;
@property int presentWeightedRa;
@property int presentBatteryHealthMetric;
@property int presentPeakPerformanceCapacity;
@property (retain) NSNumber *mitigatedUPOCount;
@property _Bool rejudgeBattery;
@property struct ggcontext *gasGagueConnection;
@property int lastUILevel;
@property long long ppmEventLoggingCount;
@property (retain) PLTimer *ppmEventThresholdTimer;
@property (retain) PLCFNotificationOperatorComposition *cpmsDebugNotification;
@property long long csmTotalCount;
@property long long csmFailureCount;
@property (retain) NSDate *csmLastFlushMonotonicDate;
@property double csmFlushInterval;
@property (retain) PLCFNotificationOperatorComposition *csmFlushNotification;
@property (retain) PLCFNotificationOperatorComposition *csmOverrideNotification;
@property _Bool csmOverrideValue;

+ (void)load;
+ (id)defaults;
+ (id)entryAggregateDefinitions;
+ (id)entryEventPointDefinitions;
+ (id)entryEventForwardDefinitions;
+ (id)entryEventBackwardDefinitions;
+ (id)entryEventNoneDefinitions;
+ (id)entryEventIntervalDefinitions;
+ (id)entryEventIntervalDefinitionGasGauge;
+ (id)entryEventNoneDefinitionBatteryConfig;
+ (id)entryEventPointDefinitionBatteryShutdown;
+ (id)entryEventPointDefinitionChargingInfo;
+ (id)entryEventPointDefinitionEAPencil;
+ (id)entryEventPointDefinitionBatteryUILogging;
+ (id)entryEventPointDefinitionPPMDebug;
+ (id)entryEventPointDefinitionPPMClientMetrics;
+ (id)entryEventPointDefinitionUPOStepper;
+ (id)entryEventPointDefinitionCPMSControlState;
+ (id)entryEventPointDefinitionCPMSClientState;
+ (id)entryEventPointDefinitionGasGaugeReconnect;
+ (_Bool)shouldLogCPMS;
+ (_Bool)hasLPEMLogging;
+ (_Bool)hasExternalAccessory;
+ (_Bool)hasChargingInfoLogging;
+ (id)entryEventForwardDefinitionExternalCharger;
+ (id)entryEventForwardDefinitionEAPencil;
+ (id)entryEventForwardDefinitionLightningConnectorStatus;
+ (id)entryEventForwardDefinitionUPOStepper;
+ (id)entryEventForwardDefinitionMitigationState;
+ (id)entryEventForwardDefinitionIOPMUBootLPMLog;
+ (id)entryEventForwardDefinitionSmartCharging;
+ (id)entryEventForwardDefinitionSmartChargingStatus;
+ (id)entryEventForwardDefinitionEAPencilCharging;
+ (_Bool)hasLightning;
+ (_Bool)hasWirelessCharger;
+ (id)entryEventBackwardDefinitionBattery;
+ (id)entryEventBackwardDefinitionEABattery;
+ (id)entryEventBackwardDefinitionBatteryUI;
+ (id)entryEventBackwardDefinitionCurrentAccumulator;
+ (id)entryEventBackwardDefinitionChargingHeatMapA;
+ (id)entryEventBackwardDefinitionChargingHeatMapB;
+ (id)entryEventBackwardDefinitionDischargingHeatMap;
+ (id)entryEventBackwardDefinitionKioskMode;
+ (id)entryAggregateDefinitionUILevel;
+ (id)connectStateStringToEnum:(id)arg1;
+ (_Bool)shouldLogPPMDebugDetail;
+ (_Bool)supportsxFlags;

- (id)init;
- (void)dealloc;
- (int)deviceType;
- (void)log;
- (void)initOperatorDependancies;
- (id)getMitigatedUPOCountDefault;
- (void)setupCSMLogging;
- (id)logEventBackwardBatteryWithRawData:(id)arg1;
- (_Bool)shouldWaitForLifetimeDataWithRawData:(id)arg1;
- (id)overrideBatteryData:(id)arg1 withPath:(id)arg2;
- (void)logEventNoneBatteryConfigWithRawData:(id)arg1;
- (void)aggdTimerFired;
- (id)parseBatterySerialNumber:(id)arg1;
- (_Bool)modifiedExternalChargerEntry:(id)arg1;
- (void)updateLastChargeLevel:(int)arg1 withTimestamp:(double)arg2;
- (_Bool)hasAppleSmartBattery;
- (void)logCurrentAccumulatorWithRawData:(id)arg1;
- (void)checkChargingInfoChange:(id)arg1;
- (void)logEventPointChargingInfoWithChargingData:(id)arg1;
- (void)logEventIntervalGasGauge;
- (_Bool)gasGaugeOpenAndStartLogging;
- (void)fakeLogEntry:(id)arg1;
- (void)accessoryConnected:(id)arg1;
- (void)accessoryDisconnected:(id)arg1;
- (void)refreshEABatteryStatus;
- (_Bool)gasGaugeStopLoggingAndClose;
- (_Bool)isEABatteryConnectedNow;
- (_Bool)isEAPencilConnectedNow;
- (void)setupEALogging;
- (void)cancelEALogging;
- (void)logEABatteryStatistics;
- (void)detectEAPencilConnectionWithNotification:(id)arg1;
- (id)getIOPSDevices;
- (id)getBaseIdentifierFromDevice:(id)arg1;
- (void)logEventPointBatteryShutdown;
- (void)logEventPointUPOStepper;
- (void)logEventBackwardHeatMap;
- (void)logEventBackwardKioskMode;
- (void)logEventNoneBatteryConfigCycleCountData;
- (void)handleSBC;
- (void)logEventForwardUPOStepperWithPayload:(id)arg1;
- (void)logEventForwardSmartChargingWithPayload:(id)arg1;
- (void)handleMitigationStateCallback:(int)arg1;
- (void)logEventForwardMitigationStateWithState:(unsigned long long)arg1 userDisabled:(_Bool)arg2;
- (void)handlePPMCallback;
- (void)logEventForwardLPEM;
- (void)logCPMSSnapshotWithTrigger:(long long)arg1;
- (void)initSmartChargingStatusLogging;
- (void)logPPMDebug;
- (void)logEventBackwardBattery;
- (id)getUPOStepperData;
- (id)getPPMDebugData;
- (void)gasGaugeRead;
- (_Bool)driverActive:(id)arg1;
- (void)logChargingParametersToAggd:(id)arg1;
- (int)calculateConnectedState:(id)arg1;
- (int)calculateChargingState:(id)arg1;
- (_Bool)checkForPenaltyBox:(id)arg1;
- (void)logPenaltyBoxDurationToAggd:(double)arg1;
- (void)logChargingTimeToAggd:(double)arg1;
- (void)setMitigationStateDefault:(unsigned long long)arg1;
- (void)logEventBackwardHeatMapCallback:(id)arg1 andHeatMapType:(long long)arg2;
- (void)logEventBackwardKioskModeCallback:(id)arg1;
- (void)logKioskModeEntryToAggd:(id)arg1;
- (id)presentMaxRaFromRawData:(id)arg1;
- (id)parseITMiscStatusCounters:(id)arg1;
- (void)updateCurrentSenseMonitorStatusWithEntry:(id)arg1;
- (id)lowBatteryLogPath;
- (id)parseRawRaTableData:(id)arg1;
- (void)setMitigatedUPOCountDefault:(id)arg1;
- (void)setAggdIntegerValueFromEntry:(id)arg1 forKey:(id)arg2 withPrefix:(id)arg3;
- (void)logBatteryConfigToAggd:(id)arg1;
- (id)getBatteryShutdownData;
- (id)lowBatteryLogString;
- (void)logBatteryShutdownToAggd:(id)arg1;
- (_Bool)isUPOEntry:(id)arg1;
- (int)getBatteryMaximumCapacityPercent;
- (int)batteryLifetimeUPOCount;
- (id)weekOfManufacture:(id)arg1;
- (id)batteryEEEECode:(id)arg1;
- (id)isOriginalBattery;
- (_Bool)batterySerialChanged:(id)arg1;
- (int)getBatteryHealthServiceState;
- (int)getBatteryHealthServiceFlags;
- (long long)xFlags;
- (_Bool)givePluggedInFreePass;
- (void)addPowerMeasurementToAccounting:(double)arg1 withStartDate:(id)arg2 withEndDate:(id)arg3;
- (void)accountGaugePowerFromCurrentAccumulatorEntry:(id)arg1;
- (void)flushCSMToAggdAtDate:(id)arg1;
- (void)logSmartChargingStatus;
- (_Bool)shouldLogCPMSSnapshotWithReason:(unsigned char)arg1 withTrigger:(long long)arg2;
- (void)populateClientEntry:(id)arg1 withBudget:(id)arg2 withTemplate:(id)arg3;
- (int)getMitigationDefaults;

@end
