/*
 Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore
 */

#import <MediaPlayer/MPAVItem.h>

@class ICMusicSubscriptionLeaseSession, ICMusicSubscriptionLeaseStatus, ICStoreRequestContext, MPCModelGenericAVItemTimedMetadataRequest, MPCModelGenericAVItemTimedMetadataResponse, MPCModelGenericAVItemUserIdentityPropertySet, MPCPlaybackRequestEnvironment, MPCSuzeLeaseSession, MPMediaLibrary, MPModelGenericObject, MPPropertySet, MPSubscriptionStatusPlaybackInformation, NSArray, NSData, NSDictionary, NSNumber, NSObject, NSOperationQueue, NSString, NSURL;

@protocol MPCModelPlaybackAssetCacheProviding, MPCReportingIdentityPropertiesLoading, OS_dispatch_queue;

@interface MPCModelGenericAVItem : MPAVItem

{
    NSObject<OS_dispatch_queue> *_accessQueue;
    _Bool _allowsAirPlayFromCloud;
    NSNumber *_bookmarkTime;
    _Bool _hasLoadedSubscriptionLeaseSession;
    NSObject<OS_dispatch_queue> *_subscriptionLeaseSessionLoadQueue;
    ICMusicSubscriptionLeaseSession *_subscriptionLeaseSession;
    _Bool _hasLoadedSubscriptionPlaybackInformation;
    MPSubscriptionStatusPlaybackInformation *_subscriptionPlaybackInformation;
    NSObject<OS_dispatch_queue> *_subscriptionPlaybackInformationLoadQueue;
    _Bool _shouldAutomaticallyRefreshSubscriptionLease;
    _Bool _isAssetSubscriptionProtectionType;
    _Bool _isSubscriptionPolicyContent;
    _Bool _lastPreparedForNonZeroRate;
    long long _subscriptionLeaseRequestCount;
    _Bool _didDeferPreventionStatusUpdate;
    MPCSuzeLeaseSession *_suzeLeaseSession;
    _Bool _isAutomaticallyRefreshingSuzeLeaseSession;
    CDUnknownBlockType _firstBecomeActivePlayerItemBlock;
    NSArray *_currentGlobalTimedMetadataGroups;
    MPModelGenericObject *_flattenedGenericObject;
    MPModelGenericObject *_flattenedMetadataGenericObject;
    MPModelGenericObject *_metadataGenericObject;
    MPPropertySet *_itemProperties;
    id <MPCReportingIdentityPropertiesLoading> _identityPropertiesLoader;
    MPCModelGenericAVItemTimedMetadataRequest *_timedMetadataRequest;
    MPCModelGenericAVItemTimedMetadataResponse *_timedMetadataResponse;
    NSOperationQueue *_timedMetadataOperationQueue;
    _Bool _isMusicCellularStreamingAllowed;
    _Bool _isHLSAsset;
    _Bool _isiTunesStoreStream;
    ICStoreRequestContext *_storeRequestContext;
    NSURL *_streamingKeyCertificateURL;
    NSURL *_streamingKeyServerURL;
    id _rtcReportingParentHierarchyToken;
    NSString *_rtcReportingServiceIdentifier;
    MPCModelGenericAVItemUserIdentityPropertySet *_identityPropertySet;
    _Bool supportsRadioTrackActions;
    _Bool _radioPlayback;
    _Bool _radioStreamPlayback;
    _Bool _subscriptionRequired;
    long long _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus *_leaseStatus;
    id <MPCModelPlaybackAssetCacheProviding> _assetCacheProvider;
    NSString *_assetSourceStoreFrontID;
    long long _equivalencySourceAdamID;
    MPModelGenericObject *_genericObject;
    NSData *_jingleTimedMetadata;
    MPMediaLibrary *_mediaLibrary;
    NSNumber *_siriInitiated;
    MPCPlaybackRequestEnvironment *_playbackRequestEnvironment;
    long long _stationItemLikedState;
    NSDictionary *_trackInfo;
}

@property (retain, nonatomic) id <MPCModelPlaybackAssetCacheProviding> assetCacheProvider;
@property (copy, nonatomic) NSString *assetSourceStoreFrontID;
@property (nonatomic) long long equivalencySourceAdamID;
@property (retain, nonatomic) MPModelGenericObject *genericObject;
@property (copy, nonatomic, readonly) NSData *jingleTimedMetadata;
@property (retain, nonatomic) MPMediaLibrary *mediaLibrary;
@property (copy, nonatomic, getter=isSiriInitiated) NSNumber *siriInitiated;
@property (nonatomic, getter=isRadioPlayback) _Bool radioPlayback;
@property (nonatomic, getter=isRadioStreamPlayback) _Bool radioStreamPlayback;
@property (nonatomic, getter=isSubscriptionRequired) _Bool subscriptionRequired;
@property (nonatomic, readonly) _Bool shouldReportPlayEventsToStore;
@property (copy, nonatomic, readonly) MPCPlaybackRequestEnvironment *playbackRequestEnvironment;
@property (nonatomic) long long stationItemLikedState;
@property (retain, nonatomic) NSDictionary *trackInfo;
@property (nonatomic) _Bool supportsRadioTrackActions;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;
@property (nonatomic, readonly) id rtcReportingParentHierarchyToken;
@property (copy, nonatomic, readonly) NSString *rtcReportingServiceIdentifier;
@property (nonatomic, readonly) long long rtcReportingAssetType;

+ (id)_utilitySerialQueue;
+ (_Bool)_prefersHighQualityVideoContentForNetworkType:(long long)arg1;
+ (_Bool)_prefersHighQualityAudioContentForNetworkType:(long long)arg1;

- (void)dealloc;
- (long long)type;
- (id)genre;
- (id)album;
- (id)artist;
- (unsigned long long)mediaType;
- (unsigned long long)cloudID;
- (unsigned long long)persistentID;
- (double)_startTime;
- (id)composer;
- (long long)stationID;
- (void)setRating:(float)arg1;
- (id)personID;
- (_Bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;
- (_Bool)resourceLoader:(id)arg1 shouldWaitForRenewalOfRequestedResource:(id)arg2;
- (_Bool)allowsExternalPlayback;
- (id)_stopTime;
- (void)metadataOutput:(id)arg1 didOutputTimedMetadataGroups:(id)arg2 fromPlayerItemTrack:(id)arg3;
- (id)mediaItem;
- (_Bool)isStreamable;
- (id)stationName;
- (id)albumArtist;
- (_Bool)canUseLoadedAsset;
- (void)loadAssetAndPlayerItem;
- (id)playbackError;
- (id)bookmarkTime;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)notePlaybackFinishedByHittingEnd;
- (void)setPlaybackCheckpointCurrentTime:(double)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
- (long long)albumYear;
- (long long)artistStoreID;
- (unsigned long long)albumTrackNumber;
- (unsigned long long)albumTrackCount;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(_Bool)arg1;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;
- (_Bool)isAssetURLValid;
- (_Bool)isExplicitTrack;
- (_Bool)usesSubscriptionLease;
- (id)libraryLyrics;
- (_Bool)hasStoreLyrics;
- (_Bool)hasTimeSyncedLyrics;
- (id)containerUniqueID;
- (_Bool)isAlwaysLive;
- (_Bool)allowsEQ;
- (id)mainTitle;
- (void)prepareForRate:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)isRadioItem;
- (id)stationHash;
- (id)stationStringID;
- (_Bool)useEmbeddedChapterData;
- (id)chapterTimeMarkers;
- (id)artworkTimeMarkers;
- (id)urlTimeMarkers;
- (float)userRating;
- (id)databaseID;
- (id)cloudUniversalLibraryID;
- (id)cloudAlbumID;
- (unsigned long long)albumPersistentID;
- (unsigned long long)albumArtistPersistentID;
- (unsigned long long)artistPersistentID;
- (unsigned long long)genrePersistentID;
- (unsigned long long)composerPersistentID;
- (long long)storePurchasedAdamID;
- (_Bool)shouldShowComposer;
- (double)durationFromExternalMetadata;
- (id)playbackInfo;
- (void)_currentPlaybackRateDidChange:(float)arg1;
- (void)_applyLoudnessInfo;
- (void)_handleUpdatedLikedState:(long long)arg1 forUserIdentity:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (long long)_persistedLikedState;
- (void)reevaluateType;
- (void)resolvePlaybackError:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (long long)albumStoreID;
- (id)copyrightText;
- (id)externalContentIdentifier;
- (_Bool)isLikedStateEnabled;
- (_Bool)supportsLikedState;
- (long long)storeItemInt64ID;
- (long long)storeSubscriptionAdamID;
- (void)setLoudnessInfoVolumeNormalization:(float)arg1;
- (_Bool)prefersSeekOverSkip;
- (_Bool)shouldPreventPlayback;
- (id)modelGenericObject;
- (_Bool)allowsAirPlayFromCloud;
- (_Bool)requiresLoadedAssetForAirPlayProperties;
- (id)storeFrontIdentifier;
- (id)storeAccountID;
- (id)useListeningHistory;
- (long long)leasePlaybackPreventionState;
- (id)leaseStatus;
- (CDUnknownBlockType)artworkCatalogBlock;
- (id)_radioStation;
- (_Bool)_shouldRememberBookmarkTime;
- (id)_bookmarkTime;
- (id)_storeUbiquitousIdentifier;
- (void)_contentTasteControllerDidChangeNotification:(id)arg1;
- (void)environmentMonitorDidChangeNetworkType:(id)arg1;
- (void)nowPlayingInfoCenter:(id)arg1 lyricsForContentItem:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_storeRequestContext;
- (CDStruct_4a9aa5a8)_timeoutValues;
- (void)_getSubscriptionLeasePropertiesWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)_allowsStreamingPlayback;
- (_Bool)_allowsAssetCaching;
- (id)_rtcReportingServiceIdentifierWithAssetURL:(id)arg1;
- (void)_allowsHighQualityMusicStreamingOnCellularDidChangeNotification:(id)arg1;
- (void)_applyPreferredPeakBitRateToPlayerItem:(id)arg1 withItemType:(long long)arg2;
- (void)_suzeLeaseSessionRenewDidFailNotification:(id)arg1;
- (void)_handlePlaybackFinishedTime:(double)arg1 didFinishByHittingEnd:(_Bool)arg2;
- (void)_updatePreventionStatusWithLeaseSession:(id)arg1;
- (void)_getUnverifiedSubscriptionLeaseSessionWithCompletion:(CDUnknownBlockType)arg1;
- (void)_updateBookmarkTime:(double)arg1 isCheckpoint:(_Bool)arg2;
- (void)_updateHasBeenPlayedWithElapsedTime:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_updateAutomaticSubscriptionLeaseRefresh;
- (unsigned long long)mpcReporting_itemType;
- (id)_isPrivateListeningEnabled;
- (void)_reloadTimedMetadataRequest;
- (void)_updateJingleTimedMetadata;
- (void)_invalidateContentItem;
- (void)_postInvalidationNotifications;
- (void)_timedMetadataResponseDidInvalidateNotification:(id)arg1;
- (id)_modelPlaybackPosition;
- (void)_subscriptionLeaseStatusDidChangeNotification:(id)arg1;
- (id)initWithGenericObject:(id)arg1 itemProperties:(id)arg2 playbackRequestEnvironment:(id)arg3 identityPropertySet:(id)arg4;
- (long long)mpcReporting_equivalencySourceAdamID;
- (id)mpcReporting_identityPropertiesLoader;
- (id)mpcReporting_jingleTimedMetadata;
- (id)mpcReporting_requestingBundleIdentifier;
- (id)mpcReporting_requestingBundleVersion;
- (_Bool)mpcReporting_shouldUseRelativeTimePositions;
- (_Bool)mpcReporting_shouldReportPlayEventsToStore;
- (id)mpcReporting_privateListeningEnabled;
- (id)mpcReporting_siriInitiated;
- (id)mpcReporting_trackInfo;

@end
