/*
 Image: /System/Library/PrivateFrameworks/SampleAnalysis.framework/SampleAnalysis
 */

#import <Foundation/NSObject.h>

@class NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, SABinaryLoadInfo, SABinaryLocator, SAFrame, SAMountStatusTracker, SASharedCache, SATask, SATimeRange, SATimestamp, SAWSUpdateDataStore;

@interface SASampleStore : NSObject

{
    NSMutableDictionary *_tasksByUniquePid;
    NSMutableDictionary *_tasksByPid;
    NSMutableArray *_sampleTimestamps;
    unsigned long long _numSamples;
    SATimestamp *_startTime;
    SATimestamp *_endTime;
    NSMutableArray *_hidEvents;
    NSMutableArray *_fanSpeeds;
    NSMutableArray *_kernelCaches;
    NSMutableArray *_sharedCaches;
    SASharedCache *_mostRecentNativeSharedCache;
    SAWSUpdateDataStore *_wsDataStore;
    SABinaryLocator *_binaryLocator;
    NSMutableSet *_pidsToTrack;
    int _targetProcessId;
    unsigned long long _targetThreadId;
    struct mach_timebase_info _machTimebase;
    struct _CSArchitecture _arch;
    unsigned int _threadPolicyVersion;
    unsigned long long _previousSampleTimestamp;
    unsigned int _previousStackshotBufferSize;
    _Bool _sampleOnlyMainThreads;
    _Bool _nextSampleIsFirstSamplingAllThreads;
    _Bool _stackshotsOnlyIncludeSpecificProcesses;
    _Bool _nextSampleIsFirstSamplingAllProcesses;
    _Bool _keepStateBetweenSampleIndexes;
    _Bool _haveKPerfSched;
    double _sampleIntervalLimit;
    NSMutableArray *_namesToUseDsymForUUID;
    NSMutableArray *_idsToUseDsymForUUID;
    _Bool _bulkSymbolicationFailed;
    unsigned long long _numMicrostackshotsSkippedDueToMissingLoadInfos;
    unsigned long long _targetHIDEventMachAbs;
    _Bool _keepMicrostackshotsWithoutLoadInfo;
    _Bool _sanitizePaths;
    _Bool _omitSensitiveStrings;
    _Bool _shouldGatherKextStat;
    unsigned int _workQueueSoftThreadLimit;
    unsigned int _workQueueHardThreadLimit;
    unsigned int _numActiveCPUs;
    unsigned long long _dataSource;
    unsigned long long _dataStyle;
    double _attemptedSamplingInterval;
    NSString *_reason;
    double _lastWakeTime;
    SAMountStatusTracker *_mountStatusTracker;
    SAFrame *_cpuSignalHandlerStackLeafKernelFrame;
    unsigned long long _dataGatheringOptions;
    SATimestamp *_timeWhenTransitionedToSamplingAllThreads;
    SATimestamp *_timeWhenTransitionedToSamplingAllProcesses;
    NSString *_kextStat;
    NSString *_kernelVersion;
    NSString *_osProductName;
    NSString *_osProductVersion;
    NSString *_osBuildVersion;
    NSString *_hardwareModel;
    NSString *_bootArgs;
    unsigned long long _targetHIDEventEndMachAbs;
    SATask *_targetProcess;
    double _cpuUsed;
    double _cpuDuration;
    double _cpuLimit;
    double _cpuLimitDuration;
    unsigned long long _numWakeups;
    double _wakeupsDuration;
    unsigned long long _numWakeupsLimit;
    double _wakeupsLimitDuration;
    unsigned long long _bytesWritten;
    double _writeDuration;
    unsigned long long _bytesWrittenLimit;
    double _writeLimitDuration;
    NSString *_event;
    NSString *_eventNote;
    SATimeRange *_eventTimeRange;
    NSString *_signature;
    NSString *_actionTaken;
    double _extraDuration;
    NSString *_durationNote;
    NSString *_stepsNote;
    NSString *_targetProcessBundleVersion;
    NSString *_targetProcessBundleShortVersion;
    NSString *_targetProcessBundleBuildVersion;
    NSString *_targetProcessBundleProjectName;
    NSString *_targetProcessBundleSourceVersion;
    NSString *_targetProcessBundleProductBuildVersion;
    NSString *_targetProcessBundleId;
    NSString *_targetProcessCommerceAppID;
    NSString *_targetProcessCommerceExternalID;
    NSString *_targetProcessVendorID;
    SABinaryLoadInfo *_prelinkedKernelLoadInfo;
}

@property _Bool keepStateBetweenSampleIndexes;
@property double kPerfPETSampleIntervalLimit;
@property _Bool haveKPerfSched;
@property unsigned long long dataSource;
@property unsigned long long dataStyle;
@property struct _CSArchitecture arch;
@property struct mach_timebase_info machTimebase;
@property unsigned long long numSamples;
@property (retain) SATimestamp *startTime;
@property (retain) SATimestamp *endTime;
@property (retain) SABinaryLoadInfo *prelinkedKernelLoadInfo;
@property double attemptedSamplingInterval;
@property (readonly) NSDictionary *tasksByUniquePid;
@property (readonly) NSDictionary *tasksByPid;
@property (readonly) NSArray *sampleTimestamps;
@property (copy) NSString *reason;
@property (readonly) double lastWakeTime;
@property (readonly) NSArray *kernelCaches;
@property (readonly) NSArray *sharedCaches;
@property (readonly) SAMountStatusTracker *mountStatusTracker;
@property (readonly) NSArray *hidEvents;
@property _Bool keepMicrostackshotsWithoutLoadInfo;
@property (readonly) SAFrame *cpuSignalHandlerStackLeafKernelFrame;
@property unsigned long long dataGatheringOptions;
@property _Bool sampleOnlyMainThreads;
@property (readonly) SATimestamp *timeWhenTransitionedToSamplingAllThreads;
@property _Bool stackshotsOnlyIncludeSpecificProcesses;
@property (readonly) SATimestamp *timeWhenTransitionedToSamplingAllProcesses;
@property _Bool sanitizePaths;
@property _Bool omitSensitiveStrings;
@property _Bool shouldGatherKextStat;
@property (copy, readonly) NSString *kextStat;
@property (readonly) NSString *kernelVersion;
@property (copy) NSString *osProductName;
@property (copy) NSString *osProductVersion;
@property (copy) NSString *osBuildVersion;
@property (copy) NSString *machineArchitecture;
@property (readonly) unsigned int workQueueSoftThreadLimit;
@property (readonly) unsigned int workQueueHardThreadLimit;
@property (copy) NSString *hardwareModel;
@property unsigned int numActiveCPUs;
@property (copy) NSString *bootArgs;
@property int targetProcessId;
@property unsigned long long targetThreadId;
@property unsigned long long targetHIDEventMachAbs;
@property unsigned long long targetHIDEventEndMachAbs;
@property (readonly) SATask *targetProcess;
@property double cpuUsed;
@property double cpuDuration;
@property double cpuLimit;
@property double cpuLimitDuration;
@property unsigned long long numWakeups;
@property double wakeupsDuration;
@property unsigned long long numWakeupsLimit;
@property double wakeupsLimitDuration;
@property unsigned long long bytesWritten;
@property double writeDuration;
@property unsigned long long bytesWrittenLimit;
@property double writeLimitDuration;
@property (copy) NSString *event;
@property (copy) NSString *eventNote;
@property (copy) SATimeRange *eventTimeRange;
@property (copy) NSString *signature;
@property (copy) NSString *actionTaken;
@property double extraDuration;
@property (copy) NSString *durationNote;
@property (copy) NSString *stepsNote;
@property (readonly) NSString *targetProcessName;
@property (readonly) NSString *targetProcessAbsolutePath;
@property (readonly) NSString *targetProcessBundleName;
@property (readonly) NSString *targetProcessBundleVersion;
@property (readonly) NSString *targetProcessBundleShortVersion;
@property (readonly) NSString *targetProcessBundleBuildVersion;
@property (readonly) NSString *targetProcessBundleProjectName;
@property (readonly) NSString *targetProcessBundleSourceVersion;
@property (readonly) NSString *targetProcessBundleProductBuildVersion;
@property (readonly) NSString *targetProcessBundleId;
@property (readonly) NSString *targetProcessCommerceAppID;
@property (readonly) NSString *targetProcessCommerceExternalID;
@property (readonly) NSString *targetProcessVendorID;

+ (_Bool)supportsSecureCoding;
+ (_Bool)canOpenFileAsKTraceFile:(const char *)arg1 errorOut:(id *)arg2;
+ (id)sampleStoreForSpindumpFile:(const char *)arg1;

- (id)init;
- (void)dealloc;
- (_Bool)isEmpty;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)addTask:(id)arg1;
- (void)addTimestamp:(id)arg1;
- (void)findTargetProcess;
- (id)taskWithPid:(int)arg1 atTimestamp:(id)arg2;
- (id)lastTaskWithPid:(int)arg1;
- (id)taskWithUniquePid:(unsigned long long)arg1 atTimestamp:(id)arg2;
- (id)lastTaskWithUniquePid:(unsigned long long)arg1;
- (void)gatherExtraInfoForTargetProcess:(id)arg1;
- (void)findTargetProcessInTimeRange:(id)arg1;
- (id)taskWithPid:(int)arg1 orTid:(unsigned long long)arg2 atTimestamp:(id)arg3;
- (id)lastTaskWithPid:(int)arg1 orTid:(unsigned long long)arg2;
- (void)gatherKextStat;
- (void)gatherKernelVersion;
- (void)gatherOsVersions;
- (void)gatherMachineArchitecture;
- (void)gatherWorkQueueSoftThreadLimit;
- (void)gatherWorkQueueHardThreadLimit;
- (void)gatherHardwareModel;
- (void)gatherNumActiveCPUs;
- (void)gatherBootArgs;
- (id)lastTaskWithUniquePid:(unsigned long long)arg1 onOrBeforeTimestamp:(id)arg2;
- (id)lastTaskWithPid:(int)arg1 onOrBeforeTimestamp:(id)arg2;
- (id)_lastTaskOnOrBeforeTimestamp:(id)arg1 inTasks:(id)arg2;
- (id)firstTaskWithUniquePid:(unsigned long long)arg1 onOrAfterTimestamp:(id)arg2;
- (id)firstTaskWithPid:(int)arg1 onOrAfterTimestamp:(id)arg2;
- (id)_firstTaskOnOrAfterTimestamp:(id)arg1 inTasks:(id)arg2;
- (void)enumerateTasks:(CDUnknownBlockType)arg1;
- (id)firstTaskWithPid:(int)arg1;
- (unsigned long long)_addKCDataStackshot:(id)arg1 timestamp:(id)arg2 sampleIndex:(unsigned long long)arg3 shouldSkipSampleOut:(_Bool *)arg4 backfillKPerf:(_Bool)arg5 addStaticInfoOnly:(_Bool)arg6;
- (unsigned long long)addKCDataStackshot:(id)arg1 returningTimestamp:(id *)arg2;
- (id)taskForKCDataTask:(const struct task_snapshot_v2 *)arg1 loadInfos:(const struct dyld_uuid_info_64 *)arg2 numLoadInfos:(unsigned int)arg3 machineArchitecture:(struct _CSArchitecture)arg4 timestamp:(id)arg5 sharedCache:(id)arg6 loadInfosIsPartial:(_Bool)arg7;
- (void)backfillTask:(id)arg1 lastSampleIndex:(unsigned long long)arg2 timestamp:(id)arg3 haveSnap:(_Bool)arg4 terminatedThreadsUserTimeInNs:(unsigned long long)arg5 terminatedThreadsSystemTimeInNs:(unsigned long long)arg6 terminatedThreadsCycles:(unsigned long long)arg7 terminatedThreadsInstructions:(unsigned long long)arg8 suspendCount:(unsigned int)arg9 pageins:(unsigned int)arg10 isDarwinBG:(_Bool)arg11 isForeground:(_Bool)arg12 isBoosted:(_Bool)arg13 isDirty:(_Bool)arg14 haveWQFlags:(_Bool)arg15 wqExceededTotalThreadLimit:(_Bool)arg16 wqExceededConstrainedThreadLimit:(_Bool)arg17 haveMem:(_Bool)arg18 taskSizeInBytes:(unsigned long long)arg19 haveLatencyQos:(_Bool)arg20 latencyQos:(unsigned int)arg21;
- (id)taskForKCDataDeltaTask:(const struct task_delta_snapshot_v2 *)arg1 loadInfos:(const struct dyld_uuid_info_64 *)arg2 numLoadInfos:(unsigned int)arg3 machineArchitecture:(struct _CSArchitecture)arg4 timestamp:(id)arg5 sharedCache:(id)arg6 loadInfosIsPartial:(_Bool)arg7;
- (void)backfillThread:(id)arg1 inTask:(id)arg2 lastSampleIndex:(unsigned long long)arg3 timestamp:(id)arg4 haveName:(_Bool)arg5 name:(const char *)arg6 haveDispatchQueueId:(_Bool)arg7 dispatchQueueId:(unsigned long long)arg8 dispatchQueueLabel:(const char *)arg9 leafKernelFrame:(id)arg10 haveUserStack:(_Bool)arg11 leafUserFrame:(id)arg12 haveSched:(_Bool)arg13 systemCpuTimeNs:(unsigned long long)arg14 userCpuTimeNs:(unsigned long long)arg15 basePriority:(int)arg16 scheduledPriority:(int)arg17 state:(unsigned int)arg18 threadQos:(unsigned char)arg19 threadRequestedQos:(unsigned char)arg20 threadRequestedQosOverride:(unsigned char)arg21 threadQosPromote:(unsigned char)arg22 threadQosIpcOverride:(unsigned char)arg23 threadQosSyncIpcOverride:(unsigned char)arg24 haveCycIns:(_Bool)arg25 instructions:(unsigned long long)arg26 cycles:(unsigned long long)arg27 haveSnap:(_Bool)arg28 ioTier:(unsigned char)arg29 isIOPassive:(_Bool)arg30 isDarwinBG:(_Bool)arg31 isSuspended:(_Bool)arg32 isGlobalForcedIdle:(_Bool)arg33 isIdleWorkQueue:(_Bool)arg34 lastMadeRunnableTime:(id)arg35 isOnCore:(_Bool)arg36;
- (unsigned long long)addKCDataThreadV4:(const struct thread_snapshot_v4 *)arg1 threadV2:(const struct thread_snapshot_v2 *)arg2 deltaThreadV3:(const struct thread_delta_snapshot_v3 *)arg3 deltaThreadV2:(const struct thread_delta_snapshot_v2 *)arg4 timestamp:(id)arg5 sampleIndex:(unsigned long long)arg6 stack:(id)arg7 threadName:(const char *)arg8 dispatchQueueLabel:(const char *)arg9 waitInfo:(const struct stackshot_thread_waitinfo *)arg10 turnstileInfo:(const struct stackshot_thread_turnstileinfo *)arg11 instructionCycles:(const struct instrs_cycles_snapshot *)arg12 task:(id)arg13 kernelTask:(id)arg14 taskIsSuspended:(_Bool)arg15;
- (long long)_addMicrostackshotFromData:(id)arg1 ofTypes:(int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6;
- (id)taskForMicrostackshotTask:(const struct task_snapshot *)arg1 loadInfos:(const struct dyld_uuid_info_64 *)arg2 numLoadInfos:(unsigned int)arg3 machineArchitecture:(struct _CSArchitecture)arg4 sharedCache:(id)arg5 loadInfosIsPartial:(_Bool)arg6;
- (void)addSharedCache:(id)arg1;
- (void)addHidEvent:(id)arg1;
- (void)removeAllData;
- (void)useDsymForUUIDFor:(id)arg1;
- (id)fanSpeedClosestToTimestamp:(id)arg1;
- (_Bool)setTargetProcessWithHint:(id)arg1;
- (_Bool)cacheLoadInfoForProcess:(int)arg1;
- (void)addAuxiliaryData:(id)arg1;
- (void)printFrameRateReportWithStartSampleIndex:(unsigned long long)arg1 endSampleIndex:(unsigned long long)arg2 startDisplayIndex:(unsigned long long)arg3 toStream:(id)arg4;
- (void)startingSamplingLiveSystem;
- (void)finishedSamplingLiveSystem;
- (void)postprocess;
- (id)firstTaskWithUniquePid:(unsigned long long)arg1;
- (id)firstTaskWithPid:(int)arg1 orTid:(unsigned long long)arg2;
- (id)initForLiveSampling;
- (id)initForFileParsing;
- (unsigned long long)indexOfFirstSampleOnOrAfterTimestamp:(id)arg1;
- (unsigned long long)indexOfLastSampleOnOrBeforeTimestamp:(id)arg1;
- (void)addProcessInfoFromTailspin:(id)arg1;
- (unsigned long long)addKCDataStackshots:(id)arg1 createSeparateSamplePerStackshot:(_Bool)arg2;
- (unsigned long long)addKCDataStackshot:(id)arg1;
- (int)addMicrostackshotsFromFile:(id)arg1 ofTypes:(int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6;
- (long long)addMicrostackshotsFromData:(id)arg1 ofTypes:(int)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6;
- (_Bool)findCpuSignalHandlerStackLeafKernelFrame;
- (void)symbolicate;
- (_Bool)initWithPAStyleCoder:(id)arg1;
- (id)taskForPid:(int)arg1 andName:(const char *)arg2 didExecAtTimestamp:(id)arg3 sharedCache:(id)arg4;
- (void)kperfSample:(struct trace_point *)arg1 state:(id)arg2;
- (void)kperfTimerFire:(struct trace_point *)arg1 state:(id)arg2;
- (void)kperfRecord:(struct kpdecode_record *)arg1 state:(id)arg2 frameIterator:(id)arg3 systemSharedCache:(id)arg4 nonSystemSharedCache:(id)arg5 pidsUsingNonSystemSharedCache:(id)arg6;
- (void)kperfNewThread:(struct trace_point *)arg1 state:(id)arg2;
- (void)kperfExecString:(struct trace_point *)arg1 state:(id)arg2;
- (void)kperfLostEvents:(struct trace_point *)arg1 state:(id)arg2;
- (int)_addKPerfDataFromKTraceSession:(struct ktrace_session *)arg1 beforeMachAbsTime:(unsigned long long)arg2 systemSharedCache:(id)arg3 nonSystemSharedCache:(id)arg4 pidsUsingNonSystemSharedCache:(id)arg5;
- (id)tidToPidDict;
- (id)tidsForPid:(int)arg1;
- (id)idleThreadSet;
- (_Bool)parseKTraceFile:(const char *)arg1 warningsOut:(id)arg2 errorOut:(id *)arg3;
- (id)binaryFormat;
- (_Bool)saveBinaryFormatToStream:(struct __sFILE *)arg1;

@end
