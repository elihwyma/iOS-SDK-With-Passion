/*
 Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import <Foundation/NSObject.h>

@class ML3AccountCacheDatabase, ML3Container, ML3DatabaseConnectionPool, ML3DatabaseMetadata, ML3LibraryNotificationManager, ML3MusicLibraryResourcesManager, NSArray, NSDate, NSLock, NSMutableDictionary, NSNumber, NSString;

@protocol ML3MusicLibraryDelegate, OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject

{
    NSString *_libraryUID;
    NSLock *_libraryUIDLock;
    NSString *_syncLibraryUID;
    ML3AccountCacheDatabase *_accountCacheDatabase;
    NSMutableDictionary *_optimizedLibraryEntityFilterPredicatesByEntityClass;
    NSMutableDictionary *_optimizedLibraryContainerFilterPredicatesByContainerClass;
    NSMutableDictionary *_optimizedLibraryPublicEntityFilterPredicatesByEntityClass;
    NSMutableDictionary *_optimizedLibraryPublicContainerFilterPredicatesByContainerClass;
    _Bool _isHomeSharingLibraryLoaded;
    _Bool _isHomeSharingLibrary;
    _Bool _usingSharedLibraryPath;
    _Bool _readOnly;
    ML3DatabaseConnectionPool *_connectionPool;
    NSString *_databasePath;
    struct iPhoneSortKeyBuilder *_sortKeyBuilder;
    ML3MusicLibraryResourcesManager *_resourcesManager;
    ML3LibraryNotificationManager *_notificationManager;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSString *_accountDSID;
    id <ML3MusicLibraryDelegate> _delegate;
    NSArray *_libraryEntityFilterPredicates;
    NSArray *_libraryContainerFilterPredicates;
    NSArray *_libraryPublicEntityFilterPredicates;
    NSArray *_libraryPublicContainerFilterPredicates;
}

@property (copy, nonatomic, readonly) NSString *artworkDirectory;
@property (copy, nonatomic, readonly) NSString *originalArtworkDirectory;
@property (copy, nonatomic, readonly) NSString *rootArtworkCacheDirectory;
@property (nonatomic, readonly) _Bool supportsUbiquitousPlaybackPositions;
@property (copy, nonatomic) NSNumber *sagaAccountID;
@property (copy, nonatomic) NSNumber *sagaLastKnownActiveLockerAccountDSID;
@property (copy, nonatomic) NSDate *sagaLastGeniusUpdateDate;
@property (copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property (copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property (copy, nonatomic) NSString *sagaCloudLibraryCUID;
@property (copy, nonatomic) NSString *sagaCloudLibraryTroveID;
@property (nonatomic) long long sagaDatabaseUserVersion;
@property (nonatomic) long long sagaCloudAddToPlaylistBehavior;
@property (nonatomic) _Bool sagaNeedsFullUpdateAfterNextUpdate;
@property (nonatomic) _Bool sagaPrefersToMergeWithCloudLibrary;
@property (copy, nonatomic) NSString *storefrontIdentifier;
@property (copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property (copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property (nonatomic) long long preferredVideoQuality;
@property (nonatomic) long long sagaOnDiskDatabaseRevision;
@property (copy, nonatomic) NSNumber *jaliscoAccountID;
@property (copy, nonatomic) NSDate *jaliscoLastGeniusUpdateDate;
@property (copy, nonatomic) NSString *jaliscoLastSupportedMediaKinds;
@property (nonatomic, readonly) NSArray *jaliscoLastExcludedMediaKinds;
@property (nonatomic) _Bool jaliscoHasCloudGeniusData;
@property (nonatomic) _Bool jaliscoIsMusicGeniusUserEnabled;
@property (nonatomic) _Bool jaliscoNeedsUpdateForTokens;
@property (copy, nonatomic) NSDate *jaliscoLastLibraryUpdateTime;
@property (nonatomic) long long jaliscoOnDiskDatabaseRevision;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (retain, nonatomic) ML3LibraryNotificationManager *notificationManager;
@property (nonatomic, readonly) struct iPhoneSortKeyBuilder *sortKeyBuilder;
@property (nonatomic, getter=isUsingSharedLibraryPath) _Bool usingSharedLibraryPath;
@property (nonatomic, getter=isReadOnly) _Bool readOnly;
@property (nonatomic, readonly) ML3MusicLibraryResourcesManager *resourcesManager;
@property (weak, nonatomic) id <ML3MusicLibraryDelegate> delegate;
@property (nonatomic, readonly) ML3DatabaseConnectionPool *connectionPool;
@property (nonatomic, readonly) NSString *databasePath;
@property (nonatomic, readonly) NSString *libraryUID;
@property (nonatomic, readonly) long long currentRevision;
@property (nonatomic, readonly) long long currentContentRevision;
@property (nonatomic) long long syncGenerationID;
@property (nonatomic, readonly) long long autoFilledTracksTotalSize;
@property (nonatomic) NSString *syncLibraryID;
@property (nonatomic, readonly, getter=isLibraryEmpty) _Bool libraryEmpty;
@property (nonatomic, readonly) ML3Container *currentDevicePurchasesPlaylist;
@property (nonatomic, readonly) ML3Container *currentDevicePlaybackHistoryPlaylist;
@property (nonatomic, readonly) ML3DatabaseMetadata *databaseInfo;
@property (nonatomic, readonly) NSArray *localizedSectionIndexTitles;
@property (nonatomic, readonly) NSArray *preferredAudioTracks;
@property (nonatomic, readonly) NSArray *preferredSubtitleTracks;
@property (nonatomic) _Bool isHomeSharingLibrary;
@property (nonatomic, readonly) _Bool mediaRestrictionEnabled;
@property (nonatomic) _Bool downloadOnAddToLibrary;
@property (retain, nonatomic) NSArray *libraryEntityFilterPredicates;
@property (retain, nonatomic) NSArray *libraryContainerFilterPredicates;
@property (retain, nonatomic) NSArray *libraryPublicEntityFilterPredicates;
@property (retain, nonatomic) NSArray *libraryPublicContainerFilterPredicates;
@property (nonatomic, readonly) _Bool hasUserPlaylists;
@property (nonatomic, readonly) _Bool hasAddedToLibraryAppleMusicContent;
@property (nonatomic, readonly) _Bool hasUserPlaylistsContainingAppleMusicContent;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;
@property (copy, nonatomic, readonly) NSString *accountDSID;

+ (_Bool)supportsSecureCoding;
+ (id)sectionIndexTitles;
+ (_Bool)deviceSupportsASTC;
+ (id)autoupdatingSharedLibrary;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)globalSerialQueue;
+ (id)musicLibraryForUserAccount:(id)arg1;
+ (id)allLibraries;
+ (long long)devicePreferredImageFormat;
+ (id)sharedLibrary;
+ (id)libraryContainerPathByAppendingPathComponent:(id)arg1;
+ (_Bool)deviceSupportsMultipleLibraries;
+ (_Bool)updateTrackIntegrityOnConnection:(id)arg1;
+ (id)musicLibraryPerUserDSID;
+ (id)allLibraryContainerPaths;
+ (id)autoupdatingSharedLibraryPath;
+ (void)setAutoupdatingSharedLibraryPath:(id)arg1;
+ (id)distributedToLocalNotificationMapping;
+ (id)widthLimitedSetValuesQueue;
+ (id)indexSchemaSQL;
+ (id)assistantSyncDataChangedNotificationName;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;
+ (id)libraryContainerPath;
+ (_Bool)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (id)allTables;
+ (_Bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (id)artworkRelativePathFromToken:(id)arg1;
+ (id)artworkTokenForChapterWithItemPID:(long long)arg1 retrievalTime:(double)arg2;
+ (id)mediaFolderPath;
+ (id)registeredLibraries;
+ (id)sharedLibraryDatabasePath;
+ (void)setSharedLibraryDatabasePath:(id)arg1;
+ (void)disableSharedLibrary;
+ (void)disableAutomaticDatabaseValidation;
+ (void)enableAutomaticDatabaseValidation;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (void)enumerateSortMapTablesUsingBlock:(CDUnknownBlockType)arg1;
+ (void)removeOrphanedTracks;
+ (int)userVersionUsingConnection:(id)arg1;
+ (id)allPragmaSQL;
+ (id)allSchemaSQL;
+ (id)allTriggersSQL;
+ (id)sortMapNewSchemaSQL;
+ (id)itemNewSchemaSQL;
+ (id)itemIndexSchemaSQL;
+ (_Bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;
+ (id)libraryContainerRelativePath:(id)arg1;
+ (id)pathForBaseLocationPath:(long long)arg1;
+ (id)artworkTokenForArtistHeroURL:(id)arg1;
+ (long long)artworkSourceTypeForTrackSource:(int)arg1;
+ (id)storeLinkSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)libraryPathForContainerPath:(id)arg1;
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;
+ (id)jaliscoGetSortedMediaKinds:(id)arg1;

- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)pathForResourceFileOrFolder:(int)arg1;
- (void)notifyDisplayValuesPropertyDidChange;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (_Bool)isCurrentThreadInTransaction;
- (id)valueForDatabaseProperty:(id)arg1;
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (_Bool)deleteDatabaseProperty:(id)arg1;
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5;
- (_Bool)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (_Bool)recordPlayEventForAlbumPersistentID:(long long)arg1;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 inUsersLibrary:(_Bool)arg5 usingBlock:(CDUnknownBlockType)arg6;
- (void)performDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;
- (void)databaseConnectionAllowingWrites:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;
- (_Bool)recordPlayEventForContainerPersistentID:(long long)arg1;
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)retrieveBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (_Bool)isArtworkTokenAvailable:(id)arg1;
- (void)clearSagaCloudAccountID;
- (void)clearSagaLastItemPlayDataUploadDate;
- (void)clearSagaLastPlaylistPlayDataUploadDate;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(_Bool)arg3;
- (void)enumerateArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)libraryContainerPathByAppendingPathComponent:(id)arg1;
- (id)checkoutWriterConnection;
- (void)notifyEntitiesAddedOrRemoved;
- (void)notifyContentsDidChange;
- (void)checkInDatabaseConnection:(id)arg1;
- (void)performAsyncDatabaseWriteTransactionWithBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)notifyNonContentsPropertyDidChange;
- (void)notifyInvisiblePropertyDidChange;
- (id)initWithResourcesManager:(id)arg1;
- (id)initWithPath:(id)arg1 readOnly:(_Bool)arg2 populateUnitTestTablesBlock:(CDUnknownBlockType)arg3;
- (void)_setupNotificationManager;
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;
- (void)_loggingSettingsDidChangeNotification:(id)arg1;
- (void)_libraryPathDidChangeNotification:(id)arg1;
- (void)_onQueue_updateDatabaseConnectionsProfilingLevel;
- (_Bool)validateDatabase;
- (_Bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;
- (id)checkoutReaderConnection;
- (_Bool)_clearAllRowsFromTables:(id)arg1;
- (_Bool)cleanupArtworkWithOptions:(unsigned long long)arg1;
- (void)accessSortKeyBuilder:(CDUnknownBlockType)arg1;
- (unsigned long long)unknownSectionIndex;
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (id)libraryContainerPath;
- (_Bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1;
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;
- (void)_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:(id)arg1 toDestinationURL:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (_Bool)_updateBestArtworkTokensForArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 preserveExistingAvailableToken:(_Bool)arg4 usingConnection:(id)arg5;
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 usingConnection:(id)arg5;
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4 usingConnection:(id)arg5;
- (id)_allArtworkVariantDirectories;
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 usingConnection:(id)arg6;
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 usingConnection:(id)arg5;
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(_Bool)arg5 usingConnection:(id)arg6;
- (_Bool)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(_Bool)arg5 usingConnection:(id)arg6;
- (_Bool)cleanupArtworkWithOptions:(unsigned long long)arg1 usingConnection:(id)arg2;
- (_Bool)_removeOrphanedArtworkTokensUsingConnection:(id)arg1;
- (_Bool)_removeOrphanedArtworkMetadataUsingConnection:(id)arg1;
- (_Bool)_removeOrphanedArtworkAssetsUsingConnection:(id)arg1;
- (_Bool)_removeInvalidAvailableArtworkTokensUsingConnection:(id)arg1;
- (void)removeOrphanedTracksOnlyInCaches:(_Bool)arg1;
- (int)currentDatabaseVersion;
- (_Bool)hasPresignedValidity;
- (_Bool)verifyPresignedValidity;
- (void)updateTrackIntegrity;
- (void)deletePresignedValidity;
- (_Bool)isArtworkFetchableForPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4;
- (id)artworkCacheDirectoryForSize:(struct CGSize)arg1;
- (_Bool)_shouldProcessAccountChanges;
- (_Bool)_prepareForAccountChange:(id *)arg1;
- (void)_completeAccountChangeWithPath:(id)arg1;
- (void)_closeAndLockCurrentDatabaseConnections;
- (void)_tearDownNotificationManager;
- (void)connectionWillOpenDatabase:(id)arg1;
- (void)connectionDidOpenDatabase:(id)arg1;
- (void)connectionWillCloseDatabase:(id)arg1;
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(_Bool)arg2;
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;
- (void)setLibraryUID:(id)arg1;
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;
- (void)reconnectToDatabase;
- (void)performReadOnlyDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)automaticDatabaseValidationDisabled;
- (_Bool)createIndexes;
- (_Bool)emptyAllTables;
- (_Bool)clearAllGeniusData;
- (_Bool)clearAllCloudKVSData;
- (id)accountCacheDatabase;
- (id)groupingKeyForString:(id)arg1;
- (id)groupingKeysForStrings:(id)arg1;
- (void)notifySectionsDidChange;
- (void)notifyCloudLibraryAvailabilityDidChange;
- (void)notifyLibraryImportDidFinish;
- (void)notifyKeepLocalStateDidChange;
- (void)saveTrackMetadata;
- (void)savePlaylists;
- (_Bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;
- (_Bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;
- (_Bool)updateSortMap;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (_Bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;
- (void)removeSource:(int)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)removeSource:(int)arg1 usingConnection:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)removePlaylistsWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;
- (_Bool)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (_Bool)removeArtworkAssetWithToken:(id)arg1;
- (_Bool)deleteArtworkToken:(id)arg1;
- (void)migrateExistingArtworkToken:(id)arg1 newArtworkToken:(id)arg2 newSourceType:(long long)arg3;
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4;
- (void)removeTombstonesForDeletedItems;
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;
- (void)migratePresignedValidity;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (void)performDatabasePathChange:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)emergencyDisconnectWithCompletion:(CDUnknownBlockType)arg1;
- (void)terminateForFailureToPerformDatabasePathChange;
- (CDStruct_912cb5d2)nameOrderForString:(id)arg1;
- (long long)syncIdFromMultiverseId:(id)arg1;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (_Bool)hasOriginalArtworkForRelativePath:(id)arg1;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(_Bool)arg5;
- (_Bool)repairAlbumArtistRelationshipsWithConnection:(id)arg1;
- (_Bool)_validateDatabaseUsingConnection:(id)arg1 error:(id *)arg2;
- (_Bool)coerceValidDatabaseWithError:(id *)arg1;
- (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;
- (_Bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;
- (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceRebuild:(_Bool)arg2 forceUpdateOriginals:(_Bool)arg3;
- (id)_systemUnicodeVersionData;
- (_Bool)coalesceMismatchedCollectionsUsingConnection:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(_Bool *)arg2;
- (_Bool)_coalesceMismatchedCollectionClass:(Class)arg1 usingConnection:(id)arg2;
- (_Bool)updateSortMapOnConnection:(id)arg1;
- (_Bool)validateSortMapUnicodeVersionOnConnection:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (id)genreForGenre:(id)arg1;
- (_Bool)updateSystemPlaylistNamesForCurrentLanguage;
- (id)composerForComposerName:(id)arg1;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (id)libraryContainerRelativePath:(id)arg1;
- (_Bool)autoFilledTracksArePurgeable;
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2;
- (long long)_databaseFileFreeSpace;
- (_Bool)shouldOptimizeStorage;
- (unsigned long long)_managedPurgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (long long)_purgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2;
- (long long)_purgeableArtworkTotalSizeWithUrgency:(unsigned long long)arg1;
- (long long)_clearAllCloudAssets;
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(_Bool)arg3;
- (long long)_clearOrphanedAssetsOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)_clearDatabaseFileFreeSpace;
- (unsigned long long)_managedClearPurgeableTracksOfAmount:(unsigned long long)arg1 urgency:(unsigned long long)arg2;
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(_Bool)arg3;
- (long long)_clearPurgeableArtworkOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeCloudAssets:(_Bool)arg3 includeAutoFilledTracks:(_Bool)arg4;
- (id)pathForBaseLocationPath:(long long)arg1;
- (long long)_artworkTotalSize;
- (void)_enumeratePurgeableStreamedTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumeratePurgeablePodcastEpisodesForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)_nonPurgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;
- (id)_purgeableItemsPredicateSQLWithUrgency:(unsigned long long)arg1;
- (long long)minimumPurgeableStorage;
- (unsigned long long)_totalSizeForAllNonCacheTracks;
- (id)_purgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2 includeCloudAssets:(_Bool)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2 includeCloudAssets:(_Bool)arg3;
- (_Bool)_shouldPurgeKeepLocalTracksForUrgency:(unsigned long long)arg1;
- (id)_allKeepLocalPlaylistTracks;
- (id)_notInKeepLocalCollectionPredicate;
- (long long)_cloudAssetsTotalSize;
- (long long)clearAllRemovedTracks;
- (void)setAutoFilledTracksArePurgeable:(_Bool)arg1;
- (void)setShouldOptimizeStorage:(_Bool)arg1;
- (void)setMinimumPurgeableStorage:(long long)arg1;
- (id)artworkCacheDirectoryForEffect:(id)arg1;
- (id)uppService;
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;
- (void)clearSagaLastGeniusUpdateDate;
- (void)clearSagaCloudLibraryCUID;
- (void)clearSagaCloudLibraryTroveID;
- (void)clearSagaPrefersToMergeWithCloudLibrary;
- (void)clearSagaCloudAddToPlaylistBehavior;
- (_Bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id *)arg2;
- (void)clearJaliscoLastExcludedMediaKinds;
- (void)clearJaliscoAccountID;
- (void)clearJaliscoLastGeniusUpdateDate;
- (void)sortJaliscoLastSupportedMediaKinds;
- (void)updateJaliscoExcludedMediaKindsWith:(id)arg1 excludingMediaKindsInSet:(_Bool)arg2;

@end
