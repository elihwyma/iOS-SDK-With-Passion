/*
 Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

#import <Foundation/NSObject.h>

@class BRCAccountWaitOperation, BRCAnalyticsReporter, BRCApplyScheduler, BRCClientState, BRCContainerScheduler, BRCDeadlineScheduler, BRCDiskSpaceReclaimer, BRCDownloadTrackers, BRCFSDownloader, BRCFSReader, BRCFSUploader, BRCFSWriter, BRCFairScheduler, BRCGlobalProgress, BRCItemTransmogrifier, BRCNotificationManager, BRCPQLConnection, BRCPowerLogReporter, BRCRecentsEnumerator, BRCServerPersistedState, BRCStageRegistry, BRCSyncUpScheduler, BRCThrottle, BRCUserNotification, BRCVolume, NSHashTable, NSMutableDictionary, NSMutableSet, NSString, NSURL, br_pacer;

@protocol OS_dispatch_queue, OS_dispatch_source;

@interface BRCAccountSession : NSObject

{
    NSMutableDictionary *_syncContexts;
    BRCDeadlineScheduler *_defaultScheduler;
    NSURL *_dbURL;
    NSObject<OS_dispatch_source> *_dbWatcher;
    NSObject<OS_dispatch_queue> *_dbWatcherQueue;
    NSObject<OS_dispatch_queue> *_dbCorruptionQueue;
    NSObject<OS_dispatch_queue> *_clientTruthWorkloop;
    NSObject<OS_dispatch_queue> *_serverTruthWorkloop;
    NSObject<OS_dispatch_queue> *_readOnlyWorkloop;
    int _cloudDocsFD;
    CDUnknownBlockType _dbProfilingHook;
    NSString *_databaseID;
    NSHashTable *_miscOperations;
    BRCPQLConnection *_clientDB;
    BRCPQLConnection *_serverDB;
    BRCPQLConnection *_readOnlyDB;
    BRCPQLConnection *_expensiveReadOnlyDB;
    BRCClientState *_clientState;
    BRCServerPersistedState *_serverState;
    struct brc_mutex _zonesLock;
    NSMutableDictionary *_libraryRowIDsByMangledID;
    NSMutableDictionary *_appLibrariesByRowID;
    NSMutableDictionary *_serverZonesByZoneRowID;
    NSMutableDictionary *_sharedServerZonesByMangledID;
    NSMutableDictionary *_sharedClientZonesByMangledID;
    NSMutableDictionary *_privateServerZonesByID;
    NSMutableDictionary *_privateClientZonesByID;
    NSString *_accountID;
    NSMutableSet *_xpcClients;
    _Bool _resumed;
    BRCGlobalProgress *_globalProgress;
    unsigned long long _lastDiskSpaceCheckTime;
    unsigned long long _availableDiskSpace;
    unsigned long long _totalDiskSpace;
    _Bool _isGreedy;
    struct brc_mutex _zonesCreationLock;
    br_pacer *_reschedulePendingDiskItemsPacer;
    br_pacer *_updateDiskSpacePacer;
    _Bool _accountIsReady;
    BRCAccountWaitOperation *_accountWaitOperation;
    _Bool _isDBOpened;
    NSMutableDictionary *_rootsByFolderType;
    NSMutableDictionary *_fsEventsMonitors;
    BRCPowerLogReporter *_powerlogReporter;
    _Bool _isCancelled;
    NSString *_appSupportDirPath;
    NSString *_cacheDirPath;
    NSString *_ubiquityTokenSalt;
    BRCContainerScheduler *_containerScheduler;
    BRCApplyScheduler *_applyScheduler;
    BRCFairScheduler *_fairClientDBScheduler;
    BRCVolume *_volume;
    BRCFSReader *_fsReader;
    BRCFSUploader *_fsUploader;
    BRCFSDownloader *_fsDownloader;
    BRCSyncUpScheduler *_syncUpScheduler;
    BRCFSWriter *_fsWriter;
    BRCDownloadTrackers *_downloadTrackers;
    BRCUserNotification *_userNotification;
    BRCNotificationManager *_notificationManager;
    BRCStageRegistry *_stageRegistry;
    BRCDiskSpaceReclaimer *_diskReclaimer;
    BRCRecentsEnumerator *_recentsEnumerator;
    BRCThrottle *_appLibraryScanThrottle;
    BRCThrottle *_appLibraryResetThrottle;
    BRCThrottle *_sharedAppLibraryResetThrottle;
    BRCThrottle *_appLibraryAliasRemovalThrottle;
    BRCThrottle *_lostItemThrottle;
    BRCThrottle *_operationFailureThrottle;
    BRCThrottle *_syncClientZoneThrottle;
    BRCThrottle *_syncClientZoneErrorThrottle;
    NSObject<OS_dispatch_queue> *_resetQueue;
    BRCItemTransmogrifier *_itemTransmogrifier;
    BRCAnalyticsReporter *_analyticsReporter;
}

@property (nonatomic, readonly) BRCClientState *clientState;
@property (nonatomic, readonly) BRCServerPersistedState *serverState;
@property (nonatomic, readonly) unsigned long long databaseID;
@property (nonatomic, readonly) BRCPQLConnection *clientDB;
@property (nonatomic, readonly) BRCPQLConnection *readOnlyDB;
@property (nonatomic, readonly) BRCPQLConnection *expensiveReadOnlyDB;
@property (nonatomic, readonly) BRCPQLConnection *serverDB;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *clientTruthWorkloop;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serverTruthWorkloop;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *readOnlyWorkloop;
@property (retain, nonatomic) NSString *appSupportDirPath;
@property (retain, nonatomic) NSString *cacheDirPath;
@property (nonatomic, readonly) NSString *accountID;
@property (nonatomic, readonly) NSString *ubiquityTokenSalt;
@property (nonatomic, readonly) BRCGlobalProgress *globalProgress;
@property (nonatomic, readonly) BRCDeadlineScheduler *defaultScheduler;
@property (nonatomic, readonly) BRCApplyScheduler *applyScheduler;
@property (nonatomic, readonly) BRCContainerScheduler *containerScheduler;
@property (nonatomic, readonly) BRCFairScheduler *fairClientDBScheduler;
@property (nonatomic, readonly) BRCFSReader *fsReader;
@property (nonatomic, readonly) BRCFSUploader *fsUploader;
@property (nonatomic, readonly) BRCFSDownloader *fsDownloader;
@property (nonatomic, readonly) BRCSyncUpScheduler *syncUpScheduler;
@property (nonatomic, readonly) BRCFSWriter *fsWriter;
@property (nonatomic, readonly) BRCVolume *volume;
@property (nonatomic, readonly) BRCDownloadTrackers *downloadTrackers;
@property (nonatomic, readonly) BRCItemTransmogrifier *itemTransmogrifier;
@property (nonatomic, readonly) BRCAnalyticsReporter *analyticsReporter;
@property (nonatomic, readonly) BRCPowerLogReporter *powerLogReporter;
@property (nonatomic, readonly) BRCNotificationManager *notificationManager;
@property (nonatomic, readonly) BRCStageRegistry *stageRegistry;
@property (nonatomic, readonly) BRCDiskSpaceReclaimer *diskReclaimer;
@property (nonatomic, readonly) BRCUserNotification *userNotification;
@property (nonatomic, readonly) BRCRecentsEnumerator *recentsEnumerator;
@property (nonatomic, readonly) _Bool isCancelled;
@property (nonatomic, readonly) unsigned long long availableDiskSpace;
@property (nonatomic, readonly) _Bool isGreedy;
@property (nonatomic, readonly) BRCAccountWaitOperation *accountWaitOperation;
@property (nonatomic, readonly) _Bool hasOptimizeStorageEnabled;
@property (nonatomic, readonly) BRCThrottle *appLibraryScanThrottle;
@property (nonatomic, readonly) BRCThrottle *appLibraryResetThrottle;
@property (nonatomic, readonly) BRCThrottle *sharedAppLibraryResetThrottle;
@property (nonatomic, readonly) BRCThrottle *appLibraryAliasRemovalThrottle;
@property (nonatomic, readonly) BRCThrottle *lostItemThrottle;
@property (nonatomic, readonly) BRCThrottle *operationFailureThrottle;
@property (nonatomic, readonly) BRCThrottle *syncClientZoneThrottle;
@property (nonatomic, readonly) BRCThrottle *syncClientZoneErrorThrottle;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *resetQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;

+ (id)nameComponentsForKey:(id)arg1 db:(id)arg2;
+ (_Bool)_openConnection:(id)arg1 databaseName:(id)arg2 baseURL:(id)arg3 readonly:(_Bool)arg4 error:(id *)arg5;
+ (_Bool)_registerStaticDBFunctions:(id)arg1 error:(id *)arg2;
+ (id)userIdentityForKey:(id)arg1 db:(id)arg2;
+ (id)userIdentityForName:(id)arg1 db:(id)arg2;
+ (void)_registerLastBootIfNeeded:(id)arg1 table:(struct NSObject *)arg2;
+ (id)_classesForClientState;
+ (_Bool)openAndValidateDatabase:(id)arg1 serverTruth:(_Bool)arg2 session:(id)arg3 baseURL:(id)arg4 skipBackupDetection:(_Bool)arg5 error:(id *)arg6;
+ (_Bool)_openConnection:(id)arg1 serverTruth:(_Bool)arg2 databaseName:(id)arg3 baseURL:(id)arg4 initialVersion:(unsigned int *)arg5 lastCurrentVersion:(unsigned int *)arg6 error:(id *)arg7;
+ (_Bool)_validateDatabase:(id)arg1 baseURL:(id)arg2 session:(id)arg3 serverTruth:(_Bool)arg4 initialVersion:(unsigned int)arg5 lastCurrentVersion:(unsigned int)arg6 error:(id *)arg7;
+ (_Bool)_checkIntegrity:(id)arg1 serverTruth:(_Bool)arg2 session:(id)arg3 skipBackupDetection:(_Bool)arg4 error:(id *)arg5;
+ (_Bool)upgradeOfflineDB:(id)arg1 serverTruth:(_Bool)arg2 session:(id)arg3 error:(id *)arg4;
+ (id)sessionForBackingUpDatabasesAtURL:(id)arg1;
+ (id)sessionForDumpingDatabasesAtURL:(id)arg1;
+ (id)nameComponentsForName:(id)arg1 db:(id)arg2;

- (id)init;
- (void)dealloc;
- (void)close;
- (void)resume;
- (_Bool)openWithError:(id *)arg1;
- (void)fetchUserRecordIDWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setupDatabase;
- (_Bool)registerClient:(id)arg1;
- (void)unregisterClient:(id)arg1;
- (id)roots;
- (void)_startWatcher;
- (void)addOfflineServerZone:(id)arg1;
- (void)addOfflineClientZone:(id)arg1;
- (void)addOfflineAppLibrary:(id)arg1;
- (id)sideCarSyncContext;
- (_Bool)saveServerZoneToDB:(id)arg1;
- (struct PQLResultSet *)itemsWithSideCarInFlightDiffsEnumerator;
- (id)resolvedOpenRelpathForPath:(id)arg1 mustExist:(_Bool)arg2 allowResolveInPkg:(_Bool)arg3 errcode:(int *)arg4;
- (id)globalItemByFileID:(unsigned long long)arg1 db:(id)arg2;
- (id)globalItemByDocumentID:(unsigned int)arg1 db:(id)arg2;
- (id)pendingDownloadItemWithDocumentID:(unsigned int)arg1;
- (id)userKeyForName:(id)arg1 db:(id)arg2;
- (id)createUserKeyForName:(id)arg1;
- (id)getOrCreateSharedZones:(id)arg1;
- (id)itemByRowID:(unsigned long long)arg1;
- (id)serverAliasItemForSharedItem:(id)arg1 inZone:(id)arg2;
- (id)serverZoneByRowID:(id)arg1;
- (id)localAliasForSharedItem:(id)arg1 inZone:(id)arg2;
- (void)enumerateAppLibraries:(CDUnknownBlockType)arg1;
- (unsigned long long)syncedFolderTypeForURL:(id)arg1;
- (id)newConnectionWithLabel:(id)arg1 readonly:(_Bool)arg2 error:(id *)arg3;
- (void)dbBecameCorrupted;
- (void)openForDumping;
- (id)newConnection:(id)arg1;
- (_Bool)_registerDynamicDBFunctions:(id)arg1 error:(id *)arg2;
- (_Bool)_openConnection:(id)arg1 databaseName:(id)arg2 readonly:(_Bool)arg3 error:(id *)arg4;
- (_Bool)_setupConnection:(id)arg1 readonly:(_Bool)arg2 error:(id *)arg3;
- (_Bool)_createAppLibrary:(id)arg1;
- (id)newAppLibraryFromPQLResultSet:(id)arg1 error:(id *)arg2;
- (id)newSharedClientZoneFromPQLResultSet:(id)arg1 error:(id *)arg2;
- (id)newSharedServerZoneFromPQLResultSet:(id)arg1 error:(id *)arg2;
- (id)newPrivateClientZoneFromPQLResultSet:(id)arg1 error:(id *)arg2;
- (id)newPrivateServerZoneFromPQLResultSet:(id)arg1 error:(id *)arg2;
- (id)newLocalItemFromPQLResultSet:(id)arg1 db:(id)arg2 error:(id *)arg3;
- (id)deviceKeyForName:(id)arg1 db:(id)arg2;
- (void)_setUserIdentity:(id)arg1 forName:(id)arg2;
- (struct PQLResultSet *)_privateClientZonesEnumerator:(id)arg1;
- (_Bool)saveClientZoneToDB:(id)arg1;
- (struct PQLResultSet *)_sharedClientZonesEnumerator:(id)arg1;
- (_Bool)_stepBackupDetector:(struct backup_detector)arg1 newState:(struct backup_detector *)arg2 error:(id *)arg3;
- (void)_clearNeedsUpgradeErrors:(id)arg1 brVersion:(id)arg2;
- (void)enumerateServerZones:(CDUnknownBlockType)arg1;
- (_Bool)saveAppLibraryToDB:(id)arg1;
- (void)enumerateClientZones:(CDUnknownBlockType)arg1;
- (_Bool)openAndValidateDatabase:(id)arg1 serverTruth:(_Bool)arg2 error:(id *)arg3;
- (_Bool)_finishClientTruthConnectionSetupWithError:(id *)arg1;
- (_Bool)_finishServerTruthConnectionSetupWithError:(id *)arg1;
- (void)enableDatabaseProfilingForDB:(id)arg1;
- (void)stopDBWatcher;
- (void)_dumpClientZoneBlockedState:(id)arg1 toContext:(id)arg2;
- (id)appLibraries;
- (id)_sharedServerZoneByName:(id)arg1 ownerName:(id)arg2 db:(id)arg3;
- (id)_privateServerZoneByName:(id)arg1 db:(id)arg2;
- (void)disableDatabaseProfilingForDB:(id)arg1;
- (id)clientZonesMatchingSearchString:(id)arg1 error:(id *)arg2;
- (_Bool)_dumpClientZoneStatus:(id)arg1 toContext:(id)arg2 error:(id *)arg3;
- (struct PQLResultSet *)_sharedServerZonesEnumerator:(id)arg1;
- (struct PQLResultSet *)_privateServerZonesEnumerator:(id)arg1;
- (struct PQLResultSet *)_appLibrariesEnumerator:(id)arg1;
- (_Bool)_dumpClientZone:(id)arg1 toContext:(id)arg2 includeAllItems:(_Bool)arg3 error:(id *)arg4;
- (void)dumpXPCClientsToContext:(id)arg1;
- (void)dumpMiscOperationsToContext:(id)arg1;
- (_Bool)_setupBackupDetector:(struct backup_detector *)arg1 error:(id *)arg2;
- (void)preventDatabaseFromBeingReused;
- (_Bool)createServerZone:(id)arg1;
- (_Bool)deleteServerZone:(id)arg1;
- (void)_enumerateAppLibraryRowIDs:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)_reserveRowIDForLibrary:(id)arg1;
- (_Bool)_deleteAppLibrary:(id)arg1;
- (_Bool)_createPrivateAppLibrary:(id)arg1;
- (_Bool)_createSharedAppLibrary:(id)arg1;
- (_Bool)_createClientZone:(id)arg1;
- (_Bool)_deleteClientZone:(id)arg1;
- (id)_privateClientZoneByName:(id)arg1 db:(id)arg2;
- (id)_privateClientZoneByID:(id)arg1 db:(id)arg2;
- (struct PQLResultSet *)stagedItemsEnumerator;
- (struct PQLResultSet *)foldersNeedingTransmogrifyEnumerator;
- (struct PQLResultSet *)bouncedItemsEnumerator;
- (struct PQLResultSet *)itemsNeedingIndexingEnumeratorFromNotifRank:(unsigned long long)arg1 batchSize:(unsigned long long)arg2;
- (id)createDeviceKeyForNameInServerDB:(id)arg1;
- (id)userIdentityForKey:(id)arg1;
- (void)learnOwnerIdentityForShare:(id)arg1 forceUpdate:(_Bool)arg2;
- (id)userNameForKey:(id)arg1 db:(id)arg2;
- (_Bool)openDBWithError:(id *)arg1;
- (void)closeDBs;
- (_Bool)dumpStatusToFileHandle:(id)arg1 zoneName:(id)arg2 tracker:(id)arg3 error:(id *)arg4;
- (_Bool)initializeOfflineDatabaseWhileUpgrading:(_Bool)arg1 error:(id *)arg2;
- (_Bool)dumpDatabaseToFileHandle:(id)arg1 zoneName:(id)arg2 includeAllItems:(_Bool)arg3 tracker:(id)arg4 error:(id *)arg5;
- (_Bool)dumpFileCoordinationInfoToFileHandle:(id)arg1 error:(id *)arg2;
- (_Bool)backupDatabaseToURL:(id)arg1 error:(id *)arg2;
- (id)accountStatisticsWithDB:(id)arg1;
- (id)dirPathForSyncedFolderType:(unsigned long long)arg1;
- (id)initWithAccountID:(id)arg1 salt:(id)arg2;
- (void)destroyLocalDataWaitingForFilesToBeUnlinked:(_Bool)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (id)fsEventsMonitors;
- (void)destroyLocalDataWithPristineContainerIDs:(id)arg1;
- (void)enumerateSupportedFolderTypes:(CDUnknownBlockType)arg1;
- (void)closeAndResetLocalState;
- (void)destroyLocalData;
- (id)appLibraryByMangledID:(id)arg1;
- (id)clientZoneByMangledID:(id)arg1;
- (id)defaultSyncContext;
- (id)zoneHealthSyncContext;
- (id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)arg1;
- (id)privateClientZoneByID:(id)arg1;
- (int)resolvePathAdditionalMetadata:(id)arg1 appLibrary:(id *)arg2;
- (id)itemByItemGlobalID:(id)arg1 db:(id)arg2;
- (id)appLibraryByID:(id)arg1;
- (id)globalItemByDocumentID:(unsigned int)arg1;
- (void)enumeratePrivateClientZones:(CDUnknownBlockType)arg1;
- (void)enumerateSharedClientZones:(CDUnknownBlockType)arg1;
- (id)cloudDocsClientZone;
- (id)fsEventsMonitorForAppLibraryID:(id)arg1;
- (void)recomputeAppSyncBlockStateForPrivateClientZone:(id)arg1;
- (void)computeDocumentEvictableSizesForLowTime:(unsigned long long)arg1 medTime:(unsigned long long)arg2 highTime:(unsigned long long)arg3 lowSize:(unsigned long long)arg4 medSize:(unsigned long long)arg5 highSize:(unsigned long long)arg6 minRowID:(unsigned long long)arg7 minSize:(unsigned long long)arg8 batchSize:(unsigned long long)arg9 injection:(struct NSObject *)arg10 db:(id)arg11 reply:(CDUnknownBlockType)arg12;
- (id)syncContextForMangledID:(id)arg1 createIfNeeded:(_Bool)arg2;
- (id)itemIDByRowID:(unsigned long long)arg1 db:(id)arg2;
- (id)itemByRowID:(unsigned long long)arg1 db:(id)arg2;
- (_Bool)createAppLibraryOnDisk:(id)arg1 createdRoot:(_Bool *)arg2 createdDocuments:(_Bool *)arg3 rootFileID:(unsigned long long *)arg4;
- (id)itemIDByRowID:(unsigned long long)arg1;
- (id)appLibraryByRowID:(id)arg1;
- (id)allSyncContexts;
- (id)syncContextForMangledID:(id)arg1;
- (void)scheduleZoneMovesToCloudDocs:(id)arg1;
- (_Bool)globalID:(id)arg1 isStrictChildOfGlobalID:(id)arg2;
- (id)serverAliasItemForSharedItem:(id)arg1 db:(id)arg2;
- (id)sharedClientZoneByMangledID:(id)arg1;
- (void)userDefaultsChanged;
- (void)markAccountMigrationComplete;
- (void)setNeedsPCSMigration:(_Bool)arg1;
- (id)sharedSyncContext;
- (_Bool)PCSMigrationComplete;
- (id)fetchAccountWaitOperationWithAccountReady:(_Bool *)arg1;
- (_Bool)shouldPerformPCSMigration;
- (id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)arg1 appLibraryExists:(_Bool *)arg2;
- (id)serverZoneByName:(id)arg1 ownerName:(id)arg2;
- (id)syncContextForMangledID:(id)arg1 metadata:(_Bool)arg2;
- (id)currentUserRecordName;
- (id)privateServerZoneByID:(id)arg1;
- (void)performBlock:(CDUnknownBlockType)arg1 whileRemovingPrivateClientZone:(id)arg2;
- (id)newServerItemFromPQLResultSet:(id)arg1 error:(id *)arg2;
- (id)sharedServerZoneRowIDsByOwnerNamePrefix:(id)arg1;
- (id)getOrReserveLibraryRowIDForLibrary:(id)arg1;
- (id)fallbackAppLibraryForClientZone:(id)arg1 extension:(id)arg2;
- (_Bool)hasRootForSyncedFolderType:(unsigned long long)arg1;
- (id)rootForSyncedFolderType:(unsigned long long)arg1;
- (void)_resolvePathInMobileDocsRoot:(id)arg1 appLibrary:(id *)arg2;
- (id)resolvedOpenRelpathForPath:(id)arg1 mustExist:(_Bool)arg2 errcode:(int *)arg3;
- (id)_old_privateAppLibraryByZoneName:(id)arg1 db:(id)arg2;
- (void)enumerateSideFaultsUnderParent:(id)arg1 db:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)addMiscOperation:(id)arg1;
- (id)_clientZonesMatchingSearchString:(id)arg1;
- (id)_appLibrariesMatchingSearchString:(id)arg1;
- (id)singleClientZoneMatchingSearchString:(id)arg1 error:(id *)arg2;
- (id)appLibrariesMatchingSearchString:(id)arg1 error:(id *)arg2;
- (id)singleAppLibraryMatchingSearchString:(id)arg1 error:(id *)arg2;
- (id)serverZoneByMangledID:(id)arg1;
- (id)itemByItemGlobalID:(id)arg1;
- (void)enumerateItemsWithShareIDUnderParent:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)availableDiskSpaceDidChange;
- (id)globalItemByFileID:(unsigned long long)arg1;
- (void)enumeratePrivateServerZones:(CDUnknownBlockType)arg1;
- (void)_setupSharedPackageExtensionsPlist;
- (void)_createAccountSupportPathIfNeeded:(id)arg1 protectParent:(_Bool)arg2;
- (void)_setupThrottles;
- (id)createRootForSyncedFolderType:(unsigned long long)arg1;
- (void)setRoot:(id)arg1 forSyncedFolderType:(unsigned long long)arg2;
- (void)_enumerateAccountHandlerSupportedFolderTypes:(CDUnknownBlockType)arg1;
- (id)createFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (void)setFSEventsMonitor:(id)arg1 forSyncedFolderType:(unsigned long long)arg2;
- (_Bool)_createAppLibraryRootsIfNeededWithError:(id *)arg1;
- (_Bool)createAppLibrariesIfNeededWithError:(id *)arg1;
- (unsigned long long)availableDiskSpaceUsingCache:(_Bool)arg1 schedulingPendingDiskItemsIfNeeded:(_Bool)arg2;
- (_Bool)_createAppLibraryRootIfNeededAtPath:(id)arg1 error:(id *)arg2;
- (void)_pcsChainAllItemsWithActivity:(id)arg1;
- (void)_registerBackgroundXPCActivities;
- (void)closeXPCClientsSync;
- (id)_unloadClientZones;
- (_Bool)_recursivelyPrepareFolderForLogOutAtURL:(id)arg1 pruneEmptyFolders:(_Bool)arg2 pruneEmptyTopLevelFolder:(_Bool)arg3 maxDepth:(unsigned long long)arg4;
- (void)destroyLocalDataWaitingForFilesToBeUnlinked:(_Bool)arg1 pristineContainerIDs:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)__registerServerZone:(id)arg1 clientZone:(id)arg2 appLibrary:(id)arg3 isShared:(_Bool)arg4;
- (_Bool)_shouldPrivateAppLibraryBeCZMMoved:(id)arg1;
- (id)__getOrCreateServerZone:(id)arg1;
- (id)__getOrCreateClientZone:(id)arg1 withServerZone:(id)arg2 alreadyExists:(_Bool *)arg3;
- (id)__getOrCreateAppLibrary:(id)arg1 rowID:(id)arg2 createOnDisk:(_Bool)arg3 alreadyExists:(_Bool *)arg4 withClientZone:(id)arg5 createCZMMoved:(_Bool)arg6;
- (id)_getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)arg1 creationFlags:(unsigned int *)arg2;
- (_Bool)hasFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (void)enumerateFileTypesWithFilterBlock:(CDUnknownBlockType)arg1 enumerationBlock:(CDUnknownBlockType)arg2;
- (_Bool)applySyncPolicy:(long long)arg1 forSyncedFolderType:(unsigned long long)arg2 isInitialCreation:(_Bool)arg3 error:(id *)arg4;
- (void)setOptimizeStorageEnabled:(_Bool)arg1;
- (unsigned long long)accountSize;
- (void)startDownloadsForGreediness;
- (_Bool)enableSyncforSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(_Bool)arg2 error:(id *)arg3;
- (_Bool)disableSyncforSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(_Bool)arg2 error:(id *)arg3;
- (void)_loadClientZonesFromDisk;
- (id)fsEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (void)removeRootForSyncedFolderType:(unsigned long long)arg1;
- (void)removeFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1;
- (void)cloudDocsAppsListDidChange:(id)arg1;
- (void)resetThrottles;
- (id)clientZones;
- (id)sharedServerZoneByMangledID:(id)arg1;
- (void)destroySharedClientZone:(id)arg1;
- (unsigned long long)availableDiskSpaceUsingCache:(_Bool)arg1;
- (unsigned long long)computeTotalLiveDocumentSizeWithDb:(id)arg1;
- (void)computeTotalEvictableSizeWithAccessLowTimeDelta:(double)arg1 medTimeDelta:(double)arg2 highTimeDelta:(double)arg3 db:(id)arg4 reply:(CDUnknownBlockType)arg5;
- (_Bool)_setRootPathXattrValue:(id)arg1 forRootPath:(id)arg2 error:(id *)arg3;
- (_Bool)_getRootPathXattrValue:(id *)arg1 forRootPath:(id)arg2 error:(id *)arg3;
- (void)removeDesktopSymlink:(_Bool)arg1 andDocumentsSymlink:(_Bool)arg2;
- (void)_recreateSymlinkIfNecessaryForDocumentsPath:(id)arg1 folderName:(id)arg2 destinationPath:(id)arg3;
- (void)recreateDesktopSymlinksIfNecessary;
- (_Bool)shouldPathBeDesktopSymlink:(id)arg1;
- (id)serverAliasItemForSharedItem:(id)arg1;
- (id)_syncContextForContextIdentifier:(id)arg1 sourceAppIdentifier:(id)arg2 isShared:(_Bool)arg3 createIfNeeded:(_Bool)arg4;
- (id)syncContextForMangledID:(id)arg1 metadata:(_Bool)arg2 createIfNeeded:(_Bool)arg3;
- (id)serverAliasItemForSharedItem:(id)arg1 inZone:(id)arg2 db:(id)arg3;
- (id)_containerMetadataRecordsToSaveWithBatchSize:(unsigned long long)arg1;

@end
