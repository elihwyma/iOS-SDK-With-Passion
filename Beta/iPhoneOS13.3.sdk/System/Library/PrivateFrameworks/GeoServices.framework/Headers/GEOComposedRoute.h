/*
 Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

#import <NSObject.h>

#import <GeoServices/Swift-Protocol.h>

@class GEOArrivalParameters, GEOComposedWaypoint, GEOMapRegion, GEORoute, GEORouteAttributes, GEORouteDisplayHints, GEORouteInitializerData, GEOStyleAttributes, GEOTransitDecoderData, GEOTransitRouteUpdateRequest, GEOTransitSuggestedRoute, GEOZilchDecoder, NSArray, NSData, NSDate, NSHashTable, NSMutableArray, NSString, NSUUID, geo_reentrant_isolater;

@protocol GEOComposedRouteTransitDisplayStrings, GEOServerFormattedString, GEOTransitRoutingIncidentMessage;

@interface GEOComposedRoute : NSObject <Swift>

{
    NSHashTable *_observers;
    NSData *_pointData;
    _Bool _usesZilch;
    NSArray *_legs;
    NSArray *_composedGuidanceEvents;
    NSArray *_steps;
    NSString *_name;
    NSData *_serverRouteID;
    NSUUID *_uniqueRouteID;
    unsigned int _expectedTime;
    unsigned int _distance;
    NSDate *_startDate;
    NSString *_trafficDescription;
    NSString *_longTrafficDescription;
    GEORoute *_geoRoute;
    NSArray *_maneuverDisplaySteps;
    _Bool _maneuverDisplayEnabled;
    unsigned long long _currentDisplayStep;
    double *_pointLengths;
    NSArray *_stops;
    NSArray *_halls;
    NSArray *_stations;
    unsigned long long _selectedLegIndex;
    unsigned int _firstVisiblePoint;
    GEOMapRegion *_boundingMapRegion;
    NSMutableArray *_sections;
    NSMutableArray *_snappedPaths;
    GEOZilchDecoder *_zilchDecoder;
    GEOTransitDecoderData *_decoderData;
    GEOTransitSuggestedRoute *_suggestedRoute;
    GEOTransitSuggestedRoute *_originalSuggestedRoute;
    NSArray *_routePlanningArtworks;
    id <GEOTransitRoutingIncidentMessage> _transitRoutingIncidentMessage;
    NSArray *_rideSelections;
    NSArray *_currentSectionOptions;
    GEORouteDisplayHints *_displayHints;
    id <GEOServerFormattedString> _launchAndGoCardTitle;
    id <GEOServerFormattedString> _launchAndGoRouteTitle;
    id <GEOServerFormattedString> _launchAndGoRouteDescription;
    id <GEOServerFormattedString> _previewDurationFormatString;
    id <GEOServerFormattedString> _pickingDurationFormatString;
    id <GEOServerFormattedString> _planningDescriptionFormatString;
    id <GEOServerFormattedString> _transitDescriptionFormatString;
    NSArray *_transitAdvisories;
    id <GEOServerFormattedString> _transitRouteBadge;
    NSArray *_ticketedSegments;
    _Bool _isWalkingOnlyTransitRoute;
    double _transitUpdateInitialDelay;
    unsigned long long _indexOfSuggestedRoute;
    NSArray *_transitRouteUpdateAlerts;
    id <GEOComposedRouteTransitDisplayStrings> _transitRouteDisplayStrings;
    GEOComposedWaypoint *_origin;
    GEOComposedWaypoint *_destination;
    NSData *_directionsResponseID;
    _Bool _isNavigable;
    GEOStyleAttributes *_styleAttributes;
    GEOArrivalParameters *_arrivalParameters;
    GEORouteInitializerData *_routeInitializerData;
    GEORouteAttributes *_routeAttributes;
    GEOTransitRouteUpdateRequest *_transitRouteUpdateRequest;
    NSUUID *_revisionIdentifier;
    geo_reentrant_isolater *_snappedRoutesIsolater;
}

@property (nonatomic, readonly) id <GEOComposedRouteTransitDisplayStrings> transitRouteDisplayStrings;
@property (nonatomic, readonly) geo_reentrant_isolater *snappedRoutesIsolater;
@property (retain, nonatomic) NSData *serverRouteID;
@property (retain, nonatomic) NSUUID *uniqueRouteID;
@property (nonatomic, readonly) GEORouteInitializerData *routeInitializerData;
@property (nonatomic, readonly) GEORouteAttributes *routeAttributes;
@property (nonatomic, readonly) unsigned int pointCount;
@property (nonatomic, readonly) _Bool usesZilch;
@property (nonatomic, readonly) GEOComposedWaypoint *origin;
@property (nonatomic, readonly) GEOComposedWaypoint *destination;
@property (nonatomic, readonly) GEOArrivalParameters *arrivalParameters;
@property (nonatomic, readonly) _Bool isNavigable;
@property (nonatomic, readonly) NSData *directionsResponseID;
@property (nonatomic, readonly) NSArray *steps;
@property (nonatomic, readonly) NSArray *legs;
@property (nonatomic, readonly) NSArray *composedGuidanceEvents;
@property (nonatomic, readonly) NSArray *stops;
@property (nonatomic, readonly) NSArray *halls;
@property (nonatomic, readonly) NSArray *stations;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) NSArray *advisoryNotices;
@property (nonatomic, readonly) NSArray *routeDescriptions;
@property (nonatomic, readonly) NSString *trafficDescription;
@property (nonatomic, readonly) NSString *longTrafficDescription;
@property (nonatomic, readonly) void *controlPoints;
@property (nonatomic, readonly) unsigned long long stepsCount;
@property (nonatomic, readonly) GEORoute *geoRoute;
@property (nonatomic, readonly) _Bool hasArrivalMapRegion;
@property (nonatomic, readonly) GEOMapRegion *arrivalMapRegion;
@property (nonatomic, readonly) _Bool hasExpectedTime;
@property (nonatomic) unsigned int expectedTime;
@property (nonatomic, readonly) _Bool hasHistoricTravelTime;
@property (nonatomic) unsigned int historicTravelTime;
@property (nonatomic, readonly) NSDate *startDate;
@property (nonatomic, readonly) unsigned int distance;
@property (nonatomic) _Bool maneuverDisplayEnabled;
@property (nonatomic) unsigned long long currentDisplayStep;
@property (retain, nonatomic) NSArray *maneuverDisplaySteps;
@property (nonatomic) unsigned long long selectedLegIndex;
@property (nonatomic) unsigned int firstVisiblePoint;
@property (nonatomic, readonly) int transportType;
@property (retain, nonatomic) GEOTransitSuggestedRoute *suggestedRoute;
@property (nonatomic, readonly) GEOTransitSuggestedRoute *originalSuggestedRoute;
@property (nonatomic, readonly) unsigned long long indexOfSuggestedRoute;
@property (copy, nonatomic, readonly) NSArray *routePlanningArtworks;
@property (nonatomic, readonly) id <GEOTransitRoutingIncidentMessage> transitRoutingIncidentMessage;
@property (nonatomic, readonly) _Bool hasRideClusters;
@property (nonatomic, readonly) NSArray *rideSelections;
@property (nonatomic, readonly) id <GEOServerFormattedString> launchAndGoCardTitle;
@property (nonatomic, readonly) id <GEOServerFormattedString> launchAndGoRouteTitle;
@property (nonatomic, readonly) id <GEOServerFormattedString> launchAndGoRouteDescription;
@property (nonatomic, readonly) id <GEOServerFormattedString> previewDurationFormatString;
@property (nonatomic, readonly) id <GEOServerFormattedString> pickingDurationFormatString;
@property (nonatomic, readonly) id <GEOServerFormattedString> planningDescriptionFormatString;
@property (nonatomic, readonly) id <GEOServerFormattedString> transitDescriptionFormatString;
@property (nonatomic, readonly) NSArray *transitAdvisories;
@property (nonatomic, readonly) _Bool isWalkingOnlyTransitRoute;
@property (nonatomic, readonly) id <GEOServerFormattedString> transitRouteBadge;
@property (nonatomic) double transitUpdateInitialDelay;
@property (nonatomic, readonly) GEORouteDisplayHints *displayHints;
@property (nonatomic, readonly) _Bool shouldShowSchedule;
@property (nonatomic, readonly) GEOStyleAttributes *styleAttributes;
@property (nonatomic, readonly) int routeType;
@property (nonatomic, readonly) NSArray *sections;
@property (nonatomic, readonly) GEOMapRegion *boundingMapRegion;
@property (nonatomic, readonly) double *pointLengths;
@property (nonatomic, readonly) unsigned long long numberOfTransitStops;
@property (nonatomic, readonly) GEOTransitRouteUpdateRequest *transitRouteUpdateRequest;
@property (retain, nonatomic) NSUUID *revisionIdentifier;
@property (nonatomic, readonly) NSArray *baseTransitFares;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;
@property (nonatomic, readonly) _Bool allowsNetworkTileLoad;

+ (_Bool)supportsSecureCoding;

- (id)init;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)setSections:(id)arg1;
- (struct PolylineCoordinate)closestPointOnRoute:(CDStruct_c3b9c2ee)arg1;
- (void)setIsNavigable:(_Bool)arg1;
- (id)stepAtIndex:(unsigned long long)arg1;
- (void)setSteps:(id)arg1;
- (void)setLegs:(id)arg1;
- (id)initWithRoute:(id)arg1;
- (void)_initializeManeuverDisplaySteps;
- (id)initWithRoute:(id)arg1 initializerData:(id)arg2;
- (void)_populateArtworkForSuggestedRoute:(id)arg1 decoderData:(id)arg2;
- (id)initWithSuggestedRoute:(id)arg1 initializerData:(id)arg2;
- (void)updateTransitRouteUpdateRequest:(id)arg1;
- (id)sectionOptionForTripIndex:(unsigned long long)arg1;
- (_Bool)_MapsCarPlay_isEqual:(id)arg1;
- (_Bool)_MapsCarPlay_isArray:(id)arg1 equalTo:(id)arg2;
- (void)initializePointLengthsAndAssignStepDistance:(_Bool)arg1;
- (CDStruct_39925896)pointAt:(unsigned long long)arg1;
- (struct PolylineCoordinate)coordinateAtOffset:(double)arg1 fromRoutePoint:(unsigned long long)arg2;
- (CDStruct_39925896)pointAtRouteCoordinate:(struct PolylineCoordinate)arg1;
- (unsigned long long)stepIndexForPointIndex:(unsigned long long)arg1;
- (id)legForStepIndex:(unsigned long long)arg1;
- (void)getFormOfWay:(int *)arg1 roadClass:(int *)arg2 at:(unsigned int)arg3;
- (void)forEachSnappedPath:(CDUnknownBlockType)arg1;
- (double)distanceBetweenRoutePointIndex:(unsigned int)arg1 toPointIndex:(unsigned int)arg2;
- (double)distanceBetweenLocation:(CDStruct_c3b9c2ee)arg1 nextPointIndex:(unsigned int)arg2 toPointIndex:(unsigned int)arg3;
- (struct PolylineCoordinate)coordinateAtOffset:(double)arg1 fromRouteCoordinate:(struct PolylineCoordinate)arg2;
- (struct PolylineCoordinate)_findRouteCoordinateWithOffset:(float)arg1 aPos:(const Matrix_8746f91e *)arg2 aCoord:(const struct PolylineCoordinate *)arg3 bCoord:(const struct PolylineCoordinate *)arg4 pointOnSegment:(const Matrix_8746f91e *)arg5 bounds:(const CDStruct_90e2a262 *)arg6;
- (double)courseAtRouteCoordinateIndex:(unsigned int)arg1;
- (_Bool)_meetsMinimumPathLengthBetweenStart:(unsigned int)arg1 end:(unsigned int)arg2;
- (void)_addSnappedPolylinePathsForSection:(id)arg1 toPaths:(id)arg2 rects:(CDStruct_90e2a262 *)arg3 rectsCount:(unsigned long long)arg4;
- (void)_snapPaths:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_addPaths:(id)arg1 forObserver:(id)arg2;
- (void)_enumerateAllStepsWithBlock:(CDUnknownBlockType)arg1;
- (void)_updateRevisionIdentifier;
- (id)getHallForStop:(id)arg1;
- (id)getStationForHall:(id)arg1;
- (id)getStationForStop:(id)arg1;
- (id)_nextOptionForOption:(id)arg1 rideIndex:(unsigned long long)arg2;
- (void)_updateSectionOptions;
- (unsigned long long)_tripIndexForTripLeg:(id)arg1;
- (void)_rebuildRouteForRideChange;
- (void)selectRide:(unsigned long long)arg1 forTripLeg:(id)arg2;
- (void)initializePointLengths;
- (id)initWithRoute:(id)arg1 origin:(id)arg2 destination:(id)arg3;
- (id)initWithRoute:(id)arg1 initializerData:(id)arg2 uniqueRouteID:(id)arg3;
- (id)initWithTransitGeometry:(id)arg1 andLine:(id)arg2 andStops:(id)arg3;
- (void)updateRouteWithOrigin:(id)arg1 destination:(id)arg2;
- (id)initWithSuggestedRoute:(id)arg1 initializerData:(id)arg2 updateRequest:(id)arg3;
- (id)initWithSuggestedRoute:(id)arg1 initializerData:(id)arg2 uniqueRouteID:(id)arg3;
- (void)setIsWalkingOnlyTransitRoute:(_Bool)arg1;
- (void)setUsesZilch:(_Bool)arg1;
- (void)setComposedGuidanceEvents:(id)arg1;
- (void)setPointData:(id)arg1;
- (id)pointData;
- (void)setBoundingMapRegion:(id)arg1;
- (struct PolylineCoordinate)coordinateAtOffset:(double)arg1;
- (struct PolylineCoordinate)routeCoordinateAtDistance:(double)arg1 beforeRouteCoordinate:(struct PolylineCoordinate)arg2;
- (double)distanceFromPoint:(struct PolylineCoordinate)arg1 toPoint:(struct PolylineCoordinate)arg2;
- (double)distanceFromPointIndex:(unsigned long long)arg1 toPointIndex:(unsigned long long)arg2;
- (double)stepDistanceFromPoint:(struct PolylineCoordinate)arg1 toPoint:(struct PolylineCoordinate)arg2;
- (id)stepForPointIndex:(unsigned int)arg1;
- (unsigned long long)legIndexForPointIndex:(unsigned long long)arg1;
- (unsigned long long)legIndexForStepIndex:(unsigned long long)arg1;
- (id)legForPointIndex:(unsigned int)arg1;
- (void)maneuverDisplayHasChanged;
- (int)formOfWayAt:(unsigned int)arg1;
- (double)approximateRoadWidthAtPointIndex:(unsigned int)arg1;
- (CDStruct_c8b5ad3f *)roadFeatureAtPointIndex:(unsigned int)arg1;
- (int)transportTypeForStep:(id)arg1;
- (id)zilchDataFromStepIndex:(unsigned long long)arg1;
- (double)distanceBetweenStep:(id)arg1 andStep:(id)arg2;
- (double)remainingTimeAlongRouteFromStepIndex:(unsigned long long)arg1 currentStepRemainingDistance:(double)arg2;
- (double)remainingDistanceAlongRouteFromStepIndex:(unsigned long long)arg1 currentStepRemainingDistance:(double)arg2;
- (_Bool)checkDrivingArrivalForCoordinate:(CDStruct_c3b9c2ee)arg1 coordinateOnRoute:(CDStruct_c3b9c2ee)arg2 routePointIndex:(unsigned int)arg3 distanceFromRoute:(double)arg4 arrivalMapRegion:(id)arg5 checkArrivalRadius:(_Bool)arg6 checkDistanceAlongRoute:(_Bool)arg7 checkRoadAccessPoints:(_Bool)arg8 isOnRoute:(_Bool)arg9;
- (CDStruct_39925896)locationAtDistance:(double)arg1 from:(id)arg2;
- (id)routeMatchAtDistance:(double)arg1 from:(id)arg2 stopAtEndOfTunnel:(_Bool)arg3 stopAtEndOfManeuver:(_Bool)arg4 date:(id)arg5;
- (void)roadFeaturesForRouteCoordinate:(struct PolylineCoordinate)arg1 distanceAhead:(double)arg2 handler:(CDUnknownBlockType)arg3;
- (_Bool)supportsSnapping;
- (id)getSnappedPathsForVisibleRect:(CDStruct_90e2a262)arg1 rectsToSnap:(CDStruct_90e2a262 *)arg2 rectsToSnapCount:(unsigned long long)arg3 observer:(id)arg4;
- (id)getSnappedPathsForLocation:(CDStruct_c3b9c2ee)arg1 radius:(double)arg2 observer:(id)arg3;
- (void)clearPoints;
- (void)clearSnappedPathsForObserver:(id)arg1;
- (_Bool)isSnapping;
- (void)applyUpdatesToTransitRoute:(id)arg1;
- (_Bool)isStopInTerminalStructure:(id)arg1;
- (void)initRideSelections;
- (id)sectionOptionForTripLeg:(id)arg1;
- (id)boardStepForSection:(id)arg1;
- (void)selectRide:(unsigned long long)arg1 forBoardStep:(id)arg2;
- (void)updateRouteWithRideSelections:(id)arg1;
- (id)ticketingSegmentsForSelectedRides;
- (id)initWithCompanionRoute:(id)arg1;
- (void)applyCompanionUpdates:(id)arg1;

@end
