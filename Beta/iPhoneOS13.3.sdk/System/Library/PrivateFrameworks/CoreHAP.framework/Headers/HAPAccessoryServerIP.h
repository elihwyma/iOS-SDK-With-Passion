/*
 Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP
 */

#import <CoreHAP/HAPAccessoryServer.h>

@class HAPAccessory, HAPAccessoryProtocolInfo, HAPAccessoryServerBrowserIP, HAPAccessoryWiFiConfiguration, HAPAuthSession, HAPHTTPClient, HAPWACAccessory, HAPWACAccessoryClient, HMFBlockOperation, HMFNetAddress, HMFNetMonitor, HMFTimer, HMFUnfairLock, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableSet, NSOperationQueue, NSString;

@interface HAPAccessoryServerIP : HAPAccessoryServer

{
    struct PairingSessionPrivate *_pairingSession;
    unsigned long long _featureFlags;
    HMFUnfairLock *_lock;
    _Bool _shouldReestablishSession;
    _Bool _establishingSecureConnection;
    _Bool _wacAccessory;
    _Bool _wacComplete;
    _Bool _wacLegacy;
    _Bool _preSoftAuthWacStarted;
    _Bool _postSoftAuthWacStarted;
    _Bool _hasUpdatedBonjour;
    _Bool _authenticated;
    _Bool _hasAttributeDatabase;
    _Bool _hasTunnelService;
    _Bool _econnresetRetryInProgress;
    _Bool _continuingLegacyWACpairing;
    _Bool _wacStarted;
    _Bool _hasStartedPairing;
    _Bool _pairingRequestPending;
    _Bool _tokenValidationPending;
    int _cancelPairingErr;
    NSString *_productData;
    NSString *_model;
    NSString *_sourceVersion;
    unsigned long long _statusFlags;
    NSData *_token;
    NSDictionary *_bonjourDeviceInfo;
    HAPAccessoryServerBrowserIP *_browser;
    NSArray *_ipServices;
    NSMutableArray *_queuedOperations;
    HAPAccessory *_primaryAccessoryForServer;
    HAPHTTPClient *_httpClient;
    HAPAuthSession *_authSession;
    HAPAccessoryProtocolInfo *_authenticatedProtocolInfo;
    CDUnknownBlockType _pairVerifyCompletionBlock;
    NSString *_controllerUsername;
    CDUnknownBlockType _netServiceResolveCompletionBlock;
    NSMutableSet *_resolvers;
    HMFBlockOperation *_pairOperation;
    NSOperationQueue *_clientOperationQueue;
    NSData *_ownershipToken;
    HAPAccessoryWiFiConfiguration *_wifiConfiguration;
    HAPWACAccessory *_hapWACAccessory;
    HAPWACAccessoryClient *_hapWACAccessoryClient;
    HMFTimer *_bonjourEventTimer;
    HMFNetMonitor *_networkMonitor;
}

@property (retain, nonatomic) NSDictionary *bonjourDeviceInfo;
@property (nonatomic) _Bool hasUpdatedBonjour;
@property (weak, nonatomic) HAPAccessoryServerBrowserIP *browser;
@property (retain, nonatomic) NSArray *ipServices;
@property (retain, nonatomic) NSMutableArray *queuedOperations;
@property (retain, nonatomic) HAPAccessory *primaryAccessoryForServer;
@property (copy, nonatomic) NSString *model;
@property (copy, nonatomic) NSString *sourceVersion;
@property (nonatomic) unsigned long long statusFlags;
@property (retain, nonatomic) HAPHTTPClient *httpClient;
@property (nonatomic, readonly) HAPAuthSession *authSession;
@property (retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo;
@property (nonatomic) _Bool authenticated;
@property (retain, nonatomic) NSString *productData;
@property (copy, nonatomic) CDUnknownBlockType pairVerifyCompletionBlock;
@property (retain, nonatomic) NSString *controllerUsername;
@property (copy, nonatomic) CDUnknownBlockType netServiceResolveCompletionBlock;
@property (nonatomic, getter=isEstablishingSecureConnection) _Bool establishingSecureConnection;
@property (nonatomic) _Bool hasAttributeDatabase;
@property (nonatomic) _Bool hasTunnelService;
@property (nonatomic) _Bool econnresetRetryInProgress;
@property (retain, nonatomic) NSMutableSet *resolvers;
@property (retain, nonatomic) HMFBlockOperation *pairOperation;
@property (nonatomic, readonly) NSOperationQueue *clientOperationQueue;
@property (nonatomic, getter=isWacAccessory) _Bool wacAccessory;
@property (nonatomic, getter=isWacComplete) _Bool wacComplete;
@property (nonatomic, getter=isWacLegacy) _Bool wacLegacy;
@property (nonatomic, getter=isPreSoftAuthWacStarted) _Bool preSoftAuthWacStarted;
@property (nonatomic, getter=isPostSoftAuthWacStarted) _Bool postSoftAuthWacStarted;
@property (nonatomic, readonly) NSData *ownershipToken;
@property (retain, nonatomic) HAPAccessoryWiFiConfiguration *wifiConfiguration;
@property (nonatomic, readonly) HAPWACAccessory *hapWACAccessory;
@property (retain, nonatomic) HAPWACAccessoryClient *hapWACAccessoryClient;
@property (nonatomic, getter=isContinuingLegacyWACpairing) _Bool continuingLegacyWACpairing;
@property (nonatomic, getter=isWacStarted) _Bool wacStarted;
@property (retain, nonatomic) HMFTimer *bonjourEventTimer;
@property (nonatomic) _Bool hasStartedPairing;
@property (nonatomic, readonly) HMFNetMonitor *networkMonitor;
@property (nonatomic, getter=isPairingRequestPending) _Bool pairingRequestPending;
@property (nonatomic, getter=isTokenValidationPending) _Bool tokenValidationPending;
@property (nonatomic) int cancelPairingErr;
@property (readonly, getter=isWacNeeded) _Bool wacNeeded;
@property (copy, nonatomic) NSData *token;
@property (copy, nonatomic, readonly) HMFNetAddress *peerAddress;
@property (nonatomic, readonly) NSString *peerEndpointDescription;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;

+ (id)sharedPairOperationQueue;

- (void)dealloc;
- (void)_reset;
- (id)services;
- (void)updateWithBonjourDeviceInfo:(id)arg1;
- (void)reconfirm;
- (long long)linkType;
- (void)timerDidFire:(id)arg1;
- (void)networkMonitorIsReachable:(id)arg1;
- (void)networkMonitorIsUnreachable:(id)arg1;
- (_Bool)_delegateRespondsToSelector:(SEL)arg1;
- (void)authSession:(id)arg1 sendAuthExchangeData:(id)arg2;
- (void)authSession:(id)arg1 validateUUID:(id)arg2 token:(id)arg3;
- (void)authSession:(id)arg1 authenticateUUID:(id)arg2 token:(id)arg3;
- (void)authSession:(id)arg1 confirmUUID:(id)arg2 token:(id)arg3;
- (void)authSession:(id)arg1 authComplete:(id)arg2;
- (void)continueAuthAfterValidation:(_Bool)arg1;
- (id)initCommon:(id)arg1 browser:(id)arg2;
- (_Bool)_parseAndValidateTXTRecord;
- (void)_tearDownSession;
- (void)_invalidateWAC;
- (void)_notifyDelegatesPairingStopped:(id)arg1;
- (_Bool)_hasBonjourDeviceInfo;
- (void)_updateWithBonjourDeviceInfo:(id)arg1;
- (int)_pairSetupStartWithConsentRequired:(_Bool)arg1;
- (void)_notifyDelegatesOfAddAccessoryFailure;
- (_Bool)_isSessionEstablished;
- (void)_getAttributeDatabase;
- (void)_establishSecureConnectionAndFetchAttributeDatabase;
- (void)updateWithHAPWACAccessory:(id)arg1;
- (void)_pairVerifyStartWAC:(id)arg1;
- (void)_continuePairingUsingWAC;
- (id)_joinAccessoryNetworkWithCompletion:(CDUnknownBlockType)arg1;
- (void)_continuePairingAfterWAC:(id)arg1;
- (void)_continuePairingAfterConfirmingSecureWAC:(id)arg1;
- (void)_pairSetupContinueWAC;
- (void)provisionToken:(id)arg1;
- (void)_establishSecureSession;
- (void)continuePairingAfterAuthPrompt;
- (int)_continuePairingAfterAuthPromptWithRetry:(_Bool)arg1;
- (int)_continuePairingWithSetupCode:(id)arg1;
- (int)_pairSetupTryPassword:(id)arg1;
- (void)_tearDownSessionAndReconfirm;
- (void)_tearDownWAC;
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_processQueuedOperationsWithError:(id)arg1;
- (void)tearDownSessionOnAuthCompletion;
- (void)pairSetupStartSoftAuthWAC;
- (void)startPairingWithConsentRequired:(_Bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;
- (void)_error:(id)arg1 forReadCharacteristicValues:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_readCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (CDUnknownBlockType)_queuedReadOperationBlock:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_error:(id)arg1 forWriteCharacteristicValues:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_writeCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (CDUnknownBlockType)_queuedWriteOperationBlock:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_startAddPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(_Bool)arg3 queue:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (void)_insertReadCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_queueReadCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_handleReadECONNRESETError:(id)arg1 readCharacteristics:(id)arg2 responses:(id)arg3 timeout:(double)arg4 queue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)_handleReadResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 characteristics:(id)arg5 queue:(id)arg6 completion:(CDUnknownBlockType)arg7;
- (void)sendGETRequestToURL:(id)arg1 timeout:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_queueWriteCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)_performTimedWriteValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_performWriteValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_insertWriteCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)_handleWriteECONNResetError:(id)arg1 writeRequests:(id)arg2 responses:(id)arg3 timeout:(double)arg4 queue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)_handleWriteResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 requestTuples:(id)arg5 queue:(id)arg6 completion:(CDUnknownBlockType)arg7;
- (void)sendPUTRequestToURL:(id)arg1 request:(id)arg2 serializationType:(unsigned long long)arg3 timeout:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_handlePrepareWriteResponseObject:(id)arg1 type:(unsigned long long)arg2 prepareIdentifier:(id)arg3 httpStatus:(int)arg4 error:(id)arg5 requestTuples:(id)arg6 timeout:(double)arg7 queue:(id)arg8 completion:(CDUnknownBlockType)arg9;
- (void)_performExecuteWriteValues:(id)arg1 prepareIdentifier:(id)arg2 timeout:(double)arg3 queue:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)handleHTTPClientUnavailableErrorWithCompletion:(CDUnknownBlockType)arg1 serializationType:(unsigned long long)arg2;
- (void)_handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;
- (void)_queueEnableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (void)_handleEventResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 characteristics:(id)arg5 requestedEventState:(_Bool)arg6 completion:(CDUnknownBlockType)arg7 queue:(id)arg8;
- (_Bool)_processEvent:(id)arg1 matchedCharacteristic:(id *)arg2;
- (_Bool)_parseTXTRecordDictionary:(id)arg1;
- (void)_parseAttributeDatabase:(id)arg1 transaction:(id)arg2;
- (void)_updateProtocolVersionFromPrimaryAccessory:(id)arg1;
- (_Bool)_updateAccessories:(id)arg1;
- (void)__registerForInternalCharacteristicNotifications;
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (void)_invokePairVerifyCompletionBlock:(id)arg1;
- (int)_pairVerifyStartWithRetry:(_Bool)arg1;
- (int)_ensureHTTPClientSetUp;
- (int)_getBonjourDeviceDNSName:(id *)arg1;
- (void)_isAccessoryPublicKeyPresent:(_Bool *)arg1 registeredWithHomeKit:(_Bool *)arg2;
- (int)_ensurePairingSessionIsInitializedWithType:(unsigned int)arg1;
- (int)_handlePairSetupCompletionWithData:(id)arg1;
- (void)sendPOSTRequestToURL:(id)arg1 request:(id)arg2 serializationType:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)authenticateAccessory;
- (void)getAccessoryInfo:(CDUnknownBlockType)arg1;
- (void)_handleMFiCertValidation;
- (void)_notifyDelegateNeedsOwnershipToken;
- (void)invokePairVerifyCompletionBlock:(id)arg1;
- (int)_handlePairVerifyCompletionWithData:(id)arg1;
- (_Bool)_validateProtocolInfo:(id)arg1;
- (void)_continuePairingAfterMFiCertValidation;
- (void)_queueAddPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(_Bool)arg3 queue:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_handlePairingsResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 httpError:(id)arg4 removeRequest:(_Bool)arg5 completionQueue:(id)arg6 completionBlock:(CDUnknownBlockType)arg7;
- (void)_removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_establishSecureSessionAndRemovePairing:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_sendRemovePairingWithData:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_queueListPairingWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_handleListPairingsResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 httpError:(id)arg4 completionQueue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)httpClient:(id)arg1 didReceiveEvent:(id)arg2;
- (void)httpClientDidCloseConnectionDueToServer:(id)arg1;
- (void)httpClient:(id)arg1 didReceiveHTTPMessageWithHeaders:(id)arg2 body:(id)arg3;
- (void)httpClient:(id)arg1 willSendHTTPMessageWithHeaders:(id)arg2 body:(id)arg3;
- (id)initWithBonjourDeviceInfo:(id)arg1 keyStore:(id)arg2 browser:(id)arg3;
- (void)invalidateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)hasBonjourDeviceInfo;
- (id)initWithHAPWACAccessory:(id)arg1 keystore:(id)arg2 browser:(id)arg3;
- (void)startReprovisioningWiFiConfig:(id)arg1;
- (void)resetPostSoftAuthWAC;
- (void)continuePairingUsingWAC;
- (void)resolveLocalHostnameWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)createKeysForDataStreamWithKeySalt:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)primaryAccessory;
- (void)discoverAccessories;
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;
- (void)tearDownAndRestablishSession;
- (_Bool)stopPairingWithError:(id *)arg1;
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;
- (_Bool)isSessionEstablised;
- (void)_handlePairSetupAfterM4Callback;
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;
- (void)_requestResource:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)requestResource:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;

@end
