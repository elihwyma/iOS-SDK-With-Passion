/*
 Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import <Foundation/NSObject.h>

@class AVAsset, AVPlayerItem, AVPlayerItemAccessLog, ICMusicSubscriptionLeaseStatus, MPAlternateTracks, MPMediaItem, MPModelGenericObject, MPModelPlayEvent, MPNowPlayingContentItem, MPQueueFeeder, NSArray, NSDictionary, NSError, NSNumber, NSString, NSURL;

@protocol MPAVItemObserver, OS_dispatch_queue;

@interface MPAVItem : NSObject

{
    AVAsset *_asset;
    NSObject<OS_dispatch_queue> *_assetQueue;
    AVPlayerItem *_avPlayerItem;
    _Bool _isAssetLoaded;
    MPQueueFeeder *_feeder;
    float _soundCheckVolumeNormalization;
    NSArray *_chapterTimeMarkers;
    NSArray *_artworkTimeMarkers;
    NSArray *_urlTimeMarkers;
    NSArray *_closedCaptionTimeMarkers;
    MPAlternateTracks *_alternateTracks;
    double _cachedDuration;
    double _cachedPlayableDuration;
    NSArray *_cachedSeekableTimeRanges;
    double _seekableTimeRangesCacheTime;
    long long _type;
    MPNowPlayingContentItem *_contentItem;
    float _defaultPlaybackRate;
    unsigned int _advancedDuringPlayback:1;
    unsigned int _handledFinishTime:1;
    unsigned int _hasPlayedThisSession:1;
    unsigned int _wasCountedAsSkipped:1;
    unsigned int _isStreamable:2;
    unsigned int _watchingAttributes:1;
    unsigned int _userChangedItemsDuringPlayback:1;
    unsigned int _lyricsAvailable:1;
    unsigned int _timeMarkersNeedLoading:1;
    NSObject<OS_dispatch_queue> *_accessQueue;
    _Bool _hasLoadedHasProtectedContent;
    _Bool _hasLoadedPlaybackMode;
    _Bool _hasPostedNaturalSizeChange;
    _Bool _hasRegisteredForCaptionsAppearanceChanged;
    _Bool _hasValidPlayerItemDuration;
    double _lastLoggedTotalDuration;
    long long _likedState;
    CDStruct_1b6d18a9 _playerItemDuration;
    long long _exportableArtworkRevision;
    _Bool _meetsPlaybackHistoryThreshold;
    _Bool _assetLoaded;
    _Bool _didAttemptToLoadAsset;
    _Bool _canReusePlayerItem;
    _Bool _likedStateEnabled;
    _Bool _supportsLikedState;
    _Bool _prefersSeekOverSkip;
    _Bool _hasProtectedContent;
    _Bool _tailPlaceholder;
    _Bool _startItem;
    _Bool _shouldPreventPlayback;
    _Bool _allowsAirPlayFromCloud;
    _Bool _allowsExternalPlayback;
    _Bool _requiresLoadedAssetForAirPlayProperties;
    _Bool _hasFinishedDownloading;
    _Bool _hasPerformedErrorResolution;
    _Bool _activeItem;
    _Bool _externalDisplay;
    float _currentPlaybackRate;
    float _loudnessInfoVolumeNormalization;
    id <MPAVItemObserver> _observer;
    NSError *_itemError;
    NSString *_queueIdentifier;
    long long _playbackMode;
    long long _albumStoreID;
    NSArray *_buyOffers;
    NSString *_copyrightText;
    NSString *_externalContentIdentifier;
    long long _storeItemInt64ID;
    long long _storeSubscriptionAdamID;
    MPMediaItem *_mediaItem;
    MPModelGenericObject *_modelGenericObject;
    NSString *_aggregateDictionaryItemIdentifier;
    NSString *_storeFrontIdentifier;
    NSNumber *_storeAccountID;
    NSNumber *_useListeningHistory;
    long long _leasePlaybackPreventionState;
    ICMusicSubscriptionLeaseStatus *_leaseStatus;
    NSString *_contentItemID;
}

@property _Bool isAssetLoaded;
@property (retain, nonatomic) NSArray *chapterTimeMarkers;
@property (retain, nonatomic) NSArray *artworkTimeMarkers;
@property (retain, nonatomic) NSArray *urlTimeMarkers;
@property (nonatomic, readonly, getter=isPlaceholder) _Bool placeholder;
@property (nonatomic, readonly, getter=isTailPlaceholder) _Bool tailPlaceholder;
@property (nonatomic, getter=isStartItem) _Bool startItem;
@property (nonatomic, readonly) _Bool shouldPreventPlayback;
@property (nonatomic, readonly) MPModelGenericObject *modelGenericObject;
@property (nonatomic, readonly) MPModelPlayEvent *modelPlayEvent;
@property (copy, nonatomic, readonly) NSNumber *bookmarkTime;
@property (copy, nonatomic, readonly) NSNumber *initialPlaybackStartTime;
@property (nonatomic, readonly) _Bool allowsAirPlayFromCloud;
@property (nonatomic, readonly) _Bool allowsExternalPlayback;
@property (nonatomic, readonly) _Bool requiresLoadedAssetForAirPlayProperties;
@property (copy, nonatomic, readonly) NSString *aggregateDictionaryItemIdentifier;
@property (nonatomic, getter=_currentPlaybackRate, setter=_setCurrentPlaybackRate:) float _currentPlaybackRate;
@property (nonatomic, readonly) _Bool hasFinishedDownloading;
@property (nonatomic) _Bool hasPerformedErrorResolution;
@property (copy, nonatomic, readonly) NSDictionary *playbackInfo;
@property (retain, nonatomic) AVPlayerItem *playerItem;
@property (nonatomic, readonly) struct OpaqueCMTimebase *timebase;
@property (nonatomic, getter=isActiveItem) _Bool activeItem;
@property (copy, nonatomic, readonly) NSString *storeFrontIdentifier;
@property (nonatomic, getter=hasExternalDisplay) _Bool externalDisplay;
@property (nonatomic, readonly) CDStruct_1b6d18a9 _playerItemDurationIfAvailable;
@property (nonatomic, readonly) NSNumber *storeAccountID;
@property (nonatomic, readonly) NSNumber *useListeningHistory;
@property (nonatomic, readonly) long long leasePlaybackPreventionState;
@property (copy, nonatomic, readonly) ICMusicSubscriptionLeaseStatus *leaseStatus;
@property (nonatomic, readonly) _Bool canUseLoadedAsset;
@property (copy, nonatomic) NSString *contentItemID;
@property (nonatomic, readonly) MPNowPlayingContentItem *contentItem;
@property (weak, nonatomic) id <MPAVItemObserver> observer;
@property (nonatomic, readonly) _Bool meetsPlaybackHistoryThreshold;
@property (nonatomic, readonly, getter=isAssetLoaded) _Bool assetLoaded;
@property (nonatomic, readonly, getter=isAssetURLValid) _Bool assetURLValid;
@property (nonatomic, readonly) _Bool didAttemptToLoadAsset;
@property (nonatomic, readonly) AVAsset *asset;
@property (nonatomic, readonly) _Bool canReusePlayerItem;
@property (copy, nonatomic, readonly) NSError *playbackError;
@property (retain, nonatomic) NSError *itemError;
@property (nonatomic, readonly) long long status;
@property (retain, nonatomic) NSString *queueIdentifier;
@property (nonatomic, readonly, getter=isAlwaysLive) _Bool alwaysLive;
@property (nonatomic) _Bool userAdvancedDuringPlayback;
@property (nonatomic) _Bool userChangedItemsDuringPlayback;
@property (nonatomic) _Bool userSkippedPlayback;
@property (weak, nonatomic) MPQueueFeeder *feeder;
@property (nonatomic) _Bool hasPlayedThisSession;
@property (nonatomic, readonly) long long playbackMode;
@property (nonatomic, readonly) AVPlayerItemAccessLog *accessLog;
@property (nonatomic, readonly) double currentTimeDisplayOverride;
@property (nonatomic) float defaultPlaybackRate;
@property (retain, nonatomic) NSArray *closedCaptionTimeMarkers;
@property (nonatomic, readonly) _Bool useEmbeddedChapterData;
@property (nonatomic, readonly) long long type;
@property (nonatomic, readonly) long long customAVEQPreset;
@property (nonatomic, readonly) _Bool allowsEQ;
@property (nonatomic, readonly) MPAlternateTracks *alternateTracks;
@property (nonatomic, readonly) NSString *displayableText;
@property (nonatomic, readonly) _Bool displayableTextLoaded;
@property (nonatomic, readonly) NSString *album;
@property (nonatomic, readonly) long long albumStoreID;
@property (nonatomic, readonly) NSString *artist;
@property (nonatomic, readonly) NSString *albumArtist;
@property (nonatomic, readonly) long long artistStoreID;
@property (nonatomic, readonly) unsigned long long albumTrackNumber;
@property (nonatomic, readonly) unsigned long long albumTrackCount;
@property (copy, nonatomic, readonly) NSArray *buyOffers;
@property (nonatomic, readonly) _Bool canSeedGenius;
@property (nonatomic, readonly) NSString *composer;
@property (copy, nonatomic, readonly) NSString *copyrightText;
@property (nonatomic, readonly) unsigned long long discNumber;
@property (nonatomic, readonly) unsigned long long discCount;
@property (nonatomic, readonly, getter=isExplicitTrack) _Bool explicitTrack;
@property (copy, nonatomic, readonly) NSString *externalContentIdentifier;
@property (nonatomic, readonly) NSString *genre;
@property (nonatomic, readonly) unsigned long long mediaType;
@property (nonatomic) long long likedState;
@property (nonatomic, readonly, getter=isLikedStateEnabled) _Bool likedStateEnabled;
@property (nonatomic, readonly) _Bool supportsLikedState;
@property (nonatomic, readonly) NSString *lyrics;
@property (nonatomic, readonly) NSString *libraryLyrics;
@property (nonatomic, readonly) _Bool hasStoreLyrics;
@property (nonatomic, readonly) _Bool hasTimeSyncedLyrics;
@property (copy, nonatomic, readonly) NSString *containerUniqueID;
@property (nonatomic, readonly) NSString *mainTitle;
@property (nonatomic, readonly) NSURL *podcastURL;
@property (nonatomic, readonly, getter=isStreamable) _Bool streamable;
@property (nonatomic, readonly) unsigned long long persistentID;
@property (nonatomic, readonly) NSString *databaseID;
@property (nonatomic, readonly) unsigned long long cloudID;
@property (nonatomic, readonly) NSString *personID;
@property (nonatomic, readonly) NSString *cloudUniversalLibraryID;
@property (nonatomic, readonly) NSString *cloudAlbumID;
@property (nonatomic, readonly) unsigned long long albumPersistentID;
@property (nonatomic, readonly) unsigned long long albumArtistPersistentID;
@property (nonatomic, readonly) unsigned long long artistPersistentID;
@property (nonatomic, readonly) unsigned long long genrePersistentID;
@property (nonatomic, readonly) unsigned long long composerPersistentID;
@property (nonatomic, readonly) _Bool shouldShowComposer;
@property (nonatomic, readonly) NSString *storeItemID;
@property (nonatomic, readonly) long long storeItemInt64ID;
@property (nonatomic, readonly) long long storePurchasedAdamID;
@property (nonatomic, readonly) long long storeSubscriptionAdamID;
@property (nonatomic, readonly) float userRating;
@property (nonatomic, readonly) _Bool supportsRewindAndFastForward15Seconds;
@property (nonatomic, readonly) _Bool durationIsValid;
@property (nonatomic, readonly) double durationIfAvailable;
@property (nonatomic, readonly) double durationFromExternalMetadata;
@property (nonatomic, readonly) double playableDuration;
@property (nonatomic, readonly) double playableDurationIfAvailable;
@property (nonatomic, readonly) double timeOfSeekableStart;
@property (nonatomic, readonly) double timeOfSeekableEnd;
@property (nonatomic, readonly) struct CGSize naturalSize;
@property (nonatomic, readonly) NSArray *timedMetadataIfAvailable;
@property (nonatomic, readonly) _Bool usesSubscriptionLease;
@property (retain, nonatomic, readonly) MPMediaItem *mediaItem;
@property (nonatomic) float loudnessInfoVolumeNormalization;
@property (nonatomic) float soundCheckVolumeNormalization;
@property (nonatomic, readonly) _Bool supportsRating;
@property (nonatomic, readonly) _Bool prefersSeekOverSkip;
@property (nonatomic, readonly) _Bool isAd;
@property (nonatomic, readonly) _Bool hasProtectedContent;
@property (nonatomic, getter=isInWishList) _Bool inWishList;
@property (nonatomic, readonly, getter=isRadioItem) _Bool radioItem;
@property (nonatomic, readonly) _Bool stationAllowsItemLiking;
@property (copy, nonatomic, readonly) NSString *stationHash;
@property (nonatomic, readonly) long long stationID;
@property (copy, nonatomic, readonly) NSString *stationName;
@property (copy, nonatomic, readonly) NSString *stationStringID;
@property (nonatomic, readonly) _Bool supportsRadioTrackActions;
@property (nonatomic, readonly) CDStruct_1b6d18a9 duration;
@property (nonatomic) CDStruct_1b6d18a9 forwardPlaybackEndTime;
@property (nonatomic, readonly) struct CGSize presentationSize;

+ (_Bool)isPlaceholder;
+ (long long)defaultScaleMode;
+ (void)setDefaultScaleMode:(long long)arg1;
+ (_Bool)hasNominalAmountBeenPlayedForElapsedTime:(double)arg1 startTime:(double)arg2 stopTime:(double)arg3;
+ (_Bool)shouldIncrementPlayCountForElapsedTime:(double)arg1 startTime:(double)arg2 stopTime:(double)arg3;
+ (double)nominalHasBeenPlayedThresholdForDuration:(double)arg1;
+ (id)URLFromPath:(id)arg1;

- (id)init;
- (void)dealloc;
- (id)initWithURL:(id)arg1;
- (id)path;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)url;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)initWithAsset:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)setRating:(float)arg1;
- (id)_seekableTimeRanges;
- (id)initWithPlayerItem:(id)arg1;
- (void)setSelectedAlternateTextTrack:(id)arg1;
- (void)setMeetsPlaybackHistoryThresholdForElapsedTime:(double)arg1 startTime:(double)arg2;
- (_Bool)isSupportedDefaultPlaybackSpeed:(long long)arg1;
- (void)_releaseAllTimeMarkers;
- (void)flushNowPlayingCaches;
- (void)disableItemReuse;
- (void)loadAssetAndPlayerItem;
- (void)_loadAssetAndPlayerItem;
- (void)resetBookkeeping;
- (void)setAlternateAudioTrackID:(int)arg1;
- (void)setAlternateAudioTrackLocale:(id)arg1;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)notePlaybackFinishedByHittingEnd;
- (void)setPlaybackCheckpointCurrentTime:(double)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
- (int)subtitleTrackID;
- (void)setSubtitleTrackID:(int)arg1;
- (double)durationInSeconds;
- (long long)albumYear;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(_Bool)arg1;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;
- (_Bool)hasAlternatesForTypes:(unsigned long long)arg1;
- (unsigned long long)alternatesCountForTypes:(unsigned long long)arg1;
- (_Bool)hasDataForItemArtwork;
- (_Bool)hasDisplayableText;
- (float)playbackRateForLevel:(unsigned long long)arg1 direction:(long long)arg2 paused:(_Bool)arg3;
- (void)prepareForRate:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)scanIntervalForLevel:(unsigned long long)arg1 paused:(_Bool)arg2;
- (void)setOverrideDuration:(double)arg1;
- (void)setLikedState:(long long)arg1 forUserIdentity:(id)arg2;
- (void)_realoadEmbeddedTimeMarkers;
- (void)_loadTimeMarkersBlocking;
- (void)_loadTimeMarkersAsync;
- (id)_timeMarkerFromMarkers:(id)arg1 forTime:(double)arg2;
- (id)chapterTimeMarkerForTime:(double)arg1;
- (id)artworkTimeMarkerForTime:(double)arg1;
- (id)urlTimeMarkerForTime:(double)arg1;
- (id)closedCaptionTimeMarkerForTime:(double)arg1;
- (id)_imageChapterTrackIDsForAsset:(id)arg1;
- (double)_durationFromExternalMetadataIfAvailable;
- (void)_internalLikedStateDidChangeNotification:(id)arg1;
- (void)_itemAttributeAvailableKey:(id)arg1;
- (void)_captionAppearanceSettingsChanged;
- (void)_addObservationsForAVPlayerItem:(id)arg1;
- (void)_removeObservationsForAVPlayerItem:(id)arg1;
- (id)_currentContentItemDeviceSpecificUserInfo;
- (void)_likedStateDidChange;
- (id)_initialPlaybackStartTimeForPlaybackInfo:(id)arg1;
- (void)_loadAvailableMediaCharacteristicsIfNeeded;
- (double)_playableDurationForLoadedTimeRanges:(id)arg1;
- (void)_loadAssetProperties;
- (void)_updateSoundCheckVolumeNormalizationForPlayerItem;
- (_Bool)_shouldPublishArtworkURL;
- (void)_performContentItemUpdate:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)blockForDirectAVControllerNotificationReferencingItem:(id)arg1;
- (void)_clearAsset;
- (void)setupEQPresetWithDefaultPreset:(long long)arg1;
- (void)setupPlaybackInfo;
- (_Bool)_isBackgroundPlaybackRestricted;
- (void)_updateDurationSnapshotWithElapsedTime:(double)arg1 playbackRate:(float)arg2;
- (void)_currentPlaybackRateDidChange:(float)arg1;
- (void)_applyLoudnessInfo;
- (double)_expectedStartTimeWithPlaybackInfo:(id)arg1;
- (double)_expectedStopTimeWithPlaybackInfo:(id)arg1;
- (void)_handleUpdatedLikedState:(long long)arg1 forUserIdentity:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (long long)_persistedLikedState;
- (void)_setNeedsPersistedLikedStateUpdate;
- (void)_setListeningForCaptionsAppearanceSettingsChanged:(_Bool)arg1;
- (void)invalidateContentItemDeviceSpecificUserInfo;
- (void)reevaluateHasProtectedContent;
- (void)reevaluateType;
- (void)replacePlayerItemWithPlayerItem:(id)arg1;
- (void)resolvePlaybackError:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)_updateHasFinishedDownloading;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (id)artworkCatalogForPlaybackTime:(double)arg1;
- (CDUnknownBlockType)artworkCatalogBlock;

@end
