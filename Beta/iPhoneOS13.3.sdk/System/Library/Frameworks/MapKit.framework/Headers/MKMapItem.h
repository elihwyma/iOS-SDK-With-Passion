/*
 Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

#import <Foundation/NSObject.h>

@class GEOAddress, GEOBusinessHours, GEOFeatureStyleAttributes, GEOMapItemDetourInfo, GEOMapItemStorage, GEOMapItemStorageUserValues, GEOMapRegion, GEOModuleLayoutEntry, GEOMuninViewState, GEOPDBusinessClaim, GEOPDFlyover, GEOPlace, GEORelatedPlaceList, MKMapItemIdentifier, MKMapItemMetadata, MKPlacemark, NSArray, NSData, NSDate, NSNumber, NSNumberFormatter, NSString, NSTimeZone, NSURL, UIColor, _MKMapItemPhotosAttribution, _MKMapItemPlaceAttribution, _MKMapItemReviewsAttribution, _MKPlaceReservationInfo;

@protocol GEOAnnotatedItemList, GEOEncyclopedicInfo, GEOMapItem, GEOMapItemPrivate, GEOMapItemTransitInfo, GEOMapItemVenueInfo, GEOTransitAttribution, MKTransitInfoPreload, NSObject;

@interface MKMapItem : NSObject

{
    _Bool _isCurrentLocation;
    _Bool _isPlaceHolder;
    id <GEOMapItem> _geoMapItem;
    MKMapItemIdentifier *_identifier;
    _Bool _isTransitInfoUpdated;
    NSDate *_transitInfoUpdatedDate;
    id <GEOMapItemTransitInfo> _updatedTransitInfo;
    id <GEOMapItemTransitInfo> _defaultTransitInfo;
    id <GEOTransitAttribution> _updatedTransitAttribution;
    _MKMapItemPlaceAttribution *_attribution;
    _MKMapItemPhotosAttribution *_photosAttribution;
    _MKMapItemReviewsAttribution *_reviewsAttribution;
    GEOMapItemStorageUserValues *_userValues;
    id <NSObject> _didResolveAttributionToken;
    NSString *_shortAddress;
    NSString *_firstLocalizedCategoryName;
    NSNumberFormatter *_numberFormatterForAdamId;
    NSString *_localizedSampleSizeForUserRatingScoreString;
    _Bool _isMapItemTypeTransit;
    MKMapItemMetadata *_metadata;
    GEOPlace *_place;
    _MKPlaceReservationInfo *_reservationInfo;
    NSString *_pointOfInterestCategory;
    id <MKTransitInfoPreload> _preloadedTransitInfo;
}

@property (nonatomic, readonly) NSString *formattedNumberOfReviews;
@property (nonatomic, readonly) NSString *formattedNumberOfReviewsIncludingProvider;
@property (nonatomic, readonly, getter=_transitInfoUpdatedDate) NSDate *transitInfoUpdatedDate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;
@property (copy, nonatomic, readonly) NSArray *writableTypeIdentifiersForItemProvider;
@property (readonly, getter=_isEmptyContactMapItem) _Bool isEmptyContactMapItem;
@property (nonatomic) _Bool isCurrentLocation;
@property (nonatomic, readonly) GEOMapItemStorageUserValues *userValues;
@property (nonatomic, readonly) MKMapItemMetadata *metadata;
@property (nonatomic, readonly) GEOPlace *place;
@property (nonatomic, readonly, getter=_geoMapItem) id <GEOMapItemPrivate> geoMapItem;
@property (nonatomic, readonly, getter=_geoMapItemStorageForPersistence) GEOMapItemStorage *geoMapItemStorageForPersistence;
@property (nonatomic, readonly, getter=_geoMapItemStorageForDragAndDrop) GEOMapItemStorage *geoMapItemStorageForDragAndDrop;
@property (nonatomic, readonly) NSString *yelpID;
@property (nonatomic, readonly) _Bool isPlaceHolder;
@property (nonatomic, readonly, getter=_coordinate) struct CLLocationCoordinate2D coordinate;
@property (nonatomic, readonly, getter=_displayMapRegion) GEOMapRegion *displayMapRegion;
@property (nonatomic, readonly, getter=_hasDisplayMinZoom) _Bool hasDisplayMinZoom;
@property (nonatomic, readonly, getter=_displayMinZoom) float displayMinZoom;
@property (nonatomic, readonly, getter=_hasDisplayMaxZoom) _Bool hasDisplayMaxZoom;
@property (nonatomic, readonly, getter=_displayMaxZoom) float displayMaxZoom;
@property (nonatomic, readonly, getter=_geoFenceMapRegion) GEOMapRegion *geoFenceMapRegion;
@property (nonatomic, readonly, getter=_hasTransit) _Bool hasTransit;
@property (nonatomic, readonly, getter=_hasTransitDisplayName) _Bool hasTransitDisplayName;
@property (nonatomic, readonly, getter=_transitDisplayName) NSString *transitDisplayName;
@property (nonatomic, readonly, getter=_hasTransitLabels) _Bool hasTransitLabels;
@property (nonatomic, readonly, getter=_transitAttribution) id <GEOTransitAttribution> transitAttribution;
@property (nonatomic, readonly, getter=_transitInfo) id <GEOMapItemTransitInfo> transitInfo;
@property (nonatomic, readonly, getter=_preloadedTransitInfo) id <MKTransitInfoPreload> preloadedTransitInfo;
@property (nonatomic, readonly, getter=_geoAddress) GEOAddress *geoAddress;
@property (nonatomic, readonly, getter=_hasFlyover) _Bool hasFlyover;
@property (nonatomic, readonly, getter=_flyover) GEOPDFlyover *flyover;
@property (nonatomic, readonly, getter=_flyoverAnnouncementMessage) NSString *flyoverAnnouncementMessage;
@property (nonatomic, readonly, getter=_identifier) MKMapItemIdentifier *identifier;
@property (nonatomic, readonly, getter=_hasMUID) _Bool hasMUID;
@property (nonatomic, readonly, getter=_muid) unsigned long long muid;
@property (nonatomic, readonly, getter=_hasResultProviderID) _Bool hasResultProviderID;
@property (nonatomic, readonly, getter=_resultProviderID) int resultProviderID;
@property (nonatomic, readonly, getter=_phoneNumberOptsOutOfAds) _Bool phoneNumberOptsOutOfAds;
@property (nonatomic, readonly, getter=_firstLocalizedCategoryName) NSString *firstLocalizedCategoryName;
@property (nonatomic, readonly, getter=_hasUserRatingScore) _Bool hasUserRatingScore;
@property (nonatomic, readonly, getter=_sampleSizeForUserRatingScore) unsigned int sampleSizeForUserRatingScore;
@property (nonatomic, readonly, getter=_localizedSampleSizeForUserRatingScoreString) NSString *localizedSampleSizeForUserRatingScoreString;
@property (nonatomic, readonly, getter=_normalizedUserRatingScore) float normalizedUserRatingScore;
@property (nonatomic, readonly, getter=_hasPriceDescription) _Bool hasPriceDescription;
@property (nonatomic, readonly, getter=_priceDescription) NSString *priceDescription;
@property (nonatomic, readonly, getter=_hasPriceRange) _Bool hasPriceRange;
@property (nonatomic, readonly, getter=_priceRangeString) NSString *priceRangeString;
@property (nonatomic, readonly, getter=_shortAddress) NSString *shortAddress;
@property (nonatomic, readonly, getter=_hasAnyAmenities) _Bool hasAnyAmenities;
@property (nonatomic, readonly, getter=_hasAcceptsApplePayAmenity) _Bool hasAcceptsApplePayAmenity;
@property (nonatomic, readonly, getter=_acceptsApplePay) _Bool acceptsApplePay;
@property (nonatomic, readonly, getter=_amenities) NSArray *amenities;
@property (nonatomic, readonly, getter=_hasResolvablePartialInformation) _Bool hasResolvablePartialInformation;
@property (nonatomic, readonly, getter=_responseStatusIsIncomplete) _Bool responseStatusIncomplete;
@property (nonatomic, readonly, getter=_hasOperatingHours) _Bool hasOperatingHours;
@property (nonatomic, readonly, getter=_hasLocalizedOperatingHours) _Bool hasLocalizedOperatingHours;
@property (nonatomic, readonly, getter=_parsecSectionType) int parsecSectionType;
@property (nonatomic, readonly, getter=_isStandAloneBrand) _Bool isStandAloneBrand;
@property (nonatomic, readonly, getter=_hasBrandMUID) _Bool hasBrandMUID;
@property (nonatomic, readonly, getter=_brandMUID) unsigned long long brand;
@property (nonatomic, readonly, getter=_isMapItemTypeUnknown) _Bool isMapItemTypeUnknown;
@property (nonatomic, readonly, getter=_isMapItemTypeBusiness) _Bool isMapItemTypeBusiness;
@property (nonatomic, readonly, getter=_isMapItemTypeSettlement) _Bool isMapItemTypeSettlement;
@property (nonatomic, readonly, getter=_isMapItemTypeAddress) _Bool isMapItemTypeAddress;
@property (nonatomic, getter=_isMapItemTypeTransit) _Bool isMapItemTypeTransit;
@property (nonatomic, readonly, getter=_isMapItemTypeBrand) _Bool isMapItemTypeBrand;
@property (nonatomic, readonly, getter=_localizedResponseTime) NSString *localizedResponseTime;
@property (nonatomic, readonly, getter=_messageBusinessHours) GEOBusinessHours *messageBusinessHours;
@property (nonatomic, readonly, getter=_hasEncyclopedicInfo) _Bool hasEncyclopedicInfo;
@property (nonatomic, readonly, getter=_encyclopedicInfo) id <GEOEncyclopedicInfo> encyclopedicInfo;
@property (nonatomic, readonly, getter=_openingHoursOptions) unsigned long long openingHoursOptions;
@property (nonatomic, readonly, getter=_placeDataAsData) NSData *placeDataAsData;
@property (nonatomic, readonly, getter=_poiSurveyURLString) NSString *poiSurveyURLString;
@property (nonatomic, readonly, getter=_poiPinpointURLString) NSString *poiPinpointURLString;
@property (nonatomic, readonly, getter=_hasCorrectedHomeWorkCoordinate) _Bool hasCorrectedHomeWorkCoordinate;
@property (nonatomic, readonly, getter=_hasCorrectedHomeWorkAddress) _Bool hasCorrectedHomeWorkAddress;
@property (nonatomic, readonly, getter=_hasVenueFeatureType) _Bool hasVenueFeatureType;
@property (nonatomic, readonly, getter=_venueFeatureType) long long venueFeatureType;
@property (nonatomic, readonly, getter=_venueInfo) id <GEOMapItemVenueInfo> venueInfo;
@property (nonatomic, readonly, getter=_browseCategories) NSArray *browseCategories;
@property (nonatomic, readonly, getter=_placeDisplayStyle) int placeDisplayStyle;
@property (nonatomic, readonly, getter=_annotatedItemList) id <GEOAnnotatedItemList> annotatedItemList;
@property (nonatomic, readonly, getter=_hasMuninViewState) _Bool hasMuninViewState;
@property (nonatomic, readonly, getter=_muninViewState) GEOMuninViewState *muninViewState;
@property (nonatomic, readonly, getter=_needsAttribution) _Bool needsAttribution;
@property (copy, nonatomic, readonly, getter=_webURL) NSURL *webURL;
@property (copy, nonatomic, readonly, getter=_providerURL) NSURL *providerURL;
@property (copy, nonatomic, readonly, getter=_vendorID) NSString *vendorID;
@property (nonatomic, readonly, getter=_reviewsDisplayName) NSString *reviewsDisplayName;
@property (nonatomic, readonly, getter=_attribution) _MKMapItemPlaceAttribution *attribution;
@property (nonatomic, readonly, getter=_photosAttribution) _MKMapItemPhotosAttribution *photosAttribution;
@property (nonatomic, readonly, getter=_reviewsAttribution) _MKMapItemReviewsAttribution *reviewsAttribution;
@property (nonatomic, readonly, getter=_styleAttributes) GEOFeatureStyleAttributes *styleAttributes;
@property (nonatomic, readonly, getter=_customIconID) unsigned long long customIconID;
@property (nonatomic, readonly, getter=_reviews) NSArray *reviews;
@property (nonatomic, readonly, getter=_tips) NSArray *tips;
@property (nonatomic, readonly) NSString *reviewsProviderDisplayName;
@property (nonatomic, readonly, getter=_handle) NSData *handle;
@property (nonatomic, readonly, getter=_hasBusinessClaim) _Bool hasBusinessClaim;
@property (nonatomic, readonly, getter=_businessClaim) GEOPDBusinessClaim *businessClaim;
@property (retain, nonatomic) _MKPlaceReservationInfo *reservationInfo;
@property (nonatomic, readonly, getter=_detourInfo) GEOMapItemDetourInfo *detourInfo;
@property (nonatomic, readonly, getter=_externalTransitStationCode) NSData *externalTransitStationCode;
@property (nonatomic, readonly, getter=_messageID) NSString *messageID;
@property (nonatomic, readonly, getter=_messageURLString) NSString *messageURLString;
@property (nonatomic, readonly, getter=_isMessageIDVerified) _Bool isMessageIDVerified;
@property (nonatomic, readonly, getter=_quickLinks) NSArray *quickLinks;
@property (nonatomic, readonly, getter=_placeCollections) NSArray *placeCollections;
@property (nonatomic, readonly, getter=_relatedPlaceList) GEORelatedPlaceList *relatedPlaceList;
@property (nonatomic, readonly, getter=_preferedAppAdamID) NSNumber *preferedAppAdamID;
@property (nonatomic, readonly, getter=_alternativeAppAdamIds) NSArray *alternativeAppAdamIds;
@property (nonatomic, readonly, getter=_placecardLayout) GEOModuleLayoutEntry *placecardLayout;
@property (nonatomic, readonly, getter=_navTintBrandColor) UIColor *navTintBrandColor;
@property (nonatomic, readonly, getter=_navBackgroundbrandColor) UIColor *navBackgroundbrandColor;
@property (nonatomic, readonly, getter=_secondaryName) NSString *secondaryName;
@property (nonatomic, readonly, getter=_secondarySpokenName) NSString *secondarySpokenName;
@property (nonatomic, readonly, getter=_hasBusinessHours) _Bool hasBusinessHours;
@property (nonatomic, readonly, getter=_businessHours) NSArray *businessHours;
@property (nonatomic, readonly, getter=_hasLinkedServices) _Bool hasLinkedServices;
@property (nonatomic, readonly, getter=_linkedServices) NSArray *linkedServices;
@property (nonatomic, readonly, getter=_hasMuninStorefront) _Bool hasMuninStorefront;
@property (nonatomic, readonly) MKPlacemark *placemark;
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSString *phoneNumber;
@property (retain, nonatomic) NSURL *url;
@property (copy, nonatomic) NSTimeZone *timeZone;
@property (copy, nonatomic) NSString *pointOfInterestCategory;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (copy, readonly) NSString *description;
@property (copy, readonly) NSString *debugDescription;

+ (_Bool)supportsSecureCoding;
+ (id)objectWithItemProviderData:(id)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (id)writableTypeIdentifiersForItemProvider;
+ (id)readableTypeIdentifiersForItemProvider;
+ (id)mapItemsFromURL:(id)arg1 options:(id *)arg2;
+ (void)_mapItemsFromHandleURL:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)mapItemForCurrentLocation;
+ (id)_itemWithGeoMapItem:(id)arg1;
+ (id)urlForMapItems:(id)arg1 options:(id)arg2;
+ (void)openMapsWithItems:(id)arg1 launchOptions:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)urlForMapItem:(id)arg1 options:(id)arg2;
+ (id)_sharedSessionUserInfoForPunchoutUserInfo:(id)arg1;
+ (id)_localizedNextOpeningHoursFormatter;
+ (id)_localizedNextOpeningDayOftheWeekFormatter;
+ (id)_urlForMapItemHandles:(id)arg1 options:(id)arg2;
+ (id)_deserializeResourceOptionsFromURL:(id)arg1 error:(out id *)arg2;
+ (id)_launchOptionsFromResourceOptionsDictionary:(id)arg1;
+ (void)_mapItemFromHandle:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)sanitizeDictionary:(id)arg1;
+ (id)_launchOptionsWithOptions:(id)arg1;
+ (id)standardOptionsFromPlistCompatibleDictionary:(id)arg1;
+ (_Bool)valueIsValid:(id)arg1 forKey:(id)arg2;
+ (id)sanitizeArray:(id)arg1 forKey:(id)arg2;
+ (id)sanitizeObject:(id)arg1 forKey:(id)arg2;
+ (id)_mapItemBackedByURL:(id)arg1;
+ (id)mapItemWithDictionary:(id)arg1;
+ (id)plistCompatibleDictionaryFromStandardOptions:(id)arg1;
+ (void)openMapsWithItems:(id)arg1 launchOptions:(id)arg2 fromScene:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (_Bool)openMapsWithItems:(id)arg1 launchOptions:(id)arg2;
+ (_Bool)_openHandleInMaps:(id)arg1 withLaunchOptions:(id)arg2;
+ (void)_openHandleInMaps:(id)arg1 withLaunchOptions:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)_sharedSessionURLForPunchoutURL:(id)arg1;
+ (id)_sourceAppIdFromLaunchURL:(id)arg1;
+ (id)_sourceAppIdFromLaunchUserInfo:(id)arg1;
+ (id)launchOptionsFromURL:(id)arg1;
+ (id)_urlForLocation:(id)arg1 address:(id)arg2 label:(id)arg3 options:(id)arg4;
+ (id)mapItemWithSerializedPlaceData:(id)arg1 serializedDetourInfo:(id)arg2 currentLocation:(_Bool)arg3;
+ (id)_itemWithContact:(id)arg1 geoMapItem:(id)arg2;
+ (id)mapItemWithSerializedPlaceData:(id)arg1;
+ (void)_mapItemsWithSerializedPlaceDataResponse:(id)arg1 handler:(CDUnknownBlockType)arg2;
+ (id)_mapItemWithWithLocation:(id)arg1 addressDictionary:(id)arg2 name:(id)arg3 businessURL:(id)arg4 phoneNumber:(id)arg5 sessionID:(id)arg6 muid:(unsigned long long)arg7 attributionID:(id)arg8 sampleSizeForUserRatingScore:(unsigned int)arg9 normalizedUserRatingScore:(float)arg10;
+ (void)_fillOutRequest:(id)arg1 withMapsDataString:(id)arg2;
+ (id)contactsAddressKeysForGeoAddressKeys;
+ (id)contactsAddressDictionaryFromGeoAddressDictionary:(id)arg1;
+ (id)ticketForMapsDataString:(id)arg1 name:(id)arg2;
+ (id)_mapItemFromVCardRepresentation:(id)arg1 error:(id *)arg2;

- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)dictionaryRepresentation;
- (id)loadDataWithTypeIdentifier:(id)arg1 forItemProviderCompletionHandler:(CDUnknownBlockType)arg2;
- (id)initWithPlacemark:(id)arg1;
- (id)initWithUrlRepresentation:(id)arg1;
- (id)urlRepresentation;
- (_Bool)_isEquivalentURLRepresentationTo:(id)arg1;
- (id)initWithPlace:(id)arg1;
- (_Bool)hasAmenityType:(int)arg1;
- (_Bool)valueForAmenityType:(int)arg1;
- (id)_localizedCategoryNamesForType:(unsigned int)arg1;
- (_Bool)_hasLocalizedCategoryNamesForType:(unsigned int)arg1;
- (id)_bestNavbarBrandIconURLForSize:(struct CGSize)arg1 allowSmaller:(_Bool)arg2;
- (id)initWithAddressDictionary:(id)arg1;
- (id)initWithContact:(id)arg1;
- (id)_activityURLUsingWebPlaceCard:(_Bool)arg1 muninViewState:(id)arg2;
- (id)sharingURL;
- (void)openInMapsWithLaunchOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)initWithCLLocation:(id)arg1;
- (void)_launchActivityForBrandItem;
- (id)_addressFormattedAsSinglelineAddress;
- (id)_placeCardContact;
- (id)_mapsDataString;
- (_Bool)_canGetDirections;
- (_Bool)_restaurantLink_hasFeatureType:(unsigned long long)arg1;
- (id)_restaurantLink_firstProviderDisplayName;
- (_Bool)_hasRestaurantExtensionInfo;
- (unsigned long long)_restaurantExtensionModeForFirstProvider;
- (_Bool)openInMapsWithLaunchOptions:(id)arg1;
- (id)_bestBrandIconURLForSize:(struct CGSize)arg1 allowSmaller:(_Bool)arg2;
- (id)venueLabelWithContext:(unsigned long long)arg1;
- (id)_activityURL;
- (id)_activityURLUsingWebPlaceCard:(_Bool)arg1;
- (id)_cnPostalAddress;
- (id)thumbnailWithSize:(struct CGSize)arg1 annotationView:(id)arg2;
- (id)_vCardRepresentation;
- (id)_attributionFor:(id)arg1 sourceStringFormat:(id)arg2 moreSourceStringFormat:(id)arg3 imageTintColor:(id)arg4;
- (id)initWithGeoMapItem:(id)arg1 isPlaceHolderPlace:(_Bool)arg2;
- (void)_refreshAttribution;
- (id)initWithPlace:(id)arg1 isPlaceHolderPlace:(_Bool)arg2;
- (id)initWithCLLocation:(id)arg1 placeType:(int)arg2;
- (id)_addressFormattedAsShortenedAddress;
- (id)_addressFormattedAsMultilineAddress;
- (id)_addressFormattedAsWeatherDisplayName;
- (id)_urlExtraStorage;
- (id)_addressOrNil:(id)arg1;
- (id)_postalAddressFromMeCardUsingAddressIdentifier:(id)arg1;
- (id)_addressFormattedAsName;
- (id)_formatterForAdamId;
- (id)_attributionWithDisplayName:(id)arg1 attributionFormat:(id)arg2 logo:(id)arg3 isSnippetLogo:(_Bool)arg4;
- (id)initWithGeoMapItemAsCurrentLocation:(id)arg1;
- (id)_getBusiness;
- (void)preloadTransitInfoWithCompletion:(CDUnknownBlockType)arg1;
- (id)_localizedNextOpeningStringShort:(_Bool)arg1;
- (void)openInMapsWithLaunchOptions:(id)arg1 fromScene:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)_fullAddressWithMultiline:(_Bool)arg1;
- (id)_weatherDisplayName;
- (id)_addressFormattedAsCity;
- (id)_addressFormattedAsStreetOnly;
- (id)_addressFormattedAsTitlesForMapRect:(CDStruct_02837cd9)arg1;
- (id)formattedNumberOfReviewsIncludingProvider:(_Bool)arg1 formatter:(id)arg2;
- (id)_reviewForIdentifier:(id)arg1;
- (void)_markTransitInfoUpdated;
- (void)_updateTransitInfoWithMapItem:(id)arg1;
- (id)_restaurantLink_firstProviderIdentifier;
- (id)_restaurantLink_firstVendorID;
- (id)_restaurantLink_overridenBundleIDsForVendorIDs;
- (id)_restaurantLink_firstProviderPlaceIdentifier;
- (id)_initWithLabelMarker:(id)arg1;
- (id)_htmlRepresentation;
- (id)_vCardFilename;

@end
